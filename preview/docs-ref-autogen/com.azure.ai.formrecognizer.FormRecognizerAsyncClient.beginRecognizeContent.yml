### YamlMime:JavaMember
uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent*
fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent
name: beginRecognizeContent
nameWithType: FormRecognizerAsyncClient.beginRecognizeContent
members:
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> form, long length)
  name: beginRecognizeContent(Flux<ByteBuffer> form, long length)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> form, long length)
  summary: "Recognizes content/layout data using optical character recognition (OCR).\n <p>The service does not support cancellation of the long running operation and returns with an\n error message indicating absence of cancellation support.</p>\n\n Note that the <code>data</code> passed must be replayable if retries are enabled (the default). In other words, the\n <code>Flux</code> must produce the same data each time it is subscribed to.\n\n <p><strong>Code sample</strong></p>\n <pre>\n File form = new File&#40;&quot;&#123;local&#47;file_path&#47;fileName.jpg&#125;&quot;&#41;;\n &#47;&#47; Utility method to convert input stream to Byte buffer\n Flux&lt;ByteBuffer&gt; buffer = toFluxByteBuffer&#40;new ByteArrayInputStream&#40;Files.readAllBytes&#40;form.toPath&#40;&#41;&#41;&#41;&#41;;\n \n &#47;&#47; if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeContent&#40;buffer, form.length&#40;&#41;&#41;\n     .flatMap&#40;AsyncPollResponse::getFinalResult&#41;\n     .flatMap&#40;Flux::fromIterable&#41;\n     .subscribe&#40;formPage -&gt; &#123;\n         System.out.printf&#40;&quot;Page Angle: %s%n&quot;, formPage.getTextAngle&#40;&#41;&#41;;\n         System.out.printf&#40;&quot;Page Dimension unit: %s%n&quot;, formPage.getUnit&#40;&#41;&#41;;\n         &#47;&#47; Table information\n         System.out.println&#40;&quot;Recognized Tables: &quot;&#41;;\n         formPage.getTables&#40;&#41;.forEach&#40;formTable -&gt;\n             formTable.getCells&#40;&#41;.forEach&#40;recognizedTableCell -&gt;\n                 System.out.printf&#40;&quot;%s &quot;, recognizedTableCell.getText&#40;&#41;&#41;&#41;&#41;;\n     &#125;&#41;;\n </pre>"
  parameters:
  - description: The data of the form to recognize content information from.
    name: form
    type: <xref href="reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux" data-throw-if-not-resolved="False" />&lt;<xref href="java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer" data-throw-if-not-resolved="False" />&gt;
  - description: The exact length of the data.
    name: length
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False" />
  syntax: public PollerFlux<FormRecognizerOperationResult,List<FormPage>> beginRecognizeContent(Flux<ByteBuffer> form, long length)
  returns:
    description: |-
      A <xref uid="PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> polls the recognize content operation until it has completed, has failed, or has
       been cancelled. The completed operation returns a List of <xref uid="FormPage" data-throw-if-not-resolved="false">FormPage</xref>.
    type: <xref href="com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult" data-throw-if-not-resolved="False" />,<xref href="java.util.List?alt=java.util.List&text=List" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.ai.formrecognizer.models.FormPage?alt=com.azure.ai.formrecognizer.models.FormPage&text=FormPage" data-throw-if-not-resolved="False" />&gt;&gt;
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeContentOptions)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> form, long length, RecognizeContentOptions recognizeContentOptions)
  name: beginRecognizeContent(Flux<ByteBuffer> form, long length, RecognizeContentOptions recognizeContentOptions)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeContent(Flux<ByteBuffer> form, long length, RecognizeContentOptions recognizeContentOptions)
  summary: |-
    Recognizes content/layout data using optical character recognition (OCR).
     <p>The service does not support cancellation of the long running operation and returns with an
     error message indicating absence of cancellation support.</p>

     Note that the <code>data</code> passed must be replayable if retries are enabled (the default). In other words, the
     <code>Flux</code> must produce the same data each time it is subscribed to.

     <p><strong>Code sample</strong></p>
     <pre>
     File form = new File&#40;&quot;&#123;local&#47;file_path&#47;fileName.jpg&#125;&quot;&#41;;
     &#47;&#47; Utility method to convert input stream to Byte buffer
     Flux&lt;ByteBuffer&gt; buffer = toFluxByteBuffer&#40;new ByteArrayInputStream&#40;Files.readAllBytes&#40;form.toPath&#40;&#41;&#41;&#41;&#41;;
     &#47;&#47; if training polling operation completed, retrieve the final result.
     formRecognizerAsyncClient.beginRecognizeContent&#40;buffer, form.length&#40;&#41;,
         new RecognizeContentOptions&#40;&#41;
             .setContentType&#40;FormContentType.APPLICATION_PDF&#41;
             .setPollInterval&#40;Duration.ofSeconds&#40;5&#41;&#41;&#41;
         .flatMap&#40;AsyncPollResponse::getFinalResult&#41;
         .flatMap&#40;Flux::fromIterable&#41;
         .subscribe&#40;formPage -&gt; &#123;
             System.out.printf&#40;&quot;Page Angle: %s%n&quot;, formPage.getTextAngle&#40;&#41;&#41;;
             System.out.printf&#40;&quot;Page Dimension unit: %s%n&quot;, formPage.getUnit&#40;&#41;&#41;;
             &#47;&#47; Table information
             System.out.println&#40;&quot;Recognized Tables: &quot;&#41;;
             formPage.getTables&#40;&#41;.forEach&#40;formTable -&gt; formTable.getCells&#40;&#41;.forEach&#40;recognizedTableCell -&gt;
                 System.out.printf&#40;&quot;%s &quot;, recognizedTableCell.getText&#40;&#41;&#41;&#41;&#41;;
         &#125;&#41;;
     </pre>
  parameters:
  - description: The data of the form to recognize content information from.
    name: form
    type: <xref href="reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux" data-throw-if-not-resolved="False" />&lt;<xref href="java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer" data-throw-if-not-resolved="False" />&gt;
  - description: The exact length of the data.
    name: length
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False" />
  - description: |-
      The additional configurable <xref uid="RecognizeContentOptions" data-throw-if-not-resolved="false">options</xref>
       that may be passed when recognizing content/layout on a form.
    name: recognizeContentOptions
    type: <xref href="com.azure.ai.formrecognizer.models.RecognizeContentOptions?alt=com.azure.ai.formrecognizer.models.RecognizeContentOptions&text=RecognizeContentOptions" data-throw-if-not-resolved="False" />
  syntax: public PollerFlux<FormRecognizerOperationResult,List<FormPage>> beginRecognizeContent(Flux<ByteBuffer> form, long length, RecognizeContentOptions recognizeContentOptions)
  returns:
    description: |-
      A <xref uid="PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> polls the recognize content operation until it has completed, has failed, or has
       been cancelled. The completed operation returns a List of <xref uid="FormPage" data-throw-if-not-resolved="false">FormPage</xref>.
    type: <xref href="com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult" data-throw-if-not-resolved="False" />,<xref href="java.util.List?alt=java.util.List&text=List" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.ai.formrecognizer.models.FormPage?alt=com.azure.ai.formrecognizer.models.FormPage&text=FormPage" data-throw-if-not-resolved="False" />&gt;&gt;
type: method
metadata: {}
package: com.azure.ai.formrecognizer
artifact: com.azure:azure-ai-formrecognizer:3.0.0-beta.1
