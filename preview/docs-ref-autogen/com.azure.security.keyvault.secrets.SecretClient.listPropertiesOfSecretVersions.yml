### YamlMime:JavaMember
uid: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions*
fullName: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions
name: listPropertiesOfSecretVersions
nameWithType: SecretClient.listPropertiesOfSecretVersions
members:
- uid: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions(java.lang.String)
  fullName: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions(String name)
  name: listPropertiesOfSecretVersions(String name)
  nameWithType: SecretClient.listPropertiesOfSecretVersions(String name)
  summary: |-
    Lists all versions of the specified secret. Each <xref uid="SecretProperties" data-throw-if-not-resolved="false">secret</xref> returned only has its identifier
     and attributes populated. The secret values and secret versions are not listed in the response.
     This operation requires the <code>secrets/list</code> permission.

     <p><strong>Code sample</strong></p>
     <p>The sample below fetches all versions of the given secret. For each secret version retrieved, makes a call
     to <xref uid="#getSecret(String, String)" data-throw-if-not-resolved="false">getSecret(String, String)</xref> to get the version's value, and then prints it out.</p>
     <pre>
     for &#40;SecretProperties secret : secretClient.listPropertiesOfSecretVersions&#40;&quot;secretName&quot;&#41;&#41; &#123;
         KeyVaultSecret secretWithValue = secretClient.getSecret&#40;secret.getName&#40;&#41;, secret.getVersion&#40;&#41;&#41;;
         System.out.printf&#40;&quot;Received secret's version with name %s and value %s&quot;,
             secretWithValue.getName&#40;&#41;, secretWithValue.getValue&#40;&#41;&#41;;
     &#125;
     </pre>
  parameters:
  - description: The name of the secret.
    name: name
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  syntax: public PagedIterable<SecretProperties> listPropertiesOfSecretVersions(String name)
  returns:
    description: |-
      <xref uid="PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> of <xref uid="SecretProperties" data-throw-if-not-resolved="false">SecretProperties</xref> of all the versions of the specified secret in the vault.
           List is empty if secret with <code>name</code> does not exist in key vault
    type: <xref href="com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.security.keyvault.secrets.models.SecretProperties?alt=com.azure.security.keyvault.secrets.models.SecretProperties&text=SecretProperties" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions(java.lang.String,com.azure.core.util.Context)
  fullName: com.azure.security.keyvault.secrets.SecretClient.listPropertiesOfSecretVersions(String name, Context context)
  name: listPropertiesOfSecretVersions(String name, Context context)
  nameWithType: SecretClient.listPropertiesOfSecretVersions(String name, Context context)
  summary: |-
    Lists all versions of the specified secret. Each <xref uid="SecretProperties" data-throw-if-not-resolved="false">secret</xref> returned only has its identifier
     and attributes populated. The secret values and secret versions are not listed in the response.
     This operation requires the <code>secrets/list</code> permission.

     <p><strong>Code sample</strong></p>
     <p>The sample below fetches all versions of the given secret. For each secret version retrieved, makes a call
     to <xref uid="#getSecret(String, String)" data-throw-if-not-resolved="false">getSecret(String, String)</xref> to get the version's value, and then prints it out.</p>
     <pre>
     for &#40;SecretProperties secret : secretClient
         .listPropertiesOfSecretVersions&#40;&quot;secretName&quot;, new Context&#40;key1, value2&#41;&#41;&#41; &#123;
         KeyVaultSecret secretWithValue = secretClient.getSecret&#40;secret.getName&#40;&#41;, secret.getVersion&#40;&#41;&#41;;
         System.out.printf&#40;&quot;Received secret's version with name %s and value %s&quot;,
             secretWithValue.getName&#40;&#41;, secretWithValue.getValue&#40;&#41;&#41;;
     &#125;
     </pre>

     <p><strong>Iterate over secret versions by page</strong></p>
     <p>The sample below iterates over each <xref uid="SecretProperties" data-throw-if-not-resolved="false">secret</xref> by each page and calls
     <xref uid="SecretClient#getSecret(String, String)" data-throw-if-not-resolved="false">SecretClient#getSecret(String, String)</xref>. This will return the <xref uid="KeyVaultSecret" data-throw-if-not-resolved="false">secret</xref> with the
     corresponding version's value.</p>

     <pre>
     secretClient.listPropertiesOfSecretVersions&#40;&quot;secretName&quot;, new Context&#40;key1, value2&#41;&#41;
                 .iterableByPage&#40;&#41;.forEach&#40;resp -&gt; &#123;
                     System.out.printf&#40;&quot;Got response headers . Url: %s, Status code: %d %n&quot;,
                         resp.getRequest&#40;&#41;.getUrl&#40;&#41;, resp.getStatusCode&#40;&#41;&#41;;
                     resp.getItems&#40;&#41;.forEach&#40;value -&gt; &#123;
                         KeyVaultSecret secretWithValue = secretClient.getSecret&#40;value.getName&#40;&#41;, value.getVersion&#40;&#41;&#41;;
                         System.out.printf&#40;&quot;Received secret's version with name %s and value %s&quot;,
                             secretWithValue.getName&#40;&#41;, secretWithValue.getValue&#40;&#41;&#41;;
                     &#125;&#41;;
                 &#125;&#41;;
     </pre>
  parameters:
  - description: The name of the secret.
    name: name
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: Additional context that is passed through the HTTP pipeline during the service call.
    name: context
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
  syntax: public PagedIterable<SecretProperties> listPropertiesOfSecretVersions(String name, Context context)
  returns:
    description: |-
      <xref uid="PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> of <xref uid="SecretProperties" data-throw-if-not-resolved="false">SecretProperties</xref> of all the versions of the specified secret in the vault.
           List is empty if secret with <code>name</code> does not exist in key vault
    type: <xref href="com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.security.keyvault.secrets.models.SecretProperties?alt=com.azure.security.keyvault.secrets.models.SecretProperties&text=SecretProperties" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.security.keyvault.secrets
artifact: com.azure:azure-security-keyvault-secrets:4.2.0-beta.3
