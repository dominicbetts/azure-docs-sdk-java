### YamlMime:JavaMember
uid: com.azure.storage.file.datalake.DataLakeFileSystemClient.getAccessPolicyWithResponse*
fullName: com.azure.storage.file.datalake.DataLakeFileSystemClient.getAccessPolicyWithResponse
name: getAccessPolicyWithResponse
nameWithType: DataLakeFileSystemClient.getAccessPolicyWithResponse
members:
- uid: com.azure.storage.file.datalake.DataLakeFileSystemClient.getAccessPolicyWithResponse(java.lang.String,java.time.Duration,com.azure.core.util.Context)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemClient.getAccessPolicyWithResponse(String leaseId, Duration timeout, Context context)
  name: getAccessPolicyWithResponse(String leaseId, Duration timeout, Context context)
  nameWithType: DataLakeFileSystemClient.getAccessPolicyWithResponse(String leaseId, Duration timeout, Context context)
  summary: "Returns the file system's permissions. The permissions indicate whether file system's paths may be accessed\n publicly. For more information, see the\n <a href=\"https://docs.microsoft.com/rest/api/storageservices/get-container-acl\">Azure Docs</a>.\n\n <p><strong>Code Samples</strong></p>\n\n <pre>\n Context context = new Context&#40;&quot;Key&quot;, &quot;Value&quot;&#41;;\n FileSystemAccessPolicies accessPolicies = client.getAccessPolicyWithResponse&#40;leaseId, timeout, context&#41;\n     .getValue&#40;&#41;;\n System.out.printf&#40;&quot;Data Lake Access Type: %s%n&quot;, accessPolicies.getDataLakeAccessType&#40;&#41;&#41;;\n \n for &#40;DataLakeSignedIdentifier identifier : accessPolicies.getIdentifiers&#40;&#41;&#41; &#123;\n     System.out.printf&#40;&quot;Identifier Name: %s, Permissions %s%n&quot;,\n         identifier.getId&#40;&#41;,\n         identifier.getAccessPolicy&#40;&#41;.getPermissions&#40;&#41;&#41;;\n &#125;\n </pre>"
  parameters:
  - description: The lease ID the active lease on the file system must match.
    name: leaseId
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: An optional timeout value beyond which a <xref uid="RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    name: timeout
    type: <xref href="java.time.Duration?alt=java.time.Duration&text=Duration" data-throw-if-not-resolved="False" />
  - description: Additional context that is passed through the Http pipeline during the service call.
    name: context
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
  syntax: public Response<FileSystemAccessPolicies> getAccessPolicyWithResponse(String leaseId, Duration timeout, Context context)
  returns:
    description: The file system access policy.
    type: <xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.file.datalake.models.FileSystemAccessPolicies?alt=com.azure.storage.file.datalake.models.FileSystemAccessPolicies&text=FileSystemAccessPolicies" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.storage.file.datalake
artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
