### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava27.Strings.lenientFormat*
fullName: com.azure.cosmos.implementation.guava27.Strings.lenientFormat
name: lenientFormat
nameWithType: Strings.lenientFormat
members:
- uid: com.azure.cosmos.implementation.guava27.Strings.lenientFormat(java.lang.String,java.lang.Object...)
  fullName: com.azure.cosmos.implementation.guava27.Strings.lenientFormat(String template, Object[] args)
  name: lenientFormat(String template, Object[] args)
  nameWithType: Strings.lenientFormat(String template, Object[] args)
  summary: |-
    Returns the given <code>template</code> string with each occurrence of <code>"%s"</code> replaced with
     the corresponding argument value from <code>args</code>; or, if the placeholder and argument counts
     do not match, returns a best-effort form of that string. Will not throw an exception under
     normal conditions.

     <p><b>Note:</b> For most string-formatting needs, use <xref uid="String#format" data-throw-if-not-resolved="false">String.format</xref>,
     <xref uid="java.io.PrintWriter#format" data-throw-if-not-resolved="false">PrintWriter.format</xref>, and related methods. These support the
     full range of <a href="https://docs.oracle.com/javase/9/docs/api/java/util/Formatter.html#syntax">format
     specifiers</a>, and alert you to usage errors by throwing <xref uid="java.util.IllegalFormatException" data-throw-if-not-resolved="false">java.util.IllegalFormatException</xref>.

     <p>In certain cases, such as outputting debugging information or constructing a message to be
     used for another unchecked exception, an exception during string formatting would serve little
     purpose except to supplant the real information you were trying to provide. These are the cases
     this method is made for; it instead generates a best-effort string with all supplied argument
     values present. This method is also useful in environments such as GWT where <code>
     String.format</code> is not available. As an example, method implementations of the <xref uid="com.google.common.base.Preconditions" data-throw-if-not-resolved="false">com.google.common.base.Preconditions</xref> class use this formatter, for both of the reasons just discussed.

     <p><b>Warning:</b> Only the exact two-character placeholder sequence <code>"%s"</code> is
     recognized.
  parameters:
  - description: |-
      a string containing zero or more <code>"%s"</code> placeholder sequences. <code>
           null</code> is treated as the four-character string <code>"null"</code>.
    name: template
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: |-
      the arguments to be substituted into the message template. The first argument
           specified is substituted for the first occurrence of <code>"%s"</code> in the template, and so
           forth. A <code>null</code> argument is converted to the four-character string <code>"null"</code>;
           non-null values are converted to strings using <xref uid="Object#toString()" data-throw-if-not-resolved="false">Object#toString()</xref>.
    name: args
    type: <xref href="java.lang.Object?alt=java.lang.Object&text=Object" data-throw-if-not-resolved="False" />[]
  syntax: public static String lenientFormat(String template, Object[] args)
  returns:
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava27
artifact: com.azure:azure-cosmos:4.3.2-beta.2
