### YamlMime:JavaMember
uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificateVersions*
fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificateVersions
name: listPropertiesOfCertificateVersions
nameWithType: CertificateAsyncClient.listPropertiesOfCertificateVersions
members:
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificateVersions(java.lang.String)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.listPropertiesOfCertificateVersions(String certificateName)
  name: listPropertiesOfCertificateVersions(String certificateName)
  nameWithType: CertificateAsyncClient.listPropertiesOfCertificateVersions(String certificateName)
  summary: |-
    List all versions of the specified certificate. The individual certificate response in the flux is represented by <xref uid="CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref>
     as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy is not listed in
     the response. This operation requires the certificates/list permission.

     <p>It is possible to get the certificates with properties excluding the policy for all the versions from this information. Convert the <xref uid="PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref>
     containing <xref uid="CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> to <xref uid="PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing <xref uid="KeyVaultCertificate" data-throw-if-not-resolved="false">certificate</xref> using
     <xref uid="CertificateAsyncClient#getCertificateVersion(String, String)" data-throw-if-not-resolved="false">CertificateAsyncClient#getCertificateVersion(String, String)</xref> within <xref uid="Flux#flatMap(Function)" data-throw-if-not-resolved="false">Flux#flatMap(Function)</xref>.</p>

     <pre>
     certificateAsyncClient.listPropertiesOfCertificateVersions&#40;&quot;certificateName&quot;&#41;
         .subscriberContext&#40;Context.of&#40;key1, value1, key2, value2&#41;&#41;
         .subscribe&#40;certificate -&gt; certificateAsyncClient.getCertificateVersion&#40;certificate.getName&#40;&#41;,
             certificate.getVersion&#40;&#41;&#41;
             .subscribe&#40;certificateResponse -&gt; System.out.printf&#40;&quot;Received certificate with name %s and key id %s&quot;,
                 certificateResponse.getProperties&#40;&#41;.getName&#40;&#41;, certificateResponse.getKeyId&#40;&#41;&#41;&#41;&#41;;
     </pre>
  parameters:
  - description: The name of the certificate.
    name: certificateName
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  syntax: public PagedFlux<CertificateProperties> listPropertiesOfCertificateVersions(String certificateName)
  returns:
    description: A <xref uid="PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing <xref uid="CertificateProperties" data-throw-if-not-resolved="false">certificate</xref> of all the versions of the specified certificate in the vault. Flux is empty if certificate with <code>certificateName</code> does not exist in key vault.
    type: <xref href="com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.security.keyvault.certificates.models.CertificateProperties?alt=com.azure.security.keyvault.certificates.models.CertificateProperties&text=CertificateProperties" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.security.keyvault.certificates
artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
