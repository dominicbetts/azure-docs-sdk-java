### YamlMime:JavaType
uid: com.azure.cosmos.implementation.guava25.base.Converter
fullName: com.azure.cosmos.implementation.guava25.base.Converter<A,B>
name: Converter<A,B>
nameWithType: Converter<A,B>
summary: |-
  A function from `A` to `B` with an associated *reverse* function from `B` to `A`; used for converting back and forth between *different representations of the same information*.

  ### Invertibility ###

  The reverse operation **may** be a strict *inverse* (meaning that `converter.reverse().convert(converter.convert(a)).equals(a)` is always true). However, it is very common (perhaps *more* common) for round-trip conversion to be *lossy*. Consider an example round-trip using <xref uid="com.azure.cosmos.implementation.guava25.primitives.Doubles.stringConverter" data-throw-if-not-resolved="false">com.azure.cosmos.implementation.guava25.primitives.Doubles#stringConverter</xref>:

  1.  `stringConverter().convert("1.00")` returns the `Double` value `1.0`
  2.  `stringConverter().reverse().convert(1.0)` returns the string `"1.0"` \-- *not* the same string (`"1.00"`) we started with

  Note that it should still be the case that the round-tripped and original objects are *similar*.

  ### Nullability ###

  A converter always converts `null` to `null` and non-null references to non-null references. It would not make sense to consider `null` and a non-null reference to be "different representations of the same information", since one is distinguishable from *missing* information and the other is not. The <xref uid="com.azure.cosmos.implementation.guava25.base.Converter.convert" data-throw-if-not-resolved="false">#convert</xref> method handles this null behavior for all converters; implementations of <xref uid="com.azure.cosmos.implementation.guava25.base.Converter.doForward" data-throw-if-not-resolved="false">#doForward</xref> and <xref uid="com.azure.cosmos.implementation.guava25.base.Converter.doBackward" data-throw-if-not-resolved="false">#doBackward</xref> are guaranteed to never be passed `null`, and must never return `null`.

  ### Common ways to use ###

  Getting a converter:

   *  Use a provided converter implementation, such as <xref uid="com.azure.cosmos.implementation.guava25.base.Enums.stringConverter" data-throw-if-not-resolved="false">Enums#stringConverter</xref>, <xref uid="com.azure.cosmos.implementation.guava25.primitives.Ints.stringConverter" data-throw-if-not-resolved="false">Ints.stringConverter</xref> or the <xref uid="com.azure.cosmos.implementation.guava25.base.Converter.reverse" data-throw-if-not-resolved="false">reverse</xref> views of these.
   *  Convert between specific preset values using <xref uid="com.azure.cosmos.implementation.guava25.collect.Maps.asConverter" data-throw-if-not-resolved="false">Maps.asConverter</xref>. For example, use this to create a "fake" converter for a unit test. It is unnecessary (and confusing) to *mock* the `Converter` type using a mocking framework.
   *  Extend this class and implement its <xref uid="com.azure.cosmos.implementation.guava25.base.Converter.doForward" data-throw-if-not-resolved="false">#doForward</xref> and <xref uid="com.azure.cosmos.implementation.guava25.base.Converter.doBackward" data-throw-if-not-resolved="false">#doBackward</xref> methods.
   *  **Java 8 users:** you may prefer to pass two lambda expressions or method references to the <xref uid="com.azure.cosmos.implementation.guava25.base.Converter.from" data-throw-if-not-resolved="false">from</xref> factory method.

  Using a converter:

   *  Convert one instance in the "forward" direction using `converter.convert(a)`.
   *  Convert multiple instances "forward" using `converter.convertAll(as)`.
   *  Convert in the "backward" direction using `converter.reverse().convert(b)` or `converter.reverse().convertAll(bs)`.
   *  Use `converter` or `converter.reverse()` anywhere a <xref uid="java.util.function.Function" data-throw-if-not-resolved="false">java.util.function.Function</xref> is accepted (for example <xref uid="java.util.stream.Stream.map" data-throw-if-not-resolved="false">Stream.map</xref>).
   *  **Do not** call <xref uid="com.azure.cosmos.implementation.guava25.base.Converter.doForward" data-throw-if-not-resolved="false">#doForward</xref> or <xref uid="com.azure.cosmos.implementation.guava25.base.Converter.doBackward" data-throw-if-not-resolved="false">#doBackward</xref> directly; these exist only to be overridden.

  ### Example ###

  ```java
  return new Converter<Integer, String>() {
       protected String doForward(Integer i) {
         return Integer.toHexString(i);
       }

       protected Integer doBackward(String s) {
         return parseUnsignedInt(s, 16);
       }
     };
  ```

  An alternative using Java 8:

  ```java
  return Converter.from(
       Integer::toHexString,
       s -> parseUnsignedInt(s, 16));
  ```
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False" />
inheritedMembers:
- java.lang.Object.clone()
- java.lang.Object.equals(java.lang.Object)
- java.lang.Object.finalize()
- java.lang.Object.getClass()
- java.lang.Object.hashCode()
- java.lang.Object.notify()
- java.lang.Object.notifyAll()
- java.lang.Object.toString()
- java.lang.Object.wait()
- java.lang.Object.wait(long)
- java.lang.Object.wait(long,int)
syntax: public abstract class Converter<A,B> implements Function<A,B>
constructors:
- com.azure.cosmos.implementation.guava25.base.Converter.Converter()
methods:
- com.azure.cosmos.implementation.guava25.base.Converter.<A,B>from(com.azure.cosmos.implementation.guava25.base.Function<? super A,? extends B>,com.azure.cosmos.implementation.guava25.base.Function<? super B,? extends A>)
- com.azure.cosmos.implementation.guava25.base.Converter.<C>andThen(com.azure.cosmos.implementation.guava25.base.Converter<B,C>)
- com.azure.cosmos.implementation.guava25.base.Converter.<T>identity()
- com.azure.cosmos.implementation.guava25.base.Converter.apply(A)
- com.azure.cosmos.implementation.guava25.base.Converter.convert(A)
- com.azure.cosmos.implementation.guava25.base.Converter.convertAll(java.lang.Iterable<? extends A>)
- com.azure.cosmos.implementation.guava25.base.Converter.doBackward(B)
- com.azure.cosmos.implementation.guava25.base.Converter.doForward(A)
- com.azure.cosmos.implementation.guava25.base.Converter.equals(java.lang.Object)
- com.azure.cosmos.implementation.guava25.base.Converter.reverse()
type: class
typeParameters:
- name: A
- name: B
implements:
- <xref href="com.azure.cosmos.implementation.guava25.base.Function?alt=com.azure.cosmos.implementation.guava25.base.Function&text=Function" data-throw-if-not-resolved="False" />&lt;<xref href="A?alt=A&text=A" data-throw-if-not-resolved="False" />,<xref href="B?alt=B&text=B" data-throw-if-not-resolved="False" />&gt;
metadata: {}
package: com.azure.cosmos.implementation.guava25.base
artifact: com.azure:azure-cosmos:4.3.2-beta.2
