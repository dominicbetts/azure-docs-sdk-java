### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.collect.Ordering.greatestOf*
fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>greatestOf
name: <E>greatestOf
nameWithType: Ordering<T>.<E>greatestOf
members:
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<E>greatestOf(java.lang.Iterable<E>,int)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>greatestOf(Iterable<E> iterable, int k)
  name: <E>greatestOf(Iterable<E> iterable, int k)
  nameWithType: Ordering<T>.<E>greatestOf(Iterable<E> iterable, int k)
  summary: |-
    Returns the <code>k</code> greatest elements of the given iterable according to this ordering, in
     order from greatest to least. If there are fewer than <code>k</code> elements present, all will be
     included.

     <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple
     elements are equivalent, it is undefined which will come first.

     <p><b>Java 8 users:</b> Use <code>Streams.stream(iterable).collect(Comparators.greatest(k,
     thisComparator))</code> instead.
  parameters:
  - name: iterable
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
  - name: k
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False" />
  syntax: public List<E> <E>greatestOf(Iterable<E> iterable, int k)
  returns:
    description: |-
      an immutable <code>RandomAccess</code> list of the <code>k</code> greatest elements in
           <i>descending order</i>
    type: <xref href="java.util.List?alt=java.util.List&text=List" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<E>greatestOf(java.util.Iterator<E>,int)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>greatestOf(Iterator<E> iterator, int k)
  name: <E>greatestOf(Iterator<E> iterator, int k)
  nameWithType: Ordering<T>.<E>greatestOf(Iterator<E> iterator, int k)
  summary: |-
    Returns the <code>k</code> greatest elements from the given iterator according to this ordering, in
     order from greatest to least. If there are fewer than <code>k</code> elements present, all will be
     included.

     <p>The implementation does not necessarily use a <i>stable</i> sorting algorithm; when multiple
     elements are equivalent, it is undefined which will come first.

     <p><b>Java 8 users:</b> Continue to use this method for now. After the next release of Guava,
     use <code>Streams.stream(iterator).collect(Comparators.greatest(k, thisComparator))</code> instead.
  parameters:
  - name: iterator
    type: <xref href="java.util.Iterator?alt=java.util.Iterator&text=Iterator" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
  - name: k
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False" />
  syntax: public List<E> <E>greatestOf(Iterator<E> iterator, int k)
  returns:
    description: |-
      an immutable <code>RandomAccess</code> list of the <code>k</code> greatest elements in
           <i>descending order</i>
    type: <xref href="java.util.List?alt=java.util.List&text=List" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.collect
artifact: com.azure:azure-cosmos:4.3.2-beta.2
