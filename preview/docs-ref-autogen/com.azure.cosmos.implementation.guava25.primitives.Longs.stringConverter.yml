### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.primitives.Longs.stringConverter*
fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.stringConverter
name: stringConverter
nameWithType: Longs.stringConverter
members:
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.stringConverter()
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.stringConverter()
  name: stringConverter()
  nameWithType: Longs.stringConverter()
  summary: |-
    Returns a serializable converter object that converts between strings and longs using <xref uid="Long#decode" data-throw-if-not-resolved="false">Long#decode</xref> and <xref uid="Long#toString()" data-throw-if-not-resolved="false">Long#toString()</xref>. The returned converter throws <xref uid="NumberFormatException" data-throw-if-not-resolved="false">NumberFormatException</xref> if the input string is invalid.

     <p><b>Warning:</b> please see <xref uid="Long#decode" data-throw-if-not-resolved="false">Long#decode</xref> to understand exactly how strings are parsed.
     For example, the string <code>"0123"</code> is treated as <i>octal</i> and converted to the value
     <code>83L</code>.
  syntax: public static Converter<String,Long> stringConverter()
  returns:
    type: <xref href="com.azure.cosmos.implementation.guava25.base.Converter?alt=com.azure.cosmos.implementation.guava25.base.Converter&text=Converter" data-throw-if-not-resolved="False" />&lt;<xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />,<xref href="java.lang.Long?alt=java.lang.Long&text=Long" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.primitives
artifact: com.azure:azure-cosmos:4.3.2-beta.2
