### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.collect.Iterators.peekingIterator*
fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>peekingIterator
name: <T>peekingIterator
nameWithType: Iterators.<T>peekingIterator
members:
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>peekingIterator(com.azure.cosmos.implementation.guava25.collect.PeekingIterator<T>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>peekingIterator(PeekingIterator<T> iterator)
  name: <T>peekingIterator(PeekingIterator<T> iterator)
  nameWithType: Iterators.<T>peekingIterator(PeekingIterator<T> iterator)
  summary: Simply returns its argument.
  parameters:
  - name: iterator
    type: <xref href="com.azure.cosmos.implementation.guava25.collect.PeekingIterator?alt=com.azure.cosmos.implementation.guava25.collect.PeekingIterator&text=PeekingIterator" data-throw-if-not-resolved="False" />&lt;<xref href="T?alt=T&text=T" data-throw-if-not-resolved="False" />&gt;
  syntax: public static PeekingIterator<T> <T>peekingIterator(PeekingIterator<T> iterator)
  returns:
    type: <xref href="com.azure.cosmos.implementation.guava25.collect.PeekingIterator?alt=com.azure.cosmos.implementation.guava25.collect.PeekingIterator&text=PeekingIterator" data-throw-if-not-resolved="False" />&lt;<xref href="T?alt=T&text=T" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>peekingIterator(java.util.Iterator<? extends T>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>peekingIterator(Iterator<? extends T> iterator)
  name: <T>peekingIterator(Iterator<? extends T> iterator)
  nameWithType: Iterators.<T>peekingIterator(Iterator<? extends T> iterator)
  summary: |-
    Returns a <code>PeekingIterator</code> backed by the given iterator.

     <p>Calls to the <code>peek</code> method with no intervening calls to <code>next</code> do not affect the
     iteration, and hence return the same object each time. A subsequent call to <code>next</code> is
     guaranteed to return the same object again. For example:

     <pre><code>
     PeekingIterator<String> peekingIterator =
         Iterators.peekingIterator(Iterators.forArray("a", "b"));
     String a1 = peekingIterator.peek(); // returns "a"
     String a2 = peekingIterator.peek(); // also returns "a"
     String a3 = peekingIterator.next(); // also returns "a"
     </code></pre>

     <p>Any structural changes to the underlying iteration (aside from those performed by the
     iterator's own <xref uid="PeekingIterator#remove()" data-throw-if-not-resolved="false">PeekingIterator#remove()</xref> method) will leave the iterator in an undefined
     state.

     <p>The returned iterator does not support removal after peeking, as explained by <xref uid="PeekingIterator#remove()" data-throw-if-not-resolved="false">PeekingIterator#remove()</xref>.

     <p>Note: If the given iterator is already a <code>PeekingIterator</code>, it <i>might</i> be
     returned to the caller, although this is neither guaranteed to occur nor required to be
     consistent. For example, this method <i>might</i> choose to pass through recognized
     implementations of <code>PeekingIterator</code> when the behavior of the implementation is known to
     meet the contract guaranteed by this method.

     <p>There is no <xref uid="Iterable" data-throw-if-not-resolved="false">Iterable</xref> equivalent to this method, so use this method to wrap each
     individual iterator as it is generated.
  parameters:
  - description: |-
      the backing iterator. The <xref uid="PeekingIterator" data-throw-if-not-resolved="false">PeekingIterator</xref> assumes ownership of this
           iterator, so users should cease making direct calls to it after calling this method.
    name: iterator
    type: <xref href="java.util.Iterator?alt=java.util.Iterator&text=Iterator" data-throw-if-not-resolved="False" />&lt;<xref href="? extends T?alt=? extends T&text=? extends T" data-throw-if-not-resolved="False" />&gt;
  syntax: public static PeekingIterator<T> <T>peekingIterator(Iterator<? extends T> iterator)
  returns:
    description: a peeking iterator backed by that iterator. Apart from the additional <xref uid="PeekingIterator#peek()" data-throw-if-not-resolved="false">PeekingIterator#peek()</xref> method, this iterator behaves exactly the same as <code>iterator</code>.
    type: <xref href="com.azure.cosmos.implementation.guava25.collect.PeekingIterator?alt=com.azure.cosmos.implementation.guava25.collect.PeekingIterator&text=PeekingIterator" data-throw-if-not-resolved="False" />&lt;<xref href="T?alt=T&text=T" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.collect
artifact: com.azure:azure-cosmos:4.3.2-beta.2
