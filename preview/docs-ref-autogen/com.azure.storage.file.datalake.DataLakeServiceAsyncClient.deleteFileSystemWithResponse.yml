### YamlMime:JavaMember
uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystemWithResponse*
fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystemWithResponse
name: deleteFileSystemWithResponse
nameWithType: DataLakeServiceAsyncClient.deleteFileSystemWithResponse
members:
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystemWithResponse(java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystemWithResponse(String fileSystemName, DataLakeRequestConditions requestConditions)
  name: deleteFileSystemWithResponse(String fileSystemName, DataLakeRequestConditions requestConditions)
  nameWithType: DataLakeServiceAsyncClient.deleteFileSystemWithResponse(String fileSystemName, DataLakeRequestConditions requestConditions)
  summary: |-
    Deletes the specified file system in the storage account. If the file system doesn't exist the operation fails.
     For more information see the <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container">Azure
     Docs</a>.

     <p><strong>Code Samples</strong></p>

     <pre>
     client.deleteFileSystemWithResponse&#40;&quot;fileSystemName&quot;, new DataLakeRequestConditions&#40;&#41;&#41;.subscribe&#40;response -&gt;
         System.out.printf&#40;&quot;Delete file system completed with status %d%n&quot;, response.getStatusCode&#40;&#41;&#41;&#41;;
     </pre>
  parameters:
  - description: Name of the file system to delete
    name: fileSystemName
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: <xref uid="DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    name: requestConditions
    type: <xref href="com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions" data-throw-if-not-resolved="False" />
  syntax: public Mono<Response<Void>> deleteFileSystemWithResponse(String fileSystemName, DataLakeRequestConditions requestConditions)
  returns:
    description: A <xref uid="Mono" data-throw-if-not-resolved="false">Mono</xref> containing containing status code and HTTP headers
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="java.lang.Void?alt=java.lang.Void&text=Void" data-throw-if-not-resolved="False" />&gt;&gt;
type: method
metadata: {}
package: com.azure.storage.file.datalake
artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
