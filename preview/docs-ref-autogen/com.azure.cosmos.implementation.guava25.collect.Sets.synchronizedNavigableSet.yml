### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.collect.Sets.synchronizedNavigableSet*
fullName: com.azure.cosmos.implementation.guava25.collect.Sets.<E>synchronizedNavigableSet
name: <E>synchronizedNavigableSet
nameWithType: Sets.<E>synchronizedNavigableSet
members:
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.<E>synchronizedNavigableSet(java.util.NavigableSet<E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.<E>synchronizedNavigableSet(NavigableSet<E> navigableSet)
  name: <E>synchronizedNavigableSet(NavigableSet<E> navigableSet)
  nameWithType: Sets.<E>synchronizedNavigableSet(NavigableSet<E> navigableSet)
  summary: |-
    Returns a synchronized (thread-safe) navigable set backed by the specified navigable set. In
     order to guarantee serial access, it is critical that <b>all</b> access to the backing
     navigable set is accomplished through the returned navigable set (or its views).

     <p>It is imperative that the user manually synchronize on the returned sorted set when
     iterating over it or any of its <code>descendingSet</code>, <code>subSet</code>, <code>headSet</code>, or
     <code>tailSet</code> views.

     <pre><code>
     NavigableSet<E> set = synchronizedNavigableSet(new TreeSet<E>());
      ...
     synchronized (set) {
       // Must be in the synchronized block
       Iterator<E> it = set.iterator();
       while (it.hasNext()) {
         foo(it.next());
       }
     }
     </code></pre>

     <p>or:

     <pre><code>
     NavigableSet<E> set = synchronizedNavigableSet(new TreeSet<E>());
     NavigableSet<E> set2 = set.descendingSet().headSet(foo);
      ...
     synchronized (set) { // Note: set, not set2!!!
       // Must be in the synchronized block
       Iterator<E> it = set2.descendingIterator();
       while (it.hasNext())
         foo(it.next());
       }
     </code>
     }</pre>

     <p>Failure to follow this advice may result in non-deterministic behavior.

     <p>The returned navigable set will be serializable if the specified navigable set is
     serializable.
  parameters:
  - description: the navigable set to be "wrapped" in a synchronized navigable set.
    name: navigableSet
    type: <xref href="java.util.NavigableSet?alt=java.util.NavigableSet&text=NavigableSet" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
  syntax: public static NavigableSet<E> <E>synchronizedNavigableSet(NavigableSet<E> navigableSet)
  returns:
    description: a synchronized view of the specified navigable set.
    type: <xref href="java.util.NavigableSet?alt=java.util.NavigableSet&text=NavigableSet" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.collect
artifact: com.azure:azure-cosmos:4.3.2-beta.2
