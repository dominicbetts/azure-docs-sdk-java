### YamlMime:JavaMember
uid: com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret*
fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret
name: setSecret
nameWithType: SecretAsyncClient.setSecret
members:
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret(com.azure.security.keyvault.secrets.models.KeyVaultSecret)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret(KeyVaultSecret secret)
  name: setSecret(KeyVaultSecret secret)
  nameWithType: SecretAsyncClient.setSecret(KeyVaultSecret secret)
  summary: "Adds a secret to the key vault if it does not exist. If the named secret exists, a new version of the secret is\n created. This operation requires the <code>secrets/set</code> permission.\n\n <p>The <xref uid=\"SecretProperties#getExpiresOn()\" data-throw-if-not-resolved=\"false\">expires</xref>, <xref uid=\"SecretProperties#getContentType()\" data-throw-if-not-resolved=\"false\">contentType</xref>,\n and <xref uid=\"SecretProperties#getNotBefore()\" data-throw-if-not-resolved=\"false\">notBefore</xref> values in <code>secret</code> are optional.\n If not specified, <xref uid=\"SecretProperties#isEnabled()\" data-throw-if-not-resolved=\"false\">enabled</xref> is set to true by key vault.</p>\n\n <p><strong>Code sample</strong></p>\n <p>Creates a new secret which activates in one day and expires in one year. Subscribes to the call asynchronously\n and prints out the newly created secret details when a response is received.</p>\n\n <pre>\n SecretProperties properties = new SecretProperties&#40;&#41;\n     .setExpiresOn&#40;OffsetDateTime.now&#40;&#41;.plusDays&#40;60&#41;&#41;;\n KeyVaultSecret newSecret = new KeyVaultSecret&#40;&quot;secretName&quot;, &quot;secretValue&quot;&#41;\n     .setProperties&#40;properties&#41;;\n \n secretAsyncClient.setSecret&#40;newSecret&#41;\n     .subscribe&#40;secretResponse -&gt;\n     System.out.printf&#40;&quot;Secret is created with name %s and value %s %n&quot;,\n         secretResponse.getName&#40;&#41;, secretResponse.getValue&#40;&#41;&#41;&#41;;\n </pre>"
  parameters:
  - description: |-
      The Secret object containing information about the secret and its properties. The properties
           <xref uid="KeyVaultSecret#getName()" data-throw-if-not-resolved="false">secret.name</xref> and <xref uid="KeyVaultSecret#getValue()" data-throw-if-not-resolved="false">secret.value</xref> cannot be
           null.
    name: secret
    type: <xref href="com.azure.security.keyvault.secrets.models.KeyVaultSecret?alt=com.azure.security.keyvault.secrets.models.KeyVaultSecret&text=KeyVaultSecret" data-throw-if-not-resolved="False" />
  syntax: public Mono<KeyVaultSecret> setSecret(KeyVaultSecret secret)
  returns:
    description: A <xref uid="Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="KeyVaultSecret" data-throw-if-not-resolved="false">created secret</xref>.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.security.keyvault.secrets.models.KeyVaultSecret?alt=com.azure.security.keyvault.secrets.models.KeyVaultSecret&text=KeyVaultSecret" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret(java.lang.String,java.lang.String)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.setSecret(String name, String value)
  name: setSecret(String name, String value)
  nameWithType: SecretAsyncClient.setSecret(String name, String value)
  summary: |-
    Adds a secret to the key vault if it does not exist. If the named secret exists, a new version of the secret is
     created. This operation requires the <code>secrets/set</code> permission.

     <p><strong>Code sample</strong></p>
     <p>Creates a new secret in the key vault. Subscribes to the call asynchronously and prints out
     the newly created secret details when a response is received.</p>
     <pre>
     secretAsyncClient.setSecret&#40;&quot;secretName&quot;, &quot;secretValue&quot;&#41;
         .subscribe&#40;secretResponse -&gt;
             System.out.printf&#40;&quot;Secret is created with name %s and value %s%n&quot;,
                 secretResponse.getName&#40;&#41;, secretResponse.getValue&#40;&#41;&#41;&#41;;
     </pre>
  parameters:
  - description: The name of the secret. It is required and cannot be null.
    name: name
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: The value of the secret. It is required and cannot be null.
    name: value
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  syntax: public Mono<KeyVaultSecret> setSecret(String name, String value)
  returns:
    description: A <xref uid="Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="KeyVaultSecret" data-throw-if-not-resolved="false">created secret</xref>.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.security.keyvault.secrets.models.KeyVaultSecret?alt=com.azure.security.keyvault.secrets.models.KeyVaultSecret&text=KeyVaultSecret" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.security.keyvault.secrets
artifact: com.azure:azure-security-keyvault-secrets:4.2.0-beta.3
