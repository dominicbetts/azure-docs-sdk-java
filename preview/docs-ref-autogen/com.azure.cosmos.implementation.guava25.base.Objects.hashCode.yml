### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.base.Objects.hashCode*
fullName: com.azure.cosmos.implementation.guava25.base.Objects.hashCode
name: hashCode
nameWithType: Objects.hashCode
members:
- uid: com.azure.cosmos.implementation.guava25.base.Objects.hashCode(java.lang.Object...)
  fullName: com.azure.cosmos.implementation.guava25.base.Objects.hashCode(Object[] objects)
  name: hashCode(Object[] objects)
  nameWithType: Objects.hashCode(Object[] objects)
  summary: |-
    Generates a hash code for multiple values. The hash code is generated by calling <xref uid="Arrays#hashCode(Object[])" data-throw-if-not-resolved="false">Arrays#hashCode(Object[])</xref>. Note that array arguments to this method, with the exception of a
     single Object array, do not get any special handling; their hash codes are based on identity
     and not contents.

     <p>This is useful for implementing <xref uid="Object#hashCode()" data-throw-if-not-resolved="false">Object#hashCode()</xref>. For example, in an object that
     has three properties, <code>x</code>, <code>y</code>, and <code>z</code>, one could write:

     <pre><code>
     public int hashCode() {
       return Objects.hashCode(getX(), getY(), getZ());
     }
     </code></pre>

     <p><b>Warning:</b> When a single object is supplied, the returned hash code does not equal the
     hash code of that object.

     <p><b>Note for Java 7 and later:</b> This method should be treated as deprecated; use <xref uid="java.util.Objects#hash" data-throw-if-not-resolved="false">java.util.Objects#hash</xref> instead.
  parameters:
  - name: objects
    type: <xref href="java.lang.Object?alt=java.lang.Object&text=Object" data-throw-if-not-resolved="False" />[]
  syntax: public static int hashCode(Object[] objects)
  returns:
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False" />
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.base
artifact: com.azure:azure-cosmos:4.3.2-beta.2
