### YamlMime:JavaMember
uid: com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.renewMessageLock*
fullName: com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.renewMessageLock
name: renewMessageLock
nameWithType: ServiceBusReceiverAsyncClient.renewMessageLock
members:
- uid: com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.renewMessageLock(java.lang.String)
  fullName: com.azure.messaging.servicebus.ServiceBusReceiverAsyncClient.renewMessageLock(String lockToken)
  name: renewMessageLock(String lockToken)
  nameWithType: ServiceBusReceiverAsyncClient.renewMessageLock(String lockToken)
  summary: |-
    Asynchronously renews the lock on the specified message. The lock will be renewed based on the setting specified
     on the entity. When a message is received in <xref uid="ReceiveMode#PEEK_LOCK" data-throw-if-not-resolved="false">ReceiveMode#PEEK_LOCK</xref> mode, the message is locked on the
     server for this receiver instance for a duration as specified during the Queue creation (LockDuration). If
     processing of the message requires longer than this duration, the lock needs to be renewed. For each renewal, the
     lock is reset to the entity's LockDuration value.
  parameters:
  - description: Lock token of the message to renew.
    name: lockToken
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  syntax: public Mono<Instant> renewMessageLock(String lockToken)
  returns:
    description: The new expiration time for the message.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="java.time.Instant?alt=java.time.Instant&text=Instant" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.messaging.servicebus
artifact: com.azure:azure-messaging-servicebus:7.0.0-beta.5
