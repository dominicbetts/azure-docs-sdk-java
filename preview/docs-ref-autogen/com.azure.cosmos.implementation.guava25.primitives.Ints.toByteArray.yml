### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.primitives.Ints.toByteArray*
fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.toByteArray
name: toByteArray
nameWithType: Ints.toByteArray
members:
- uid: com.azure.cosmos.implementation.guava25.primitives.Ints.toByteArray(int)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Ints.toByteArray(int value)
  name: toByteArray(int value)
  nameWithType: Ints.toByteArray(int value)
  summary: |-
    Returns a big-endian representation of <code>value</code> in a 4-element byte array; equivalent to
     <code>ByteBuffer.allocate(4).putInt(value).array()</code>. For example, the input value <code>
     0x12131415</code> would yield the byte array <code>{0x12, 0x13, 0x14, 0x15}</code>.

     <p>If you need to convert and concatenate several values (possibly even of different types),
     use a shared <xref uid="java.nio.ByteBuffer" data-throw-if-not-resolved="false">java.nio.ByteBuffer</xref> instance, or use <xref uid="com.azure.cosmos.io.ByteStreams#newDataOutput()" data-throw-if-not-resolved="false">com.azure.cosmos.io.ByteStreams#newDataOutput()</xref> to get a growable buffer.
  parameters:
  - name: value
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False" />
  syntax: public static byte[] toByteArray(int value)
  returns:
    type: <xref href="byte?alt=byte&text=byte" data-throw-if-not-resolved="False" />[]
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.primitives
artifact: com.azure:azure-cosmos:4.3.2-beta.2
