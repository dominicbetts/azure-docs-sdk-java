### YamlMime:JavaMember
uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuerWithResponse*
fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuerWithResponse
name: createIssuerWithResponse
nameWithType: CertificateAsyncClient.createIssuerWithResponse
members:
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuerWithResponse(com.azure.security.keyvault.certificates.models.CertificateIssuer)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.createIssuerWithResponse(CertificateIssuer issuer)
  name: createIssuerWithResponse(CertificateIssuer issuer)
  nameWithType: CertificateAsyncClient.createIssuerWithResponse(CertificateIssuer issuer)
  summary: |-
    Creates the specified certificate issuer. The SetCertificateIssuer operation updates the specified certificate issuer if it
     already exists or adds it if doesn't exist. This operation requires the certificates/setissuers permission.

     <p><strong>Code Samples</strong></p>
     <p>Creates a new certificate issuer in the key vault. Prints out the created certificate
     issuer details when a response has been received.</p>

     <pre>
     CertificateIssuer newIssuer = new CertificateIssuer&#40;&quot;issuerName&quot;, &quot;providerName&quot;&#41;
         .setAccountId&#40;&quot;keyvaultuser&quot;&#41;
         .setPassword&#40;&quot;temp2&quot;&#41;;
     certificateAsyncClient.createIssuerWithResponse&#40;newIssuer&#41;
         .subscriberContext&#40;Context.of&#40;key1, value1, key2, value2&#41;&#41;
         .subscribe&#40;issuerResponse -&gt; &#123;
             System.out.printf&#40;&quot;Issuer created with %s and %s&quot;, issuerResponse.getValue&#40;&#41;.getName&#40;&#41;,
                 issuerResponse.getValue&#40;&#41;.getProvider&#40;&#41;&#41;;
         &#125;&#41;;
     </pre>
  parameters:
  - description: |-
      The configuration of the certificate issuer to be created. Use
       <xref uid="CertificateIssuer#CertificateIssuer(String, String)" data-throw-if-not-resolved="false">CertificateIssuer#CertificateIssuer(String, String)</xref> to initialize the issuer object
    name: issuer
    type: <xref href="com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer" data-throw-if-not-resolved="False" />
  syntax: public Mono<Response<CertificateIssuer>> createIssuerWithResponse(CertificateIssuer issuer)
  returns:
    description: A <xref uid="Mono" data-throw-if-not-resolved="false">Mono</xref> containing  a <xref uid="Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="Response#getValue()" data-throw-if-not-resolved="false">value</xref> contains the created <xref uid="CertificateIssuer" data-throw-if-not-resolved="false">certificate issuer</xref>.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.security.keyvault.certificates.models.CertificateIssuer?alt=com.azure.security.keyvault.certificates.models.CertificateIssuer&text=CertificateIssuer" data-throw-if-not-resolved="False" />&gt;&gt;
type: method
metadata: {}
package: com.azure.security.keyvault.certificates
artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
