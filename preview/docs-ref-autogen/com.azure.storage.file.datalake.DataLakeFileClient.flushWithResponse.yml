### YamlMime:JavaMember
uid: com.azure.storage.file.datalake.DataLakeFileClient.flushWithResponse*
fullName: com.azure.storage.file.datalake.DataLakeFileClient.flushWithResponse
name: flushWithResponse
nameWithType: DataLakeFileClient.flushWithResponse
members:
- uid: com.azure.storage.file.datalake.DataLakeFileClient.flushWithResponse(long,boolean,boolean,com.azure.storage.file.datalake.models.PathHttpHeaders,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  fullName: com.azure.storage.file.datalake.DataLakeFileClient.flushWithResponse(long position, boolean retainUncommittedData, boolean close, PathHttpHeaders httpHeaders, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  name: flushWithResponse(long position, boolean retainUncommittedData, boolean close, PathHttpHeaders httpHeaders, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  nameWithType: DataLakeFileClient.flushWithResponse(long position, boolean retainUncommittedData, boolean close, PathHttpHeaders httpHeaders, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  summary: "Flushes (writes) data previously appended to the file through a call to append.\n The previously uploaded data must be contiguous.\n\n <p><strong>Code Samples</strong></p>\n\n <pre>\n FileRange range = new FileRange&#40;1024, 2048L&#41;;\n DownloadRetryOptions options = new DownloadRetryOptions&#40;&#41;.setMaxRetryRequests&#40;5&#41;;\n byte[] contentMd5 = new byte[0]; &#47;&#47; Replace with valid md5\n boolean retainUncommittedData = false;\n boolean close = false;\n PathHttpHeaders httpHeaders = new PathHttpHeaders&#40;&#41;\n     .setContentLanguage&#40;&quot;en-US&quot;&#41;\n     .setContentType&#40;&quot;binary&quot;&#41;;\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions&#40;&#41;\n     .setLeaseId&#40;leaseId&#41;;\n \n Response&lt;PathInfo&gt; response = client.flushWithResponse&#40;position, retainUncommittedData, close, httpHeaders,\n     requestConditions, timeout, new Context&#40;key1, value1&#41;&#41;;\n System.out.printf&#40;&quot;Flush data completed with status %d%n&quot;, response.getStatusCode&#40;&#41;&#41;;\n </pre>\n\n <p>For more information, see the\n <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/update\">Azure\n Docs</a></p>"
  parameters:
  - description: The length of the file after all data has been written.
    name: position
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False" />
  - description: Whether or not uncommitted data is to be retained after the operation.
    name: retainUncommittedData
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False" />
  - description: Whether or not a file changed event raised indicates completion (true) or modification (false).
    name: close
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False" />
  - description: <xref uid="PathHttpHeaders" data-throw-if-not-resolved="false">httpHeaders</xref>
    name: httpHeaders
    type: <xref href="com.azure.storage.file.datalake.models.PathHttpHeaders?alt=com.azure.storage.file.datalake.models.PathHttpHeaders&text=PathHttpHeaders" data-throw-if-not-resolved="False" />
  - description: <xref uid="DataLakeRequestConditions" data-throw-if-not-resolved="false">requestConditions</xref>
    name: requestConditions
    type: <xref href="com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions" data-throw-if-not-resolved="False" />
  - description: An optional timeout value beyond which a <xref uid="RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    name: timeout
    type: <xref href="java.time.Duration?alt=java.time.Duration&text=Duration" data-throw-if-not-resolved="False" />
  - description: Additional context that is passed through the Http pipeline during the service call.
    name: context
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
  syntax: public Response<PathInfo> flushWithResponse(long position, boolean retainUncommittedData, boolean close, PathHttpHeaders httpHeaders, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  returns:
    description: A response containing the information of the created resource.
    type: <xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.file.datalake.models.PathInfo?alt=com.azure.storage.file.datalake.models.PathInfo&text=PathInfo" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.storage.file.datalake
artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
