### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.filter*
fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<T>filter
name: <T>filter
nameWithType: FluentIterable<E>.<T>filter
members:
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>filter(java.lang.Class<T>)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.<T>filter(Class<T> type)
  name: <T>filter(Class<T> type)
  nameWithType: FluentIterable<E>.<T>filter(Class<T> type)
  summary: |-
    Returns the elements from this fluent iterable that are instances of class <code>type</code>.

     <p><b><code>Stream</code> equivalent:</b> <code>stream.filter(type::isInstance).map(type::cast)</code>.
     This does perform a little more work than necessary, so another option is to insert an
     unchecked cast at some later point:

     <pre>
     <code>@SuppressWarnings({"unchecked", "rawtypes"}) // safe because of ::isInstance check
     ImmutableList<NewType> result =
         (ImmutableList) stream.filter(NewType.class::isInstance).collect(toImmutableList());</code>
     </pre>
  parameters:
  - name: type
    type: <xref href="java.lang.Class?alt=java.lang.Class&text=Class" data-throw-if-not-resolved="False" />&lt;<xref href="T?alt=T&text=T" data-throw-if-not-resolved="False" />&gt;
  syntax: public final FluentIterable<T> <T>filter(Class<T> type)
  returns:
    type: <xref href="com.azure.cosmos.implementation.guava25.collect.FluentIterable?alt=com.azure.cosmos.implementation.guava25.collect.FluentIterable&text=FluentIterable" data-throw-if-not-resolved="False" />&lt;<xref href="T?alt=T&text=T" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable.filter(com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>.filter(Predicate<? super E> predicate)
  name: filter(Predicate<? super E> predicate)
  nameWithType: FluentIterable<E>.filter(Predicate<? super E> predicate)
  summary: |-
    Returns the elements from this fluent iterable that satisfy a predicate. The resulting fluent
     iterable's iterator does not support <code>remove()</code>.

     <p><b><code>Stream</code> equivalent:</b> <xref uid="Stream#filter" data-throw-if-not-resolved="false">Stream#filter</xref> (same).
  parameters:
  - name: predicate
    type: <xref href="com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate" data-throw-if-not-resolved="False" />&lt;<xref href="? super E?alt=? super E&text=? super E" data-throw-if-not-resolved="False" />&gt;
  syntax: public final FluentIterable<E> filter(Predicate<? super E> predicate)
  returns:
    type: <xref href="com.azure.cosmos.implementation.guava25.collect.FluentIterable?alt=com.azure.cosmos.implementation.guava25.collect.FluentIterable&text=FluentIterable" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.collect
artifact: com.azure:azure-cosmos:4.3.2-beta.2
