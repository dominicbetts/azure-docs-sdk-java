### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.collect.Multisets.filter*
fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>filter
name: <E>filter
nameWithType: Multisets.<E>filter
members:
- uid: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>filter(com.azure.cosmos.implementation.guava25.collect.Multiset<E>,com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multisets.<E>filter(Multiset<E> unfiltered, Predicate<? super E> predicate)
  name: <E>filter(Multiset<E> unfiltered, Predicate<? super E> predicate)
  nameWithType: Multisets.<E>filter(Multiset<E> unfiltered, Predicate<? super E> predicate)
  summary: |-
    Returns a view of the elements of <code>unfiltered</code> that satisfy a predicate. The returned
     multiset is a live view of <code>unfiltered</code>; changes to one affect the other.

     <p>The resulting multiset's iterators, and those of its <code>entrySet()</code> and <code>
     elementSet()</code>, do not support <code>remove()</code>. However, all other multiset methods supported
     by <code>unfiltered</code> are supported by the returned multiset. When given an element that
     doesn't satisfy the predicate, the multiset's <code>add()</code> and <code>addAll()</code> methods throw
     an <xref uid="IllegalArgumentException" data-throw-if-not-resolved="false">IllegalArgumentException</xref>. When methods such as <code>removeAll()</code> and <code>
     clear()</code> are called on the filtered multiset, only elements that satisfy the filter will be
     removed from the underlying multiset.

     <p>The returned multiset isn't threadsafe or serializable, even if <code>unfiltered</code> is.

     <p>Many of the filtered multiset's methods, such as <code>size()</code>, iterate across every
     element in the underlying multiset and determine which elements satisfy the filter. When a live
     view is <i>not</i> needed, it may be faster to copy the returned multiset and use the copy.

     <p><b>Warning:</b> <code>predicate</code> must be <i>consistent with equals</i>, as documented at
     <xref uid="Predicate#apply" data-throw-if-not-resolved="false">Predicate#apply</xref>. Do not provide a predicate such as <code>
     Predicates.instanceOf(ArrayList.class)</code>, which is inconsistent with equals. (See <xref uid="Iterables#filter(Iterable, Class)" data-throw-if-not-resolved="false">Iterables#filter(Iterable, Class)</xref> for related functionality.)
  parameters:
  - name: unfiltered
    type: <xref href="com.azure.cosmos.implementation.guava25.collect.Multiset?alt=com.azure.cosmos.implementation.guava25.collect.Multiset&text=Multiset" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
  - name: predicate
    type: <xref href="com.azure.cosmos.implementation.guava25.base.Predicate?alt=com.azure.cosmos.implementation.guava25.base.Predicate&text=Predicate" data-throw-if-not-resolved="False" />&lt;<xref href="? super E?alt=? super E&text=? super E" data-throw-if-not-resolved="False" />&gt;
  syntax: public static Multiset<E> <E>filter(Multiset<E> unfiltered, Predicate<? super E> predicate)
  returns:
    type: <xref href="com.azure.cosmos.implementation.guava25.collect.Multiset?alt=com.azure.cosmos.implementation.guava25.collect.Multiset&text=Multiset" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.collect
artifact: com.azure:azure-cosmos:4.3.2-beta.2
