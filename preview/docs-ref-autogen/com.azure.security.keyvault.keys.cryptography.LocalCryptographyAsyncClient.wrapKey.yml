### YamlMime:JavaMember
uid: com.azure.security.keyvault.keys.cryptography.LocalCryptographyAsyncClient.wrapKey*
fullName: com.azure.security.keyvault.keys.cryptography.LocalCryptographyAsyncClient.wrapKey
name: wrapKey
nameWithType: LocalCryptographyAsyncClient.wrapKey
members:
- uid: com.azure.security.keyvault.keys.cryptography.LocalCryptographyAsyncClient.wrapKey(com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm,byte[])
  fullName: com.azure.security.keyvault.keys.cryptography.LocalCryptographyAsyncClient.wrapKey(KeyWrapAlgorithm algorithm, byte[] key)
  name: wrapKey(KeyWrapAlgorithm algorithm, byte[] key)
  nameWithType: LocalCryptographyAsyncClient.wrapKey(KeyWrapAlgorithm algorithm, byte[] key)
  summary: |-
    Wraps a symmetric key using the configured key. The wrap operation supports wrapping a symmetric key with both
     symmetric and asymmetric keys. This operation requires the keys/wrapKey permission.

     <p>The <xref uid="KeyWrapAlgorithm" data-throw-if-not-resolved="false">wrap algorithm</xref> indicates the type of algorithm to use for wrapping the specified
     key content. Possible values include:
     <xref uid="KeyWrapAlgorithm#RSA1_5" data-throw-if-not-resolved="false">RSA1_5</xref> and <xref uid="KeyWrapAlgorithm#RSA_OAEP" data-throw-if-not-resolved="false">RSA_OAEP</xref>.
     Possible values for symmetric keys include: <xref uid="KeyWrapAlgorithm#A128KW" data-throw-if-not-resolved="false">A128KW</xref>, <xref uid="KeyWrapAlgorithm#A192KW" data-throw-if-not-resolved="false">A192KW</xref> and <xref uid="KeyWrapAlgorithm#A256KW" data-throw-if-not-resolved="false">A256KW</xref>. </p>

     <p><strong>Code Samples</strong></p>
     <p>Wraps the key content. Subscribes to the call asynchronously and prints out the wrapped key details when a
     response has been received.</p>
     <pre>
     byte[] key = new byte[100];
     new Random&#40;0x1234567L&#41;.nextBytes&#40;key&#41;;
     cryptographyAsyncClient.wrapKey&#40;KeyWrapAlgorithm.RSA_OAEP, key&#41;
         .subscriberContext&#40;reactor.util.context.Context.of&#40;key1, value1, key2, value2&#41;&#41;
         .subscribe&#40;keyWrapResult -&gt;
             System.out.printf&#40;&quot;Received encypted key of length %d with algorithm %s&quot;,
                 keyWrapResult.getEncryptedKey&#40;&#41;.length, keyWrapResult.getAlgorithm&#40;&#41;.toString&#40;&#41;&#41;&#41;;
     </pre>
  parameters:
  - description: The encryption algorithm to use for wrapping the key.
    name: algorithm
    type: <xref href="com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm?alt=com.azure.security.keyvault.keys.cryptography.models.KeyWrapAlgorithm&text=KeyWrapAlgorithm" data-throw-if-not-resolved="False" />
  - description: The key content to be wrapped
    name: key
    type: <xref href="byte?alt=byte&text=byte" data-throw-if-not-resolved="False" />[]
  syntax: public Mono<WrapResult> wrapKey(KeyWrapAlgorithm algorithm, byte[] key)
  returns:
    description: |-
      A <xref uid="Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="WrapResult" data-throw-if-not-resolved="false">WrapResult</xref> whose <xref uid="WrapResult#getEncryptedKey()" data-throw-if-not-resolved="false">encrypted
       key</xref> contains the wrapped key result.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.security.keyvault.keys.cryptography.models.WrapResult?alt=com.azure.security.keyvault.keys.cryptography.models.WrapResult&text=WrapResult" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.security.keyvault.keys.cryptography
artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
