### YamlMime:JavaMember
uid: com.azure.storage.file.datalake.DataLakeFileClient.queryWithResponse*
fullName: com.azure.storage.file.datalake.DataLakeFileClient.queryWithResponse
name: queryWithResponse
nameWithType: DataLakeFileClient.queryWithResponse
members:
- uid: com.azure.storage.file.datalake.DataLakeFileClient.queryWithResponse(com.azure.storage.file.datalake.options.FileQueryOptions,java.time.Duration,com.azure.core.util.Context)
  fullName: com.azure.storage.file.datalake.DataLakeFileClient.queryWithResponse(FileQueryOptions queryOptions, Duration timeout, Context context)
  name: queryWithResponse(FileQueryOptions queryOptions, Duration timeout, Context context)
  nameWithType: DataLakeFileClient.queryWithResponse(FileQueryOptions queryOptions, Duration timeout, Context context)
  summary: |-
    Queries an entire file into an output stream.

     <p>For more information, see the
     <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/query-blob-contents">Azure Docs</a></p>

     <p><strong>Code Samples</strong></p>

     <pre>
     ByteArrayOutputStream queryData = new ByteArrayOutputStream&#40;&#41;;
     String expression = &quot;SELECT * from BlobStorage&quot;;
     FileQueryJsonSerialization input = new FileQueryJsonSerialization&#40;&#41;
         .setRecordSeparator&#40;'&#92;n'&#41;;
     FileQueryDelimitedSerialization output = new FileQueryDelimitedSerialization&#40;&#41;
         .setEscapeChar&#40;'&#92;0'&#41;
         .setColumnSeparator&#40;','&#41;
         .setRecordSeparator&#40;'&#92;n'&#41;
         .setFieldQuote&#40;'&#92;''&#41;
         .setHeadersPresent&#40;true&#41;;
     DataLakeRequestConditions requestConditions = new DataLakeRequestConditions&#40;&#41;.setLeaseId&#40;leaseId&#41;;
     Consumer&lt;FileQueryError&gt; errorConsumer = System.out::println;
     Consumer&lt;FileQueryProgress&gt; progressConsumer = progress -&gt; System.out.println&#40;&quot;total file bytes read: &quot;
         + progress.getBytesScanned&#40;&#41;&#41;;
     FileQueryOptions queryOptions = new FileQueryOptions&#40;expression, queryData&#41;
         .setInputSerialization&#40;input&#41;
         .setOutputSerialization&#40;output&#41;
         .setRequestConditions&#40;requestConditions&#41;
         .setErrorConsumer&#40;errorConsumer&#41;
         .setProgressConsumer&#40;progressConsumer&#41;;
     System.out.printf&#40;&quot;Query completed with status %d%n&quot;,
         client.queryWithResponse&#40;queryOptions, timeout, new Context&#40;key1, value1&#41;&#41;
             .getStatusCode&#40;&#41;&#41;;
     </pre>
  parameters:
  - description: <xref uid="FileQueryOptions" data-throw-if-not-resolved="false">The query options</xref>.
    name: queryOptions
    type: <xref href="com.azure.storage.file.datalake.options.FileQueryOptions?alt=com.azure.storage.file.datalake.options.FileQueryOptions&text=FileQueryOptions" data-throw-if-not-resolved="False" />
  - description: An optional timeout value beyond which a <xref uid="RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    name: timeout
    type: <xref href="java.time.Duration?alt=java.time.Duration&text=Duration" data-throw-if-not-resolved="False" />
  - description: Additional context that is passed through the Http pipeline during the service call.
    name: context
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
  syntax: public FileQueryResponse queryWithResponse(FileQueryOptions queryOptions, Duration timeout, Context context)
  returns:
    description: A response containing status code and HTTP headers.
    type: <xref href="com.azure.storage.file.datalake.models.FileQueryResponse?alt=com.azure.storage.file.datalake.models.FileQueryResponse&text=FileQueryResponse" data-throw-if-not-resolved="False" />
type: method
metadata: {}
package: com.azure.storage.file.datalake
artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
