### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.http.BufferedHttpResponse.body*
fullName: com.azure.cosmos.implementation.http.BufferedHttpResponse.body
name: body
nameWithType: BufferedHttpResponse.body
members:
- uid: com.azure.cosmos.implementation.http.BufferedHttpResponse.body()
  fullName: com.azure.cosmos.implementation.http.BufferedHttpResponse.body()
  name: body()
  nameWithType: BufferedHttpResponse.body()
  summary: |-
    Get the publisher emitting response content chunks.

     <p>
     Returns a stream of the response's body content. Emissions may occur on the
     Netty EventLoop threads which are shared across channels and should not be
     blocked. Blocking should be avoided as much as possible/practical in reactive
     programming but if you do use methods like <code>blockingSubscribe</code> or <code>blockingGet</code>
     on the stream then be sure to use <code>subscribeOn</code> and <code>observeOn</code>
     before the blocking call. For example:

     <pre>
     <code>
       response.body()
         .map(bb -> bb.limit())
         .reduce((x,y) -> x + y)
         .subscribeOn(Schedulers.io())
         .observeOn(Schedulers.io())
         .blockingGet();
     </code>
     </pre>
     <p>
     The above code is a simplistic example and would probably run fine without
     the `subscribeOn` and `observeOn` but should be considered a template for
     more complex situations.
  overridden: com.azure.cosmos.implementation.http.HttpResponse.body()
  syntax: public Flux<ByteBuf> body()
  returns:
    type: <xref href="reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux" data-throw-if-not-resolved="False" />&lt;<xref href="io.netty.buffer.ByteBuf?alt=io.netty.buffer.ByteBuf&text=ByteBuf" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.cosmos.implementation.http
artifact: com.azure:azure-cosmos:4.3.2-beta.2
