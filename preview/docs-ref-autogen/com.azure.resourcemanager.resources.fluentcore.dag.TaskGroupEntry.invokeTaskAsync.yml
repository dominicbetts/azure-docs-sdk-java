### YamlMime:JavaMember
uid: com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry.invokeTaskAsync*
fullName: com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry<TaskT>.invokeTaskAsync
name: invokeTaskAsync
nameWithType: TaskGroupEntry<TaskT>.invokeTaskAsync
members:
- uid: com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry.invokeTaskAsync(boolean,com.azure.resourcemanager.resources.fluentcore.dag.TaskGroup.InvocationContext)
  fullName: com.azure.resourcemanager.resources.fluentcore.dag.TaskGroupEntry<TaskT>.invokeTaskAsync(boolean ignoreCachedResult, TaskGroup.InvocationContext context)
  name: invokeTaskAsync(boolean ignoreCachedResult, TaskGroup.InvocationContext context)
  nameWithType: TaskGroupEntry<TaskT>.invokeTaskAsync(boolean ignoreCachedResult, TaskGroup.InvocationContext context)
  summary: |-
    Invokes the task this entry holds.
     if the task cannot be invoked due to faulted dependencies then an observable that emit
     <xref uid="ErroredDependencyTaskException" data-throw-if-not-resolved="false">ErroredDependencyTaskException</xref> will be returned.
  parameters:
  - description: |-
      if the task is already invoked and has result cached then a value false for this
                                 parameter indicates the cached result can be returned without invoking task again,
                                 if true then cached result will be ignored and task will be invoked
    name: ignoreCachedResult
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False" />
  - description: |-
      the context object shared across all the entries in the group that this entry belongs to,
                                 this will be passed to <xref uid="TaskItem#invokeAsync(TaskGroup.InvocationContext)" data-throw-if-not-resolved="false">TaskItem#invokeAsync(TaskGroup.InvocationContext)</xref>
                                 method of the task item
    name: context
    type: <xref href="com.azure.resourcemanager.resources.fluentcore.dag.TaskGroup.InvocationContext?alt=com.azure.resourcemanager.resources.fluentcore.dag.TaskGroup.InvocationContext&text=InvocationContext" data-throw-if-not-resolved="False" />
  syntax: public Mono<Indexable> invokeTaskAsync(boolean ignoreCachedResult, TaskGroup.InvocationContext context)
  returns:
    description: |-
      a cold Observable upon subscription invokes the task this entry hold, which produces a result of
       type <xref uid="Indexable" data-throw-if-not-resolved="false">Indexable</xref>.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.resourcemanager.resources.fluentcore.model.Indexable?alt=com.azure.resourcemanager.resources.fluentcore.model.Indexable&text=Indexable" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.resourcemanager.resources.fluentcore.dag
artifact: com.azure.resourcemanager:azure-resourcemanager-resources:2.0.0-beta.2
