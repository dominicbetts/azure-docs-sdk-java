### YamlMime:JavaType
uid: com.azure.cosmos.implementation.guava25.collect.FluentIterable
fullName: com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>
name: FluentIterable<E>
nameWithType: FluentIterable<E>
summary: |-
  A discouraged (but not deprecated) precursor to Java's superior <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">Stream</xref> library.

  The following types of methods are provided:

   *  chaining methods which return a new `FluentIterable` based in some way on the contents of the current one (for example <xref uid="com.azure.cosmos.implementation.guava25.collect.FluentIterable.transform" data-throw-if-not-resolved="false">#transform</xref>)
   *  element extraction methods which facilitate the retrieval of certain elements (for example <xref uid="com.azure.cosmos.implementation.guava25.collect.FluentIterable.last" data-throw-if-not-resolved="false">#last</xref>)
   *  query methods which answer questions about the `FluentIterable`'s contents (for example <xref uid="com.azure.cosmos.implementation.guava25.collect.FluentIterable.anyMatch" data-throw-if-not-resolved="false">#anyMatch</xref>)
   *  conversion methods which copy the `FluentIterable`'s contents into a new collection or array (for example <xref uid="com.azure.cosmos.implementation.guava25.collect.FluentIterable.toList" data-throw-if-not-resolved="false">#toList</xref>)

  Several lesser-used features are currently available only as static methods on the <xref uid="com.azure.cosmos.implementation.guava25.collect.Iterables" data-throw-if-not-resolved="false">Iterables</xref> class.

  ### Comparison to streams ###

  <xref uid="java.util.stream.Stream" data-throw-if-not-resolved="false">Stream</xref> is similar to this class, but generally more powerful, and certainly more standard. Key differences include:

   *  A stream is *single-use*; it becomes invalid as soon as any "terminal operation" such as `findFirst()` or `iterator()` is invoked. (Even though `Stream` contains all the right method *signatures* to implement <xref uid="? extends java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref>, it does not actually do so, to avoid implying repeat-iterability.) `FluentIterable`, on the other hand, is multiple-use, and does implement <xref uid="? extends java.lang.Iterable" data-throw-if-not-resolved="false">Iterable</xref>.
   *  Streams offer many features not found here, including `min/max`, `distinct`, `reduce`, `sorted`, the very powerful `collect`, and built-in support for parallelizing stream operations.
   *  `FluentIterable` contains several features not available on `Stream`, which are noted in the method descriptions below.
   *  Streams include primitive-specialized variants such as `IntStream`, the use of which is strongly recommended.
   *  Streams are standard Java, not requiring a third-party dependency.

  ### Example ###

  Here is an example that accepts a list from a database call, filters it based on a predicate, transforms it by invoking `toString()` on each element, and returns the first 10 elements as a `List`:

  ```java
  ImmutableList results =
       FluentIterable.from(database.getClientList())
           .filter(Client::isActiveInLastMonth)
           .transform(Object::toString)
           .limit(10)
           .toList();
  ```

  The approximate stream equivalent is:

  ```java
  List results =
       database.getClientList()
           .stream()
           .filter(Client::isActiveInLastMonth)
           .map(Object::toString)
           .limit(10)
           .collect(Collectors.toList());
  ```
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False" />
inheritedMembers:
- java.lang.Object.clone()
- java.lang.Object.equals(java.lang.Object)
- java.lang.Object.finalize()
- java.lang.Object.getClass()
- java.lang.Object.hashCode()
- java.lang.Object.notify()
- java.lang.Object.notifyAll()
- java.lang.Object.toString()
- java.lang.Object.wait()
- java.lang.Object.wait(long)
- java.lang.Object.wait(long,int)
syntax: public abstract class FluentIterable<E> implements Iterable<E>
constructors:
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.FluentIterable()
methods:
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.<C>copyInto(C)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.<E>from(E[])
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.<E>from(com.azure.cosmos.implementation.guava25.collect.FluentIterable<E>)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.<E>from(java.lang.Iterable<E>)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.<E>of()
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.<E>of(E,E...)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.<K>index(com.azure.cosmos.implementation.guava25.base.Function<? super E,K>)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.<K>uniqueIndex(com.azure.cosmos.implementation.guava25.base.Function<? super E,K>)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>concat(java.lang.Iterable<? extends T>...)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>filter(java.lang.Class<T>)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>transform(com.azure.cosmos.implementation.guava25.base.Function<? super E,T>)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.<T>transformAndConcat(com.azure.cosmos.implementation.guava25.base.Function<? super E,? extends java.lang.Iterable<? extends T>>)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.<V>toMap(com.azure.cosmos.implementation.guava25.base.Function<? super E,V>)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.allMatch(com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.anyMatch(com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.append(E...)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.append(java.lang.Iterable<? extends E>)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.contains(java.lang.Object)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.cycle()
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.filter(com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.first()
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.firstMatch(com.azure.cosmos.implementation.guava25.base.Predicate<? super E>)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.get(int)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.isEmpty()
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.join(com.azure.cosmos.implementation.guava25.base.Joiner)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.last()
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.limit(int)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.size()
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.skip(int)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.stream()
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.toArray(java.lang.Class<E>)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.toList()
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.toMultiset()
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.toSet()
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.toSortedList(java.util.Comparator<? super E>)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.toSortedSet(java.util.Comparator<? super E>)
- com.azure.cosmos.implementation.guava25.collect.FluentIterable.toString()
type: class
typeParameters:
- name: E
implements:
- <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
metadata: {}
package: com.azure.cosmos.implementation.guava25.collect
artifact: com.azure:azure-cosmos:4.3.2-beta.2
