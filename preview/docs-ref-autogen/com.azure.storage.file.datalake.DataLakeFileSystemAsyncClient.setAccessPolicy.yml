### YamlMime:JavaMember
uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicy*
fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicy
name: setAccessPolicy
nameWithType: DataLakeFileSystemAsyncClient.setAccessPolicy
members:
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicy(com.azure.storage.file.datalake.models.PublicAccessType,java.util.List<com.azure.storage.file.datalake.models.DataLakeSignedIdentifier>)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.setAccessPolicy(PublicAccessType accessType, List<DataLakeSignedIdentifier> identifiers)
  name: setAccessPolicy(PublicAccessType accessType, List<DataLakeSignedIdentifier> identifiers)
  nameWithType: DataLakeFileSystemAsyncClient.setAccessPolicy(PublicAccessType accessType, List<DataLakeSignedIdentifier> identifiers)
  summary: "Sets the file system's permissions. The permissions indicate whether paths in a file system may be accessed\n publicly. Note that, for each signed identifier, we will truncate the start and expiry times to the nearest\n second to ensure the time formatting is compatible with the service. For more information, see the\n <a href=\"https://docs.microsoft.com/rest/api/storageservices/set-container-acl\">Azure Docs</a>.\n\n <p><strong>Code Samples</strong></p>\n\n <pre>\n DataLakeSignedIdentifier identifier = new DataLakeSignedIdentifier&#40;&#41;\n     .setId&#40;&quot;name&quot;&#41;\n     .setAccessPolicy&#40;new DataLakeAccessPolicy&#40;&#41;\n         .setStartsOn&#40;OffsetDateTime.now&#40;&#41;&#41;\n         .setExpiresOn&#40;OffsetDateTime.now&#40;&#41;.plusDays&#40;7&#41;&#41;\n         .setPermissions&#40;&quot;permissionString&quot;&#41;&#41;;\n \n client.setAccessPolicy&#40;PublicAccessType.CONTAINER, Collections.singletonList&#40;identifier&#41;&#41;.subscribe&#40;\n     response -&gt; System.out.printf&#40;&quot;Set access policy completed%n&quot;&#41;,\n     error -&gt; System.out.printf&#40;&quot;Set access policy failed: %s%n&quot;, error&#41;&#41;;\n </pre>"
  parameters:
  - description: |-
      Specifies how the data in this file system is available to the public. See the
       x-ms-blob-public-access header in the Azure Docs for more information. Pass null for no public access.
    name: accessType
    type: <xref href="com.azure.storage.file.datalake.models.PublicAccessType?alt=com.azure.storage.file.datalake.models.PublicAccessType&text=PublicAccessType" data-throw-if-not-resolved="False" />
  - description: |-
      A list of <xref uid="DataLakeSignedIdentifier" data-throw-if-not-resolved="false">DataLakeSignedIdentifier</xref> objects that specify the permissions for the file
       system.
       Please see
       <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/establishing-a-stored-access-policy">here</a>
       for more information. Passing null will clear all access policies.
    name: identifiers
    type: <xref href="java.util.List?alt=java.util.List&text=List" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.file.datalake.models.DataLakeSignedIdentifier?alt=com.azure.storage.file.datalake.models.DataLakeSignedIdentifier&text=DataLakeSignedIdentifier" data-throw-if-not-resolved="False" />&gt;
  syntax: public Mono<Void> setAccessPolicy(PublicAccessType accessType, List<DataLakeSignedIdentifier> identifiers)
  returns:
    description: A reactive response signalling completion.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="java.lang.Void?alt=java.lang.Void&text=Void" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.storage.file.datalake
artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
