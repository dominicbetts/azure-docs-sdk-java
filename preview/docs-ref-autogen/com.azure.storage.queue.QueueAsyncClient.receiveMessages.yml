### YamlMime:JavaMember
uid: com.azure.storage.queue.QueueAsyncClient.receiveMessages*
fullName: com.azure.storage.queue.QueueAsyncClient.receiveMessages
name: receiveMessages
nameWithType: QueueAsyncClient.receiveMessages
members:
- uid: com.azure.storage.queue.QueueAsyncClient.receiveMessages(java.lang.Integer)
  fullName: com.azure.storage.queue.QueueAsyncClient.receiveMessages(Integer maxMessages)
  name: receiveMessages(Integer maxMessages)
  nameWithType: QueueAsyncClient.receiveMessages(Integer maxMessages)
  summary: |-
    Retrieves up to the maximum number of messages from the queue and hides them from other operations for 30
     seconds.

     <p><strong>Code Samples</strong></p>

     <p>Dequeue up to 5 messages</p>

     <pre>
     client.receiveMessages&#40;5&#41;.subscribe&#40;
         message -&gt; System.out.println&#40;&quot;The message got from getMessages operation: &quot;
             + message.getMessageText&#40;&#41;&#41;,
         error -&gt; System.err.print&#40;error.toString&#40;&#41;&#41;,
         &#40;&#41; -&gt; System.out.println&#40;&quot;Complete receiving the message!&quot;&#41;
     &#41;;
     </pre>

     <p>For more information, see the
     <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-messages">Azure Docs</a>.</p>
  parameters:
  - description: |-
      Optional. Maximum number of messages to get, if there are less messages exist in the queue
       than requested all the messages will be returned. If left empty only 1 message will be retrieved, the allowed
       range is 1 to 32 messages.
    name: maxMessages
    type: <xref href="java.lang.Integer?alt=java.lang.Integer&text=Integer" data-throw-if-not-resolved="False" />
  syntax: public PagedFlux<QueueMessageItem> receiveMessages(Integer maxMessages)
  returns:
    description: |-
      Up to <code>maxMessages</code> <xref uid="QueueMessageItem" data-throw-if-not-resolved="false">ReceiveMessageItem</xref> from the queue.
       Each DequeuedMessage contains <xref uid="QueueMessageItem#getMessageId()" data-throw-if-not-resolved="false">messageId</xref> and
       <xref uid="QueueMessageItem#getPopReceipt()" data-throw-if-not-resolved="false">popReceipt</xref> used to interact with the message and
       other metadata about the message.
    type: <xref href="com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.queue.models.QueueMessageItem?alt=com.azure.storage.queue.models.QueueMessageItem&text=QueueMessageItem" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.storage.queue.QueueAsyncClient.receiveMessages(java.lang.Integer,java.time.Duration)
  fullName: com.azure.storage.queue.QueueAsyncClient.receiveMessages(Integer maxMessages, Duration visibilityTimeout)
  name: receiveMessages(Integer maxMessages, Duration visibilityTimeout)
  nameWithType: QueueAsyncClient.receiveMessages(Integer maxMessages, Duration visibilityTimeout)
  summary: |-
    Retrieves up to the maximum number of messages from the queue and hides them from other operations for the
     timeout period.

     <p><strong>Code Samples</strong></p>

     <p>Dequeue up to 5 messages and give them a 60 second timeout period</p>

     <pre>
     client.receiveMessages&#40;5, Duration.ofSeconds&#40;60&#41;&#41;
         .subscribe&#40;
             message -&gt; System.out.println&#40;&quot;The message got from getMessages operation: &quot;
                 + message.getMessageText&#40;&#41;&#41;,
             error -&gt; System.err.print&#40;error.toString&#40;&#41;&#41;,
             &#40;&#41; -&gt; System.out.println&#40;&quot;Complete receiving the message!&quot;&#41;
         &#41;;
     </pre>

     <p>For more information, see the
     <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-messages">Azure Docs</a>.</p>
  parameters:
  - description: |-
      Optional. Maximum number of messages to get, if there are less messages exist in the queue
       than requested all the messages will be returned. If left empty only 1 message will be retrieved, the allowed
       range is 1 to 32 messages.
    name: maxMessages
    type: <xref href="java.lang.Integer?alt=java.lang.Integer&text=Integer" data-throw-if-not-resolved="False" />
  - description: |-
      Optional. The timeout period for how long the message is invisible in the queue. If left
       empty the dequeued messages will be invisible for 30 seconds. The timeout must be between 1 second and 7 days.
    name: visibilityTimeout
    type: <xref href="java.time.Duration?alt=java.time.Duration&text=Duration" data-throw-if-not-resolved="False" />
  syntax: public PagedFlux<QueueMessageItem> receiveMessages(Integer maxMessages, Duration visibilityTimeout)
  returns:
    description: |-
      Up to <code>maxMessages</code> <xref uid="QueueMessageItem" data-throw-if-not-resolved="false">DequeuedMessages</xref> from the queue. Each DeqeuedMessage
       contains <xref uid="QueueMessageItem#getMessageId()" data-throw-if-not-resolved="false">messageId</xref> and
       <xref uid="QueueMessageItem#getPopReceipt()" data-throw-if-not-resolved="false">popReceipt</xref>
       used to interact with the message and other metadata about the message.
    type: <xref href="com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.queue.models.QueueMessageItem?alt=com.azure.storage.queue.models.QueueMessageItem&text=QueueMessageItem" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.storage.queue
artifact: com.azure:azure-storage-queue:12.6.0-beta.1
