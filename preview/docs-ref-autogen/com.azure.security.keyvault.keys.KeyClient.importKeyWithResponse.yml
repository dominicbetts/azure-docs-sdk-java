### YamlMime:JavaMember
uid: com.azure.security.keyvault.keys.KeyClient.importKeyWithResponse*
fullName: com.azure.security.keyvault.keys.KeyClient.importKeyWithResponse
name: importKeyWithResponse
nameWithType: KeyClient.importKeyWithResponse
members:
- uid: com.azure.security.keyvault.keys.KeyClient.importKeyWithResponse(com.azure.security.keyvault.keys.models.ImportKeyOptions,com.azure.core.util.Context)
  fullName: com.azure.security.keyvault.keys.KeyClient.importKeyWithResponse(ImportKeyOptions importKeyOptions, Context context)
  name: importKeyWithResponse(ImportKeyOptions importKeyOptions, Context context)
  nameWithType: KeyClient.importKeyWithResponse(ImportKeyOptions importKeyOptions, Context context)
  summary: "Imports an externally created key and stores it in key vault. The import key operation may be used to import any\n key type into the Azure Key Vault. If the named key already exists, Azure Key Vault creates a new version of the\n key. This operation requires the <code>keys/import</code> permission.\n\n <p>The <code>keyImportOptions</code> is required and its fields <xref uid=\"ImportKeyOptions#getName()\" data-throw-if-not-resolved=\"false\">name</xref> and <xref uid=\"ImportKeyOptions#getKey()\" data-throw-if-not-resolved=\"false\">key material</xref> cannot be null. The <xref uid=\"ImportKeyOptions#getExpiresOn()\" data-throw-if-not-resolved=\"false\">expires</xref> and\n <xref uid=\"ImportKeyOptions#getNotBefore()\" data-throw-if-not-resolved=\"false\">notBefore</xref> values in <code>keyImportOptions</code> are optional. If not specified,\n no values are set for the fields. The <xref uid=\"ImportKeyOptions#isEnabled()\" data-throw-if-not-resolved=\"false\">enabled</xref> field is set to true and the\n <xref uid=\"ImportKeyOptions#isHardwareProtected()\" data-throw-if-not-resolved=\"false\">hsm</xref> field is set to false by Azure Key Vault, if they are not specified.</p>\n\n <p><strong>Code Samples</strong></p>\n <p>Imports a new key into key vault. Prints out the details of the imported key.</p>\n\n <pre>\n ImportKeyOptions importKeyOptions = new ImportKeyOptions&#40;&quot;keyName&quot;, jsonWebKeyToImport&#41;\n     .setHardwareProtected&#40;false&#41;;\n \n KeyVaultKey importedKeyResp = keyClient.importKeyWithResponse&#40;importKeyOptions, new Context&#40;key1, value1&#41;&#41;\n     .getValue&#40;&#41;;\n System.out.printf&#40;&quot;Key is imported with name %s and id %s &#92;n&quot;, importedKeyResp.getName&#40;&#41;,\n     importedKeyResp.getId&#40;&#41;&#41;;\n </pre>"
  parameters:
  - description: |-
      The key import configuration object containing information about the json web key
           being imported.
    name: importKeyOptions
    type: <xref href="com.azure.security.keyvault.keys.models.ImportKeyOptions?alt=com.azure.security.keyvault.keys.models.ImportKeyOptions&text=ImportKeyOptions" data-throw-if-not-resolved="False" />
  - description: Additional context that is passed through the Http pipeline during the service call.
    name: context
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
  syntax: public Response<KeyVaultKey> importKeyWithResponse(ImportKeyOptions importKeyOptions, Context context)
  returns:
    description: A <xref uid="Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="Response#getValue()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="KeyVaultKey" data-throw-if-not-resolved="false">imported key</xref>.
    type: <xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.security.keyvault.keys.models.KeyVaultKey?alt=com.azure.security.keyvault.keys.models.KeyVaultKey&text=KeyVaultKey" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.security.keyvault.keys
artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
