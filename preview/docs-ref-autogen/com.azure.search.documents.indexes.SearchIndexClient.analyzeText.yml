### YamlMime:JavaMember
uid: com.azure.search.documents.indexes.SearchIndexClient.analyzeText*
fullName: com.azure.search.documents.indexes.SearchIndexClient.analyzeText
name: analyzeText
nameWithType: SearchIndexClient.analyzeText
members:
- uid: com.azure.search.documents.indexes.SearchIndexClient.analyzeText(java.lang.String,com.azure.search.documents.indexes.models.AnalyzeTextOptions)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions)
  name: analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions)
  nameWithType: SearchIndexClient.analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions)
  summary: |-
    Shows how an analyzer breaks text into tokens.

     <p><strong>Code Sample</strong></p>

     <p> Analyzer text with LexicalTokenizerName "Classic" in search index "searchIndex". </p>

     <pre>
     PagedIterable&lt;AnalyzedTokenInfo&gt; tokenInfos = searchIndexClient.analyzeText&#40;&quot;searchIndex&quot;,
         new AnalyzeTextOptions&#40;&quot;The quick brown fox&quot;, LexicalTokenizerName.CLASSIC&#41;&#41;;
     for &#40;AnalyzedTokenInfo tokenInfo : tokenInfos&#41; &#123;
         System.out.printf&#40;&quot;The token emitted by the analyzer is %s.%n&quot;, tokenInfo.getToken&#40;&#41;&#41;;
     &#125;
     </pre>
  parameters:
  - description: the name of the index for which to test an analyzer
    name: indexName
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: the text and analyzer or analysis components to test. Requires to provide either <xref uid="LexicalTokenizerName" data-throw-if-not-resolved="false">LexicalTokenizerName</xref> or <xref uid="LexicalAnalyzerName" data-throw-if-not-resolved="false">LexicalAnalyzerName</xref>.
    name: analyzeTextOptions
    type: <xref href="com.azure.search.documents.indexes.models.AnalyzeTextOptions?alt=com.azure.search.documents.indexes.models.AnalyzeTextOptions&text=AnalyzeTextOptions" data-throw-if-not-resolved="False" />
  syntax: public PagedIterable<AnalyzedTokenInfo> analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions)
  returns:
    description: analyze result.
    type: <xref href="com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.search.documents.indexes.models.AnalyzedTokenInfo?alt=com.azure.search.documents.indexes.models.AnalyzedTokenInfo&text=AnalyzedTokenInfo" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.search.documents.indexes.SearchIndexClient.analyzeText(java.lang.String,com.azure.search.documents.indexes.models.AnalyzeTextOptions,com.azure.core.util.Context)
  fullName: com.azure.search.documents.indexes.SearchIndexClient.analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions, Context context)
  name: analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions, Context context)
  nameWithType: SearchIndexClient.analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions, Context context)
  summary: |-
    Shows how an analyzer breaks text into tokens.

     <p><strong>Code Sample</strong></p>

     <p> Analyzer text response with LexicalTokenizerName "Classic" in search index "searchIndex". </p>

     <pre>
     PagedIterable&lt;AnalyzedTokenInfo&gt; tokenInfos = searchIndexClient.analyzeText&#40;&quot;searchIndex&quot;,
         new AnalyzeTextOptions&#40;&quot;The quick brown fox&quot;, LexicalTokenizerName.CLASSIC&#41;, new Context&#40;key1, value1&#41;&#41;;
     System.out.println&#40;&quot;The status code of the response is &quot;
         + tokenInfos.iterableByPage&#40;&#41;.iterator&#40;&#41;.next&#40;&#41;.getStatusCode&#40;&#41;&#41;;
     for &#40;AnalyzedTokenInfo tokenInfo : tokenInfos&#41; &#123;
         System.out.printf&#40;&quot;The token emitted by the analyzer is %s.%n&quot;, tokenInfo.getToken&#40;&#41;&#41;;
     &#125;
     </pre>
  parameters:
  - description: the name of the index for which to test an analyzer
    name: indexName
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: the text and analyzer or analysis components to test. Requires to provide either <xref uid="LexicalTokenizerName" data-throw-if-not-resolved="false">LexicalTokenizerName</xref> or <xref uid="LexicalAnalyzerName" data-throw-if-not-resolved="false">LexicalAnalyzerName</xref>.
    name: analyzeTextOptions
    type: <xref href="com.azure.search.documents.indexes.models.AnalyzeTextOptions?alt=com.azure.search.documents.indexes.models.AnalyzeTextOptions&text=AnalyzeTextOptions" data-throw-if-not-resolved="False" />
  - description: additional context that is passed through the HTTP pipeline during the service call
    name: context
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
  syntax: public PagedIterable<AnalyzedTokenInfo> analyzeText(String indexName, AnalyzeTextOptions analyzeTextOptions, Context context)
  returns:
    description: analyze result.
    type: <xref href="com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.search.documents.indexes.models.AnalyzedTokenInfo?alt=com.azure.search.documents.indexes.models.AnalyzedTokenInfo&text=AnalyzedTokenInfo" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.search.documents.indexes
artifact: com.azure:azure-search-documents:11.1.0-beta.1
