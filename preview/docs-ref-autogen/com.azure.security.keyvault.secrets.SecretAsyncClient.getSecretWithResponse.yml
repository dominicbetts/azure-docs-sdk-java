### YamlMime:JavaMember
uid: com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse*
fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse
name: getSecretWithResponse
nameWithType: SecretAsyncClient.getSecretWithResponse
members:
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse(java.lang.String,java.lang.String)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.getSecretWithResponse(String name, String version)
  name: getSecretWithResponse(String name, String version)
  nameWithType: SecretAsyncClient.getSecretWithResponse(String name, String version)
  summary: |-
    Gets the specified secret with specified version from the key vault. This operation requires the
     <code>secrets/get</code> permission.

     <p><strong>Code sample</strong></p>
     <p>Gets a specific version of the secret in the key vault. Subscribes to the call asynchronously and prints out
     the returned secret details when a response is received.</p>
     <pre>
     String secretVersion = &quot;6A385B124DEF4096AF1361A85B16C204&quot;;
     secretAsyncClient.getSecretWithResponse&#40;&quot;secretName&quot;, secretVersion&#41;
         &#47;&#47; Passing a Context is optional and useful if you want a set of data to flow through the request.
         &#47;&#47; Otherwise, the line below can be removed.
         .subscriberContext&#40;Context.of&#40;key1, value1, key2, value2&#41;&#41;
         .subscribe&#40;secretWithVersion -&gt;
             System.out.printf&#40;&quot;Secret is returned with name %s and value %s %n&quot;,
                 secretWithVersion.getValue&#40;&#41;.getName&#40;&#41;, secretWithVersion.getValue&#40;&#41;.getValue&#40;&#41;&#41;&#41;;
     </pre>
  parameters:
  - description: The name of the secret, cannot be null.
    name: name
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: |-
      The version of the secret to retrieve. If this is an empty string or null, this call is equivalent
           to calling <xref uid="#getSecret(String)" data-throw-if-not-resolved="false">#getSecret(String)</xref>, with the latest version being retrieved.
    name: version
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  syntax: public Mono<Response<KeyVaultSecret>> getSecretWithResponse(String name, String version)
  returns:
    description: |-
      A <xref uid="Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="Response#getValue()" data-throw-if-not-resolved="false">value</xref> contains the
           requested <xref uid="KeyVaultSecret" data-throw-if-not-resolved="false">secret</xref>.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.security.keyvault.secrets.models.KeyVaultSecret?alt=com.azure.security.keyvault.secrets.models.KeyVaultSecret&text=KeyVaultSecret" data-throw-if-not-resolved="False" />&gt;&gt;
type: method
metadata: {}
package: com.azure.security.keyvault.secrets
artifact: com.azure:azure-security-keyvault-secrets:4.2.0-beta.3
