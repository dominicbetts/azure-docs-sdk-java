### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.doReadObject*
fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.doReadObject
name: doReadObject
nameWithType: AbstractHashedMap<K,V>.doReadObject
members:
- uid: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap.doReadObject(java.io.ObjectInputStream)
  fullName: com.azure.cosmos.implementation.apachecommons.collections.map.AbstractHashedMap<K,V>.doReadObject(ObjectInputStream in)
  name: doReadObject(ObjectInputStream in)
  nameWithType: AbstractHashedMap<K,V>.doReadObject(ObjectInputStream in)
  summary: |-
    Reads the map data from the stream. This method must be overridden if a
     subclass must be setup before <code>put()</code> is used.
     <p>
     Serialization is not one of the JDK's nicest topics. Normal serialization will
     initialise the superclass before the subclass. Sometimes however, this isn't
     what you want, as in this case the <code>put()</code> method on read can be
     affected by subclass state.
     <p>
     The solution adopted here is to deserialize the state data of this class in
     this protected method. This method must be called by the
     <code>readObject()</code> of the first serializable subclass.
     <p>
     Subclasses may override if the subclass has a specific field that must be present
     before <code>put()</code> or <code>calculateThreshold()</code> will work correctly.
  parameters:
  - description: the input stream
    name: in
    type: <xref href="java.io.ObjectInputStream?alt=java.io.ObjectInputStream&text=ObjectInputStream" data-throw-if-not-resolved="False" />
  syntax: protected void doReadObject(ObjectInputStream in)
  exceptions:
  - description: if an error occurs while reading from the stream
    type: <xref href="java.io.IOException?alt=java.io.IOException&text=IOException" data-throw-if-not-resolved="False" />
  - description: if an error occurs while reading from the stream
    type: <xref href="java.lang.ClassNotFoundException?alt=java.lang.ClassNotFoundException&text=ClassNotFoundException" data-throw-if-not-resolved="False" />
type: method
metadata: {}
package: com.azure.cosmos.implementation.apachecommons.collections.map
artifact: com.azure:azure-cosmos:4.3.2-beta.2
