### YamlMime:JavaMember
uid: com.azure.storage.queue.QueueServiceAsyncClient.listQueues*
fullName: com.azure.storage.queue.QueueServiceAsyncClient.listQueues
name: listQueues
nameWithType: QueueServiceAsyncClient.listQueues
members:
- uid: com.azure.storage.queue.QueueServiceAsyncClient.listQueues()
  fullName: com.azure.storage.queue.QueueServiceAsyncClient.listQueues()
  name: listQueues()
  nameWithType: QueueServiceAsyncClient.listQueues()
  summary: |-
    Lists all queues in the storage account without their metadata.

     <p><strong>Code Samples</strong></p>

     <p>List all queues in the account</p>

     <pre>
     client.listQueues&#40;&#41;.subscribe&#40;
         queueItem -&gt; System.out.printf&#40;&quot;Queue %s exists in the account&quot;, queueItem.getName&#40;&#41;&#41;,
         error -&gt; System.err.print&#40;error.toString&#40;&#41;&#41;,
         &#40;&#41; -&gt; System.out.println&#40;&quot;Complete listing the queues!&quot;&#41;
     &#41;;
     </pre>

     <p>For more information, see the
     <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/list-queues1">Azure Docs</a>.</p>
  syntax: public PagedFlux<QueueItem> listQueues()
  returns:
    description: <xref uid="QueueItem" data-throw-if-not-resolved="false">Queues</xref> in the storage account
    type: <xref href="com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.queue.models.QueueItem?alt=com.azure.storage.queue.models.QueueItem&text=QueueItem" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.storage.queue.QueueServiceAsyncClient.listQueues(com.azure.storage.queue.models.QueuesSegmentOptions)
  fullName: com.azure.storage.queue.QueueServiceAsyncClient.listQueues(QueuesSegmentOptions options)
  name: listQueues(QueuesSegmentOptions options)
  nameWithType: QueueServiceAsyncClient.listQueues(QueuesSegmentOptions options)
  summary: |-
    Lists the queues in the storage account that pass the filter.

     Pass true to <xref uid="QueuesSegmentOptions#setIncludeMetadata(boolean)" data-throw-if-not-resolved="false">includeMetadata</xref> to have metadata returned
     for the queues.

     <p><strong>Code Samples</strong></p>

     <p>List all queues that begin with "azure"</p>

     <pre>
     client.listQueues&#40;new QueuesSegmentOptions&#40;&#41;.setPrefix&#40;&quot;azure&quot;&#41;&#41;.subscribe&#40;
         queueItem -&gt; System.out.printf&#40;&quot;Queue %s exists in the account and has metadata %s&quot;,
             queueItem.getName&#40;&#41;, queueItem.getMetadata&#40;&#41;&#41;,
         error -&gt; System.err.print&#40;error.toString&#40;&#41;&#41;,
         &#40;&#41; -&gt; System.out.println&#40;&quot;Complete listing the queues!&quot;&#41;
     &#41;;
     </pre>

     <p>For more information, see the
     <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/list-queues1">Azure Docs</a>.</p>
  parameters:
  - description: Options for listing queues
    name: options
    type: <xref href="com.azure.storage.queue.models.QueuesSegmentOptions?alt=com.azure.storage.queue.models.QueuesSegmentOptions&text=QueuesSegmentOptions" data-throw-if-not-resolved="False" />
  syntax: public PagedFlux<QueueItem> listQueues(QueuesSegmentOptions options)
  returns:
    description: <xref uid="QueueItem" data-throw-if-not-resolved="false">Queues</xref> in the storage account that satisfy the filter requirements
    type: <xref href="com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.queue.models.QueueItem?alt=com.azure.storage.queue.models.QueueItem&text=QueueItem" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.storage.queue
artifact: com.azure:azure-storage-queue:12.6.0-beta.1
