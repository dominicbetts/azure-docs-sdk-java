### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.collect.Iterators.forArray*
fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>forArray
name: <T>forArray
nameWithType: Iterators.<T>forArray
members:
- uid: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>forArray(T...)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterators.<T>forArray(T[] array)
  name: <T>forArray(T[] array)
  nameWithType: Iterators.<T>forArray(T[] array)
  summary: |-
    Returns an iterator containing the elements of <code>array</code> in order. The returned iterator is
     a view of the array; subsequent changes to the array will be reflected in the iterator.

     <p><b>Note:</b> It is often preferable to represent your data using a collection type, for
     example using <xref uid="Arrays#asList(Object[])" data-throw-if-not-resolved="false">Arrays#asList(Object[])</xref>, making this method unnecessary.

     <p>The <code>Iterable</code> equivalent of this method is either <xref uid="Arrays#asList(Object[])" data-throw-if-not-resolved="false">Arrays#asList(Object[])</xref>,
     <xref uid="ImmutableList#copyOf(Object[])" data-throw-if-not-resolved="false">ImmutableList#copyOf(Object[])</xref>}, or <xref uid="ImmutableList#of" data-throw-if-not-resolved="false">ImmutableList#of</xref>.
  parameters:
  - name: array
    type: <xref href="T?alt=T&text=T" data-throw-if-not-resolved="False" />[]
  syntax: public static UnmodifiableIterator<T> <T>forArray(T[] array)
  returns:
    type: <xref href="com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator?alt=com.azure.cosmos.implementation.guava25.collect.UnmodifiableIterator&text=UnmodifiableIterator" data-throw-if-not-resolved="False" />&lt;<xref href="T?alt=T&text=T" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.collect
artifact: com.azure:azure-cosmos:4.3.2-beta.2
