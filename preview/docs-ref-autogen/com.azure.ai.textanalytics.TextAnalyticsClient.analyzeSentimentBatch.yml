### YamlMime:JavaMember
uid: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch*
fullName: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch
name: analyzeSentimentBatch
nameWithType: TextAnalyticsClient.analyzeSentimentBatch
members:
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(java.lang.Iterable<com.azure.ai.textanalytics.models.TextDocumentInput>,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions,com.azure.core.util.Context)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  name: analyzeSentimentBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  nameWithType: TextAnalyticsClient.analyzeSentimentBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label\n (Positive, Negative, and Neutral) for the document and each sentence within it.\n\n <p><strong>Code Sample</strong></p>\n <p>Analyze the sentiments with http response in a list of <xref uid=\"TextDocumentInput\" data-throw-if-not-resolved=\"false\">documents</xref> with request\n options.</p>\n <pre>\n List&lt;TextDocumentInput&gt; textDocumentInputs = Arrays.asList&#40;\n     new TextDocumentInput&#40;&quot;1&quot;, &quot;The hotel was dark and unclean. The restaurant had amazing gnocchi.&quot;, &quot;en&quot;&#41;,\n     new TextDocumentInput&#40;&quot;2&quot;, &quot;The restaurant had amazing gnocchi. The hotel was dark and unclean.&quot;, &quot;en&quot;&#41;\n &#41;;\n \n &#47;&#47; Analyzing batch sentiments\n textAnalyticsClient.analyzeSentimentBatch&#40;textDocumentInputs,\n         new TextAnalyticsRequestOptions&#40;&#41;.setIncludeStatistics&#40;true&#41;, Context.NONE&#41;.iterableByPage&#40;&#41;\n     .forEach&#40;response -&gt; &#123;\n         &#47;&#47; Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics&#40;&#41;;\n         System.out.printf&#40;&quot;A batch of documents statistics, transaction count: %s, valid document count: %s.%n&quot;,\n             batchStatistics.getTransactionCount&#40;&#41;, batchStatistics.getValidDocumentCount&#40;&#41;&#41;;\n \n         &#47;&#47; Analyzed sentiment for each of documents from a batch of documents\n         response.getElements&#40;&#41;.forEach&#40;analyzeSentimentResult -&gt; &#123;\n             System.out.printf&#40;&quot;Document ID: %s%n&quot;, analyzeSentimentResult.getId&#40;&#41;&#41;;\n             &#47;&#47; Valid document\n             DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment&#40;&#41;;\n             System.out.printf&#40;\n                 &quot;Recognized document sentiment: %s, positive score: %.2f, neutral score: %.2f, &quot;\n                     + &quot;negative score: %.2f.%n&quot;,\n                 documentSentiment.getSentiment&#40;&#41;,\n                 documentSentiment.getConfidenceScores&#40;&#41;.getPositive&#40;&#41;,\n                 documentSentiment.getConfidenceScores&#40;&#41;.getNeutral&#40;&#41;,\n                 documentSentiment.getConfidenceScores&#40;&#41;.getNegative&#40;&#41;&#41;;\n             documentSentiment.getSentences&#40;&#41;.forEach&#40;sentenceSentiment -&gt; &#123;\n                 System.out.printf&#40;\n                     &quot;Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f,&quot;\n                         + &quot; negative score: %.2f.%n&quot;,\n                     sentenceSentiment.getSentiment&#40;&#41;,\n                     sentenceSentiment.getConfidenceScores&#40;&#41;.getPositive&#40;&#41;,\n                     sentenceSentiment.getConfidenceScores&#40;&#41;.getNeutral&#40;&#41;,\n                     sentenceSentiment.getConfidenceScores&#40;&#41;.getNegative&#40;&#41;&#41;;\n             &#125;&#41;;\n         &#125;&#41;;\n     &#125;&#41;;\n </pre>"
  parameters:
  - description: |-
      A list of <xref uid="TextDocumentInput" data-throw-if-not-resolved="false">documents</xref> to be analyzed.
       For text length limits, maximum batch size, and supported text encoding, see
       <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    name: documents
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.ai.textanalytics.models.TextDocumentInput?alt=com.azure.ai.textanalytics.models.TextDocumentInput&text=TextDocumentInput" data-throw-if-not-resolved="False" />&gt;
  - description: |-
      The <xref uid="TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
       and show statistics.
    name: options
    type: <xref href="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions?alt=com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions&text=TextAnalyticsRequestOptions" data-throw-if-not-resolved="False" />
  - description: Additional context that is passed through the Http pipeline during the service call.
    name: context
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
  syntax: public TextAnalyticsPagedIterable<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<TextDocumentInput> documents, TextAnalyticsRequestOptions options, Context context)
  returns:
    description: |-
      A <xref uid="TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
       <xref uid="AnalyzeSentimentResult" data-throw-if-not-resolved="false">analyzed sentiment document result</xref>.
    type: <xref href="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable?alt=com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable&text=TextAnalyticsPagedIterable" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.ai.textanalytics.models.AnalyzeSentimentResult?alt=com.azure.ai.textanalytics.models.AnalyzeSentimentResult&text=AnalyzeSentimentResult" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(Iterable<String> documents)
  name: analyzeSentimentBatch(Iterable<String> documents)
  nameWithType: TextAnalyticsClient.analyzeSentimentBatch(Iterable<String> documents)
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label\n (Positive, Negative, and Neutral) for the document and each sentence within it.\n\n This method will use the default language that sets up in\n <xref uid=\"TextAnalyticsClientBuilder#defaultLanguage(String)\" data-throw-if-not-resolved=\"false\">TextAnalyticsClientBuilder#defaultLanguage(String)</xref>. If none is specified, service will use 'en' as\n the language.\n\n <p><strong>Code Sample</strong></p>\n <p>Analyze the sentiments in a list of documents.</p>\n <pre>\n final List&lt;String&gt; documents = Arrays.asList&#40;\n     &quot;The hotel was dark and unclean. The restaurant had amazing gnocchi.&quot;,\n     &quot;The restaurant had amazing gnocchi. The hotel was dark and unclean.&quot;\n &#41;;\n \n &#47;&#47; Analyzing batch sentiments\n textAnalyticsClient.analyzeSentimentBatch&#40;documents&#41;.iterableByPage&#40;&#41;.forEach&#40;response -&gt; &#123;\n     &#47;&#47; Batch statistics\n     final TextDocumentBatchStatistics batchStatistics = response.getStatistics&#40;&#41;;\n     System.out.printf&#40;\n         &quot;A batch of documents statistics, transaction count: %s, valid document count: %s.%n&quot;,\n         batchStatistics.getTransactionCount&#40;&#41;, batchStatistics.getValidDocumentCount&#40;&#41;&#41;;\n \n     &#47;&#47; Analyzed sentiment for each of documents from a batch of documents\n     response.getElements&#40;&#41;.forEach&#40;analyzeSentimentResult -&gt; &#123;\n         System.out.printf&#40;&quot;Document ID: %s%n&quot;, analyzeSentimentResult.getId&#40;&#41;&#41;;\n         &#47;&#47; Valid document\n         final DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment&#40;&#41;;\n         System.out.printf&#40;\n             &quot;Recognized document sentiment: %s, positive score: %.2f, neutral score: %.2f, &quot;\n                 + &quot;negative score: %.2f.%n&quot;,\n             documentSentiment.getSentiment&#40;&#41;,\n             documentSentiment.getConfidenceScores&#40;&#41;.getPositive&#40;&#41;,\n             documentSentiment.getConfidenceScores&#40;&#41;.getNeutral&#40;&#41;,\n             documentSentiment.getConfidenceScores&#40;&#41;.getNegative&#40;&#41;&#41;;\n         documentSentiment.getSentences&#40;&#41;.forEach&#40;sentenceSentiment -&gt; System.out.printf&#40;\n             &quot;Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f,&quot;\n                 + &quot; negative score: %.2f.%n&quot;,\n             sentenceSentiment.getSentiment&#40;&#41;,\n             sentenceSentiment.getConfidenceScores&#40;&#41;.getPositive&#40;&#41;,\n             sentenceSentiment.getConfidenceScores&#40;&#41;.getNeutral&#40;&#41;,\n             sentenceSentiment.getConfidenceScores&#40;&#41;.getNegative&#40;&#41;&#41;&#41;;\n     &#125;&#41;;\n &#125;&#41;;\n </pre>"
  parameters:
  - description: |-
      A list of documents to be analyzed.
       For text length limits, maximum batch size, and supported text encoding, see
       <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    name: documents
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />&gt;
  syntax: public TextAnalyticsPagedIterable<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<String> documents)
  returns:
    description: |-
      A <xref uid="TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
       <xref uid="AnalyzeSentimentResult" data-throw-if-not-resolved="false">analyzed sentiment document result</xref>.
    type: <xref href="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable?alt=com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable&text=TextAnalyticsPagedIterable" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.ai.textanalytics.models.AnalyzeSentimentResult?alt=com.azure.ai.textanalytics.models.AnalyzeSentimentResult&text=AnalyzeSentimentResult" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(Iterable<String> documents, String language)
  name: analyzeSentimentBatch(Iterable<String> documents, String language)
  nameWithType: TextAnalyticsClient.analyzeSentimentBatch(Iterable<String> documents, String language)
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label\n (Positive, Negative, and Neutral) for the document and each sentence within it.\n\n <p><strong>Code Sample</strong></p>\n <p>Analyze the sentiments in a list of documents with a provided language code.</p>\n <pre>\n List&lt;String&gt; documents = Arrays.asList&#40;\n     &quot;The hotel was dark and unclean. The restaurant had amazing gnocchi.&quot;,\n     &quot;The restaurant had amazing gnocchi. The hotel was dark and unclean.&quot;\n &#41;;\n \n &#47;&#47; Analyzing batch sentiments\n textAnalyticsClient.analyzeSentimentBatch&#40;documents, &quot;en&quot;&#41;.iterableByPage&#40;&#41;\n     .forEach&#40;response -&gt; &#123;\n         &#47;&#47; Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics&#40;&#41;;\n         System.out.printf&#40;&quot;A batch of documents statistics, transaction count: %s, valid document count: %s.%n&quot;,\n             batchStatistics.getTransactionCount&#40;&#41;, batchStatistics.getValidDocumentCount&#40;&#41;&#41;;\n \n         &#47;&#47; Analyzed sentiment for each of documents from a batch of documents\n         response.getElements&#40;&#41;.forEach&#40;analyzeSentimentResult -&gt; &#123;\n             System.out.printf&#40;&quot;Document ID: %s%n&quot;, analyzeSentimentResult.getId&#40;&#41;&#41;;\n             &#47;&#47; Valid document\n             DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment&#40;&#41;;\n             System.out.printf&#40;\n                 &quot;Recognized document sentiment: %s, positive score: %.2f, neutral score: %.2f,&quot;\n                     + &quot; negative score: %.2f.%n&quot;,\n                 documentSentiment.getSentiment&#40;&#41;,\n                 documentSentiment.getConfidenceScores&#40;&#41;.getPositive&#40;&#41;,\n                 documentSentiment.getConfidenceScores&#40;&#41;.getNeutral&#40;&#41;,\n                 documentSentiment.getConfidenceScores&#40;&#41;.getNegative&#40;&#41;&#41;;\n             documentSentiment.getSentences&#40;&#41;.forEach&#40;sentenceSentiment -&gt; System.out.printf&#40;\n                 &quot;Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f,&quot;\n                     + &quot; negative score: %.2f.%n&quot;,\n                 sentenceSentiment.getSentiment&#40;&#41;,\n                 sentenceSentiment.getConfidenceScores&#40;&#41;.getPositive&#40;&#41;,\n                 sentenceSentiment.getConfidenceScores&#40;&#41;.getNeutral&#40;&#41;,\n                 sentenceSentiment.getConfidenceScores&#40;&#41;.getNegative&#40;&#41;&#41;&#41;;\n         &#125;&#41;;\n     &#125;&#41;;\n </pre>"
  parameters:
  - description: |-
      A list of documents to be analyzed.
       For text length limits, maximum batch size, and supported text encoding, see
       <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    name: documents
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />&gt;
  - description: |-
      The 2 letter ISO 639-1 representation of language for the documents. If not set, uses "en" for
       English as default..
    name: language
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  syntax: public TextAnalyticsPagedIterable<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<String> documents, String language)
  returns:
    description: |-
      A <xref uid="TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
       <xref uid="AnalyzeSentimentResult" data-throw-if-not-resolved="false">analyzed sentiment document result</xref>.
    type: <xref href="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable?alt=com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable&text=TextAnalyticsPagedIterable" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.ai.textanalytics.models.AnalyzeSentimentResult?alt=com.azure.ai.textanalytics.models.AnalyzeSentimentResult&text=AnalyzeSentimentResult" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(java.lang.Iterable<java.lang.String>,java.lang.String,com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions)
  fullName: com.azure.ai.textanalytics.TextAnalyticsClient.analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  name: analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  nameWithType: TextAnalyticsClient.analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  summary: "Returns a sentiment prediction, as well as confidence scores for each sentiment label\n (Positive, Negative, and Neutral) for the document and each sentence within it.\n\n <p><strong>Code Sample</strong></p>\n <p>Analyze the sentiments in a list of documents with a provided language representation and request options.</p>\n <pre>\n List&lt;String&gt; documents = Arrays.asList&#40;\n     &quot;The hotel was dark and unclean. The restaurant had amazing gnocchi.&quot;,\n     &quot;The restaurant had amazing gnocchi. The hotel was dark and unclean.&quot;\n &#41;;\n \n &#47;&#47; Analyzing batch sentiments\n textAnalyticsClient.analyzeSentimentBatch&#40;documents, &quot;en&quot;, null&#41;.iterableByPage&#40;&#41;\n     .forEach&#40;response -&gt; &#123;\n         &#47;&#47; Batch statistics\n         TextDocumentBatchStatistics batchStatistics = response.getStatistics&#40;&#41;;\n         System.out.printf&#40;&quot;A batch of documents statistics, transaction count: %s, valid document count: %s.%n&quot;,\n             batchStatistics.getTransactionCount&#40;&#41;, batchStatistics.getValidDocumentCount&#40;&#41;&#41;;\n \n         &#47;&#47; Analyzed sentiment for each of documents from a batch of documents\n         response.getElements&#40;&#41;.forEach&#40;analyzeSentimentResult -&gt; &#123;\n             System.out.printf&#40;&quot;Document ID: %s%n&quot;, analyzeSentimentResult.getId&#40;&#41;&#41;;\n             &#47;&#47; Valid document\n             DocumentSentiment documentSentiment = analyzeSentimentResult.getDocumentSentiment&#40;&#41;;\n             System.out.printf&#40;\n                 &quot;Recognized document sentiment: %s, positive score: %.2f, neutral score: %.2f,&quot;\n                     + &quot; negative score: %.2f.%n&quot;,\n                 documentSentiment.getSentiment&#40;&#41;,\n                 documentSentiment.getConfidenceScores&#40;&#41;.getPositive&#40;&#41;,\n                 documentSentiment.getConfidenceScores&#40;&#41;.getNeutral&#40;&#41;,\n                 documentSentiment.getConfidenceScores&#40;&#41;.getNegative&#40;&#41;&#41;;\n             documentSentiment.getSentences&#40;&#41;.forEach&#40;sentenceSentiment -&gt; System.out.printf&#40;\n                 &quot;Recognized sentence sentiment: %s, positive score: %.2f, neutral score: %.2f,&quot;\n                     + &quot; negative score: %.2f.%n&quot;,\n                 sentenceSentiment.getSentiment&#40;&#41;,\n                 sentenceSentiment.getConfidenceScores&#40;&#41;.getPositive&#40;&#41;,\n                 sentenceSentiment.getConfidenceScores&#40;&#41;.getNeutral&#40;&#41;,\n                 sentenceSentiment.getConfidenceScores&#40;&#41;.getNegative&#40;&#41;&#41;&#41;;\n         &#125;&#41;;\n     &#125;&#41;;\n </pre>"
  parameters:
  - description: |-
      A list of documents to be analyzed.
       For text length limits, maximum batch size, and supported text encoding, see
       <a href="https://docs.microsoft.com/azure/cognitive-services/text-analytics/overview#data-limits">data limits</a>.
    name: documents
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />&gt;
  - description: |-
      The 2 letter ISO 639-1 representation of language for the documents. If not set, uses "en" for
       English as default.
    name: language
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: |-
      The <xref uid="TextAnalyticsRequestOptions" data-throw-if-not-resolved="false">options</xref> to configure the scoring model for documents
       and show statistics.
    name: options
    type: <xref href="com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions?alt=com.azure.ai.textanalytics.models.TextAnalyticsRequestOptions&text=TextAnalyticsRequestOptions" data-throw-if-not-resolved="False" />
  syntax: public TextAnalyticsPagedIterable<AnalyzeSentimentResult> analyzeSentimentBatch(Iterable<String> documents, String language, TextAnalyticsRequestOptions options)
  returns:
    description: |-
      A <xref uid="TextAnalyticsPagedIterable" data-throw-if-not-resolved="false">TextAnalyticsPagedIterable</xref> contains a list of
       <xref uid="AnalyzeSentimentResult" data-throw-if-not-resolved="false">analyzed sentiment document result</xref>.
    type: <xref href="com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable?alt=com.azure.ai.textanalytics.util.TextAnalyticsPagedIterable&text=TextAnalyticsPagedIterable" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.ai.textanalytics.models.AnalyzeSentimentResult?alt=com.azure.ai.textanalytics.models.AnalyzeSentimentResult&text=AnalyzeSentimentResult" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.ai.textanalytics
artifact: com.azure:azure-ai-textanalytics:1.0.0-beta.4
