### YamlMime:JavaMember
uid: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificateVersions*
fullName: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificateVersions
name: listPropertiesOfCertificateVersions
nameWithType: CertificateClient.listPropertiesOfCertificateVersions
members:
- uid: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificateVersions(java.lang.String)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificateVersions(String certificateName)
  name: listPropertiesOfCertificateVersions(String certificateName)
  nameWithType: CertificateClient.listPropertiesOfCertificateVersions(String certificateName)
  summary: |-
    List all versions of the specified certificate. The individual certificate response in the iterable is represented by <xref uid="CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref>
     as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy is not listed in
     the response. This operation requires the certificates/list permission.

     <p>It is possible to get the certificates with properties excluding the policy for all the versions from this information. Loop over the <xref uid="CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> and
     call <xref uid="CertificateClient#getCertificateVersion(String, String)" data-throw-if-not-resolved="false">CertificateClient#getCertificateVersion(String, String)</xref>. This will return the <xref uid="KeyVaultCertificate" data-throw-if-not-resolved="false">certificate</xref>
     with all its properties excluding the policy.</p>

     <pre>
     for &#40;CertificateProperties certificateProperties : certificateClient
         .listPropertiesOfCertificateVersions&#40;&quot;certificateName&quot;&#41;&#41; &#123;
         KeyVaultCertificate certificateWithAllProperites  = certificateClient
             .getCertificateVersion&#40;certificateProperties.getName&#40;&#41;, certificateProperties.getVersion&#40;&#41;&#41;;
         System.out.printf&#40;&quot;Received certificate's version with name %s, version %s and secret id %s&quot;,
             certificateWithAllProperites.getProperties&#40;&#41;.getName&#40;&#41;,
             certificateWithAllProperites.getProperties&#40;&#41;.getVersion&#40;&#41;, certificateWithAllProperites.getSecretId&#40;&#41;&#41;;
     &#125;
     </pre>
  parameters:
  - description: The name of the certificate.
    name: certificateName
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  syntax: public PagedIterable<CertificateProperties> listPropertiesOfCertificateVersions(String certificateName)
  returns:
    description: A <xref uid="PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing <xref uid="CertificateProperties" data-throw-if-not-resolved="false">certificate</xref> of all the versions of the specified certificate in the vault. Paged Iterable is empty if certificate with <code>certificateName</code> does not exist in key vault.
    type: <xref href="com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.security.keyvault.certificates.models.CertificateProperties?alt=com.azure.security.keyvault.certificates.models.CertificateProperties&text=CertificateProperties" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificateVersions(java.lang.String,com.azure.core.util.Context)
  fullName: com.azure.security.keyvault.certificates.CertificateClient.listPropertiesOfCertificateVersions(String certificateName, Context context)
  name: listPropertiesOfCertificateVersions(String certificateName, Context context)
  nameWithType: CertificateClient.listPropertiesOfCertificateVersions(String certificateName, Context context)
  summary: |-
    List all versions of the specified certificate. The individual certificate response in the iterable is represented by <xref uid="CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref>
     as only the certificate identifier, thumbprint, attributes and tags are provided in the response. The policy is not listed in
     the response. This operation requires the certificates/list permission.

     <p>It is possible to get the certificates with properties excluding the policy for all the versions from this information. Loop over the <xref uid="CertificateProperties" data-throw-if-not-resolved="false">CertificateProperties</xref> and
     call <xref uid="CertificateClient#getCertificateVersion(String, String)" data-throw-if-not-resolved="false">CertificateClient#getCertificateVersion(String, String)</xref>. This will return the <xref uid="KeyVaultCertificate" data-throw-if-not-resolved="false">certificate</xref>
     with all its properties excluding the policy.</p>

     <pre>
     for &#40;CertificateProperties certificateProperties : certificateClient
         .listPropertiesOfCertificateVersions&#40;&quot;certificateName&quot;&#41;&#41; &#123;
         KeyVaultCertificate certificateWithAllProperites  = certificateClient
             .getCertificateVersion&#40;certificateProperties.getName&#40;&#41;, certificateProperties.getVersion&#40;&#41;&#41;;
         System.out.printf&#40;&quot;Received certificate's version with name %s, version %s and secret id %s&quot;,
             certificateWithAllProperites.getProperties&#40;&#41;.getName&#40;&#41;,
             certificateWithAllProperites.getProperties&#40;&#41;.getVersion&#40;&#41;, certificateWithAllProperites.getSecretId&#40;&#41;&#41;;
     &#125;
     </pre>
  parameters:
  - description: The name of the certificate.
    name: certificateName
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: Additional context that is passed through the Http pipeline during the service call.
    name: context
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
  syntax: public PagedIterable<CertificateProperties> listPropertiesOfCertificateVersions(String certificateName, Context context)
  returns:
    description: A <xref uid="PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> containing <xref uid="CertificateProperties" data-throw-if-not-resolved="false">certificate</xref> of all the versions of the specified certificate in the vault. Iterable is empty if certificate with <code>certificateName</code> does not exist in key vault.
    type: <xref href="com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.security.keyvault.certificates.models.CertificateProperties?alt=com.azure.security.keyvault.certificates.models.CertificateProperties&text=CertificateProperties" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.security.keyvault.certificates
artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
