### YamlMime:JavaMember
uid: com.azure.security.keyvault.keys.KeyClient.createEcKeyWithResponse*
fullName: com.azure.security.keyvault.keys.KeyClient.createEcKeyWithResponse
name: createEcKeyWithResponse
nameWithType: KeyClient.createEcKeyWithResponse
members:
- uid: com.azure.security.keyvault.keys.KeyClient.createEcKeyWithResponse(com.azure.security.keyvault.keys.models.CreateEcKeyOptions,com.azure.core.util.Context)
  fullName: com.azure.security.keyvault.keys.KeyClient.createEcKeyWithResponse(CreateEcKeyOptions createEcKeyOptions, Context context)
  name: createEcKeyWithResponse(CreateEcKeyOptions createEcKeyOptions, Context context)
  nameWithType: KeyClient.createEcKeyWithResponse(CreateEcKeyOptions createEcKeyOptions, Context context)
  summary: |-
    Creates a new Ec key and  stores it in the key vault. The create Ec key operation can be used to create any Ec
     key type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It
     requires the <code>keys/create</code> permission.

     <p>The <xref uid="CreateEcKeyOptions" data-throw-if-not-resolved="false">CreateEcKeyOptions</xref> parameter is required. The <xref uid="CreateEcKeyOptions#getCurveName()" data-throw-if-not-resolved="false">key curve</xref> can be
     optionally specified. If not specified, default value of <xref uid="KeyCurveName#P_256" data-throw-if-not-resolved="false">P-256</xref> is used by Azure Key
     Vault. The <xref uid="CreateEcKeyOptions#getExpiresOn()" data-throw-if-not-resolved="false">expires</xref> and <xref uid="CreateEcKeyOptions#getNotBefore()" data-throw-if-not-resolved="false">notBefore</xref>
     values are optional. The <xref uid="CreateEcKeyOptions#isEnabled()" data-throw-if-not-resolved="false">CreateEcKeyOptions#isEnabled()</xref> enabled} field is set to true by Azure Key Vault, if
     not specified.</p>

     <p>The <xref uid="CreateEcKeyOptions#getKeyType()" data-throw-if-not-resolved="false">keyType</xref> indicates the type of key to create. Possible values
     include:
     <xref uid="KeyType#EC" data-throw-if-not-resolved="false">EC</xref> and <xref uid="KeyType#EC_HSM" data-throw-if-not-resolved="false">EC-HSM</xref>.</p>

     <p><strong>Code Samples</strong></p>
     <p>Creates a new EC key with P-384 web key curve. The key activates in one day and expires in one year. Prints
     out the details of the created key.</p>
     <pre>
     CreateEcKeyOptions createEcKeyOptions = new CreateEcKeyOptions&#40;&quot;keyName&quot;&#41;
         .setCurveName&#40;KeyCurveName.P_384&#41;
         .setNotBefore&#40;OffsetDateTime.now&#40;&#41;.plusDays&#40;1&#41;&#41;
         .setExpiresOn&#40;OffsetDateTime.now&#40;&#41;.plusYears&#40;1&#41;&#41;;
     KeyVaultKey ecKey = keyClient.createEcKeyWithResponse&#40;createEcKeyOptions, new Context&#40;key1, value1&#41;&#41;.getValue&#40;&#41;;
     System.out.printf&#40;&quot;Key is created with name %s and id %s %n&quot;, ecKey.getName&#40;&#41;, ecKey.getId&#40;&#41;&#41;;
     </pre>
  parameters:
  - description: The key options object containing information about the ec key being created.
    name: createEcKeyOptions
    type: <xref href="com.azure.security.keyvault.keys.models.CreateEcKeyOptions?alt=com.azure.security.keyvault.keys.models.CreateEcKeyOptions&text=CreateEcKeyOptions" data-throw-if-not-resolved="False" />
  - description: Additional context that is passed through the Http pipeline during the service call.
    name: context
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
  syntax: public Response<KeyVaultKey> createEcKeyWithResponse(CreateEcKeyOptions createEcKeyOptions, Context context)
  returns:
    description: A <xref uid="Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="Response#getValue()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="KeyVaultKey" data-throw-if-not-resolved="false">created key</xref>.
    type: <xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.security.keyvault.keys.models.KeyVaultKey?alt=com.azure.security.keyvault.keys.models.KeyVaultKey&text=KeyVaultKey" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.security.keyvault.keys
artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
