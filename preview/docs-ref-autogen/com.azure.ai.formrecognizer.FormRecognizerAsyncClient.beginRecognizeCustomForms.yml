### YamlMime:JavaMember
uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms*
fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms
name: beginRecognizeCustomForms
nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomForms
members:
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length)
  name: beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length)
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained\n model with or without labels.\n <p>The service does not support cancellation of the long running operation and returns with an\n error message indicating absence of cancellation support.</p>\n\n Note that the <code>data</code> passed must be replayable if retries are enabled (the default). In other words, the\n <code>Flux</code> must produce the same data each time it is subscribed to.\n\n <p><strong>Code sample</strong></p>\n <pre>\n File form = new File&#40;&quot;&#123;local&#47;file_path&#47;fileName.jpg&#125;&quot;&#41;;\n String modelId = &quot;&#123;custom_trained_model_id&#125;&quot;;\n &#47;&#47; Utility method to convert input stream to Byte buffer\n Flux&lt;ByteBuffer&gt; buffer = toFluxByteBuffer&#40;new ByteArrayInputStream&#40;Files.readAllBytes&#40;form.toPath&#40;&#41;&#41;&#41;&#41;;\n \n &#47;&#47; if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeCustomForms&#40;modelId, buffer, form.length&#40;&#41;&#41;\n     &#47;&#47; if training polling operation completed, retrieve the final result.\n     .flatMap&#40;AsyncPollResponse::getFinalResult&#41;\n     .flatMap&#40;Flux::fromIterable&#41;\n     .subscribe&#40;recognizedForm -&gt; recognizedForm.getFields&#40;&#41;\n         .forEach&#40;&#40;fieldText, formField&#41; -&gt; &#123;\n             System.out.printf&#40;&quot;Field text: %s%n&quot;, fieldText&#41;;\n             System.out.printf&#40;&quot;Field value data text: %s%n&quot;, formField.getValueData&#40;&#41;.getText&#40;&#41;&#41;;\n             System.out.printf&#40;&quot;Confidence score: %.2f%n&quot;, formField.getConfidence&#40;&#41;&#41;;\n         &#125;&#41;&#41;;\n </pre>"
  parameters:
  - description: The UUID string format custom trained model Id to be used.
    name: modelId
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: The data of the form to recognize form information from.
    name: form
    type: <xref href="reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux" data-throw-if-not-resolved="False" />&lt;<xref href="java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer" data-throw-if-not-resolved="False" />&gt;
  - description: The exact length of the data.
    name: length
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False" />
  syntax: public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length)
  returns:
    description: |-
      A <xref uid="PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognize custom form operation until it has completed, has failed,
       or has been cancelled. The completed operation returns a List of <xref uid="RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
    type: <xref href="com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult" data-throw-if-not-resolved="False" />,<xref href="java.util.List?alt=java.util.List&text=List" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm" data-throw-if-not-resolved="False" />&gt;&gt;
- uid: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(java.lang.String,reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions)
  fullName: com.azure.ai.formrecognizer.FormRecognizerAsyncClient.beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length, RecognizeCustomFormsOptions recognizeCustomFormsOptions)
  name: beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length, RecognizeCustomFormsOptions recognizeCustomFormsOptions)
  nameWithType: FormRecognizerAsyncClient.beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length, RecognizeCustomFormsOptions recognizeCustomFormsOptions)
  summary: "Recognizes form data from documents using optical character recognition (OCR) and a custom trained\n model with or without labels.\n <p>The service does not support cancellation of the long running operation and returns with an\n error message indicating absence of cancellation support.</p>\n\n Note that the <code>data</code> passed must be replayable if retries are enabled (the default). In other words, the\n <code>Flux</code> must produce the same data each time it is subscribed to.\n\n <p><strong>Code sample</strong></p>\n <pre>\n File form = new File&#40;&quot;&#123;local&#47;file_path&#47;fileName.jpg&#125;&quot;&#41;;\n String modelId = &quot;&#123;custom_trained_model_id&#125;&quot;;\n boolean includeFieldElements = true;\n &#47;&#47; Utility method to convert input stream to Byte buffer\n Flux&lt;ByteBuffer&gt; buffer = toFluxByteBuffer&#40;new ByteArrayInputStream&#40;Files.readAllBytes&#40;form.toPath&#40;&#41;&#41;&#41;&#41;;\n \n &#47;&#47; if training polling operation completed, retrieve the final result.\n formRecognizerAsyncClient.beginRecognizeCustomForms&#40;modelId, buffer, form.length&#40;&#41;,\n     new RecognizeCustomFormsOptions&#40;&#41;\n         .setContentType&#40;FormContentType.IMAGE_JPEG&#41;\n         .setFieldElementsIncluded&#40;includeFieldElements&#41;\n         .setPollInterval&#40;Duration.ofSeconds&#40;5&#41;&#41;&#41;\n     &#47;&#47; if training polling operation completed, retrieve the final result.\n     .flatMap&#40;AsyncPollResponse::getFinalResult&#41;\n     .flatMap&#40;Flux::fromIterable&#41;\n     .subscribe&#40;recognizedForm -&gt; recognizedForm.getFields&#40;&#41;\n         .forEach&#40;&#40;fieldName, formField&#41; -&gt; &#123;\n             System.out.printf&#40;&quot;Field text: %s%n&quot;, fieldName&#41;;\n             System.out.printf&#40;&quot;Field value data text: %s%n&quot;, formField.getValueData&#40;&#41;.getText&#40;&#41;&#41;;\n             System.out.printf&#40;&quot;Confidence score: %.2f%n&quot;, formField.getConfidence&#40;&#41;&#41;;\n         &#125;&#41;&#41;;\n </pre>"
  parameters:
  - description: The UUID string format custom trained model Id to be used.
    name: modelId
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: The data of the form to recognize form information from.
    name: form
    type: <xref href="reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux" data-throw-if-not-resolved="False" />&lt;<xref href="java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer" data-throw-if-not-resolved="False" />&gt;
  - description: The exact length of the data.
    name: length
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False" />
  - description: |-
      The additional configurable
       <xref uid="RecognizeCustomFormsOptions" data-throw-if-not-resolved="false">options</xref> that may be passed when recognizing custom forms.
    name: recognizeCustomFormsOptions
    type: <xref href="com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions?alt=com.azure.ai.formrecognizer.models.RecognizeCustomFormsOptions&text=RecognizeCustomFormsOptions" data-throw-if-not-resolved="False" />
  syntax: public PollerFlux<FormRecognizerOperationResult,List<RecognizedForm>> beginRecognizeCustomForms(String modelId, Flux<ByteBuffer> form, long length, RecognizeCustomFormsOptions recognizeCustomFormsOptions)
  returns:
    description: |-
      A <xref uid="PollerFlux" data-throw-if-not-resolved="false">PollerFlux</xref> that polls the recognize custom form operation until it has completed, has failed,
       or has been cancelled. The completed operation returns a List of <xref uid="RecognizedForm" data-throw-if-not-resolved="false">RecognizedForm</xref>.
    type: <xref href="com.azure.core.util.polling.PollerFlux?alt=com.azure.core.util.polling.PollerFlux&text=PollerFlux" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.ai.formrecognizer.models.FormRecognizerOperationResult?alt=com.azure.ai.formrecognizer.models.FormRecognizerOperationResult&text=FormRecognizerOperationResult" data-throw-if-not-resolved="False" />,<xref href="java.util.List?alt=java.util.List&text=List" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.ai.formrecognizer.models.RecognizedForm?alt=com.azure.ai.formrecognizer.models.RecognizedForm&text=RecognizedForm" data-throw-if-not-resolved="False" />&gt;&gt;
type: method
metadata: {}
package: com.azure.ai.formrecognizer
artifact: com.azure:azure-ai-formrecognizer:3.0.0-beta.1
