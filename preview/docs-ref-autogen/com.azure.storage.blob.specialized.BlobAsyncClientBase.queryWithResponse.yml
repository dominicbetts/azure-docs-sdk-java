### YamlMime:JavaMember
uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.queryWithResponse*
fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.queryWithResponse
name: queryWithResponse
nameWithType: BlobAsyncClientBase.queryWithResponse
members:
- uid: com.azure.storage.blob.specialized.BlobAsyncClientBase.queryWithResponse(com.azure.storage.blob.options.BlobQueryOptions)
  fullName: com.azure.storage.blob.specialized.BlobAsyncClientBase.queryWithResponse(BlobQueryOptions queryOptions)
  name: queryWithResponse(BlobQueryOptions queryOptions)
  nameWithType: BlobAsyncClientBase.queryWithResponse(BlobQueryOptions queryOptions)
  summary: "Queries the entire blob.\n\n <p>For more information, see the\n <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/query-blob-contents\">Azure Docs</a></p>\n\n <p><strong>Code Samples</strong></p>\n\n <pre>\n String expression = &quot;SELECT * from BlobStorage&quot;;\n BlobQueryJsonSerialization input = new BlobQueryJsonSerialization&#40;&#41;\n     .setRecordSeparator&#40;'&#92;n'&#41;;\n BlobQueryDelimitedSerialization output = new BlobQueryDelimitedSerialization&#40;&#41;\n     .setEscapeChar&#40;'&#92;0'&#41;\n     .setColumnSeparator&#40;','&#41;\n     .setRecordSeparator&#40;'&#92;n'&#41;\n     .setFieldQuote&#40;'&#92;''&#41;\n     .setHeadersPresent&#40;true&#41;;\n BlobRequestConditions requestConditions = new BlobRequestConditions&#40;&#41;.setLeaseId&#40;leaseId&#41;;\n Consumer&lt;BlobQueryError&gt; errorConsumer = System.out::println;\n Consumer&lt;BlobQueryProgress&gt; progressConsumer = progress -&gt; System.out.println&#40;&quot;total blob bytes read: &quot;\n     + progress.getBytesScanned&#40;&#41;&#41;;\n BlobQueryOptions queryOptions = new BlobQueryOptions&#40;expression&#41;\n     .setInputSerialization&#40;input&#41;\n     .setOutputSerialization&#40;output&#41;\n     .setRequestConditions&#40;requestConditions&#41;\n     .setErrorConsumer&#40;errorConsumer&#41;\n     .setProgressConsumer&#40;progressConsumer&#41;;\n \n client.queryWithResponse&#40;queryOptions&#41;\n     .subscribe&#40;response -&gt; &#123;\n         ByteArrayOutputStream queryData = new ByteArrayOutputStream&#40;&#41;;\n         response.getValue&#40;&#41;.subscribe&#40;piece -&gt; &#123;\n             try &#123;\n                 queryData.write&#40;piece.array&#40;&#41;&#41;;\n             &#125; catch &#40;IOException ex&#41; &#123;\n                 throw new UncheckedIOException&#40;ex&#41;;\n             &#125;\n         &#125;&#41;;\n     &#125;&#41;;\n </pre>"
  parameters:
  - description: <xref uid="BlobQueryOptions" data-throw-if-not-resolved="false">The query options</xref>.
    name: queryOptions
    type: <xref href="com.azure.storage.blob.options.BlobQueryOptions?alt=com.azure.storage.blob.options.BlobQueryOptions&text=BlobQueryOptions" data-throw-if-not-resolved="False" />
  syntax: public Mono<BlobQueryAsyncResponse> queryWithResponse(BlobQueryOptions queryOptions)
  returns:
    description: A reactive response containing the queried data.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.blob.models.BlobQueryAsyncResponse?alt=com.azure.storage.blob.models.BlobQueryAsyncResponse&text=BlobQueryAsyncResponse" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.storage.blob.specialized
artifact: com.azure:azure-storage-blob:12.8.0-beta.1
