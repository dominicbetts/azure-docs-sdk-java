### YamlMime:JavaMember
uid: com.azure.search.documents.SearchAsyncClient.search*
fullName: com.azure.search.documents.SearchAsyncClient.search
name: search
nameWithType: SearchAsyncClient.search
members:
- uid: com.azure.search.documents.SearchAsyncClient.search(java.lang.String)
  fullName: com.azure.search.documents.SearchAsyncClient.search(String searchText)
  name: search(String searchText)
  nameWithType: SearchAsyncClient.search(String searchText)
  summary: |-
    Searches for documents in the Azure Cognitive Search index.
     <p>
     If <code>searchText</code> is set to <code>null</code> or <code>"*"</code> all documents will be matched, see
     <a href="https://docs.microsoft.com/rest/api/searchservice/Simple-query-syntax-in-Azure-Search">simple query
     syntax in Azure Cognitive Search</a> for more information about search query syntax.

     <p><strong>Code Sample</strong></p>

     <p> Search text from documents in service. </p>

     <pre>
     SearchPagedFlux searchPagedFlux = searchAsyncClient.search&#40;&quot;searchText&quot;&#41;;
     searchPagedFlux.getTotalCount&#40;&#41;.subscribe&#40;
         count -&gt; System.out.printf&#40;&quot;There are around %d results.&quot;, count&#41;
     &#41;;
     searchPagedFlux.byPage&#40;&#41;
         .subscribe&#40;resultRespones -&gt; &#123;
             for &#40;SearchResult result: resultRespones.getValue&#40;&#41;&#41; &#123;
                 SearchDocument searchDocument = result.getDocument&#40;SearchDocument.class&#41;;
                 for &#40;Map.Entry&lt;String, Object&gt; keyValuePair: searchDocument.entrySet&#40;&#41;&#41; &#123;
                     System.out.printf&#40;&quot;Document key %s, document value %s&quot;, keyValuePair.getKey&#40;&#41;, keyValuePair.getValue&#40;&#41;&#41;;
                 &#125;
             &#125;
         &#125;&#41;;
     </pre>
  parameters:
  - description: A full-text search query expression.
    name: searchText
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  syntax: public SearchPagedFlux search(String searchText)
  returns:
    description: |-
      A <xref uid="SearchPagedFlux" data-throw-if-not-resolved="false">SearchPagedFlux</xref> that iterates over <xref uid="SearchResult" data-throw-if-not-resolved="false">SearchResult</xref> objects and provides access to the
       <xref uid="SearchPagedResponse" data-throw-if-not-resolved="false">SearchPagedResponse</xref> object for each page containing HTTP response and count, facet, and coverage
       information.
    type: <xref href="com.azure.search.documents.util.SearchPagedFlux?alt=com.azure.search.documents.util.SearchPagedFlux&text=SearchPagedFlux" data-throw-if-not-resolved="False" />
- uid: com.azure.search.documents.SearchAsyncClient.search(java.lang.String,com.azure.search.documents.models.SearchOptions)
  fullName: com.azure.search.documents.SearchAsyncClient.search(String searchText, SearchOptions searchOptions)
  name: search(String searchText, SearchOptions searchOptions)
  nameWithType: SearchAsyncClient.search(String searchText, SearchOptions searchOptions)
  summary: "Searches for documents in the Azure Cognitive Search index.\n <p>\n If <code>searchText</code> is set to <code>null</code> or <code>\"*\"</code> all documents will be matched, see\n <a href=\"https://docs.microsoft.com/rest/api/searchservice/Simple-query-syntax-in-Azure-Search\">simple query\n syntax in Azure Cognitive Search</a> for more information about search query syntax.\n\n <p><strong>Code Sample</strong></p>\n\n <p> Search text from documents in service with option. </p>\n\n <pre>\n SearchPagedFlux pagedFlux = searchAsyncClient.search&#40;&quot;searchText&quot;,\n     new SearchOptions&#40;&#41;.setOrderBy&#40;&quot;hotelId desc&quot;&#41;&#41;;\n \n pagedFlux.getTotalCount&#40;&#41;.subscribe&#40;count -&gt; &#123;\n     System.out.printf&#40;&quot;There are around %d results.&quot;, count&#41;;\n &#125;&#41;;\n \n pagedFlux.byPage&#40;&#41;\n     .subscribe&#40;searchResultResponse -&gt; &#123;\n         searchResultResponse.getValue&#40;&#41;.forEach&#40;searchDocument -&gt; &#123;\n             for &#40;Map.Entry&lt;String, Object&gt; keyValuePair\n                 : searchDocument.getDocument&#40;SearchDocument.class&#41;.entrySet&#40;&#41;&#41; &#123;\n                 System.out.printf&#40;&quot;Document key %s, document value %s&quot;, keyValuePair.getKey&#40;&#41;,\n                     keyValuePair.getValue&#40;&#41;&#41;;\n             &#125;\n         &#125;&#41;;\n     &#125;&#41;;\n </pre>"
  parameters:
  - description: A full-text search query expression.
    name: searchText
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: Parameters to further refine the search query
    name: searchOptions
    type: <xref href="com.azure.search.documents.models.SearchOptions?alt=com.azure.search.documents.models.SearchOptions&text=SearchOptions" data-throw-if-not-resolved="False" />
  syntax: public SearchPagedFlux search(String searchText, SearchOptions searchOptions)
  returns:
    description: |-
      A <xref uid="SearchPagedFlux" data-throw-if-not-resolved="false">SearchPagedFlux</xref> that iterates over <xref uid="SearchResult" data-throw-if-not-resolved="false">SearchResult</xref> objects and provides access to the
       <xref uid="SearchPagedResponse" data-throw-if-not-resolved="false">SearchPagedResponse</xref> object for each page containing HTTP response and count, facet, and coverage
       information.
    type: <xref href="com.azure.search.documents.util.SearchPagedFlux?alt=com.azure.search.documents.util.SearchPagedFlux&text=SearchPagedFlux" data-throw-if-not-resolved="False" />
type: method
metadata: {}
package: com.azure.search.documents
artifact: com.azure:azure-search-documents:11.1.0-beta.1
