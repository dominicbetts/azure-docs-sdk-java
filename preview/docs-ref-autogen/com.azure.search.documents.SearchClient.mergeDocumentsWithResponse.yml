### YamlMime:JavaMember
uid: com.azure.search.documents.SearchClient.mergeDocumentsWithResponse*
fullName: com.azure.search.documents.SearchClient.mergeDocumentsWithResponse
name: mergeDocumentsWithResponse
nameWithType: SearchClient.mergeDocumentsWithResponse
members:
- uid: com.azure.search.documents.SearchClient.mergeDocumentsWithResponse(java.lang.Iterable<?>,com.azure.search.documents.models.IndexDocumentsOptions,com.azure.core.util.Context)
  fullName: com.azure.search.documents.SearchClient.mergeDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)
  name: mergeDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)
  nameWithType: SearchClient.mergeDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)
  summary: |-
    Merges a collection of documents with existing documents in the target index.
     <p>
     If the type of the document contains non-nullable primitive-typed properties, these properties may not merge
     correctly. If you do not set such a property, it will automatically take its default value (for example, <code>
     0</code> for <code>int</code> or <code>false</code> for <code>boolean</code>), which will override the value of the property currently
     stored in the index, even if this was not your intent. For this reason, it is strongly recommended that you
     always declare primitive-typed properties with their class equivalents (for example, an integer property should
     be of type <code>Integer</code> instead of <code>int</code>).

     <p><strong>Code Sample</strong></p>

     <p> Merge dynamic SearchDocument. </p>

     <pre>
     SearchDocument searchDocument = new SearchDocument&#40;&#41;;
     searchDocument.put&#40;&quot;hotelName&quot;, &quot;test&quot;&#41;;
     Response&lt;IndexDocumentsResult&gt; resultResponse = searchClient.mergeDocumentsWithResponse&#40;
         Collections.singletonList&#40;searchDocument&#41;, null, new Context&#40;key1, value1&#41;&#41;;
     System.out.println&#40;&quot;The status code of the response is &quot; + resultResponse.getStatusCode&#40;&#41;&#41;;
     for &#40;IndexingResult indexingResult : resultResponse.getValue&#40;&#41;.getResults&#40;&#41;&#41; &#123;
         System.out.printf&#40;&quot;Does document with key %s merge successfully? %b%n&quot;, indexingResult.getKey&#40;&#41;,
             indexingResult.isSucceeded&#40;&#41;&#41;;
     &#125;
     </pre>
  parameters:
  - description: collection of documents to be merged.
    name: documents
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;?&gt;
  - description: Options that allow specifying document indexing behavior.
    name: options
    type: <xref href="com.azure.search.documents.models.IndexDocumentsOptions?alt=com.azure.search.documents.models.IndexDocumentsOptions&text=IndexDocumentsOptions" data-throw-if-not-resolved="False" />
  - description: additional context that is passed through the Http pipeline during the service call
    name: context
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
  syntax: public Response<IndexDocumentsResult> mergeDocumentsWithResponse(Iterable<?> documents, IndexDocumentsOptions options, Context context)
  returns:
    description: response containing the document index result.
    type: <xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.search.documents.models.IndexDocumentsResult?alt=com.azure.search.documents.models.IndexDocumentsResult&text=IndexDocumentsResult" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.search.documents
artifact: com.azure:azure-search-documents:11.1.0-beta.1
