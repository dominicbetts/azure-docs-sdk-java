### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.collect.Collections2.orderedPermutations*
fullName: com.azure.cosmos.implementation.guava25.collect.Collections2.<E>orderedPermutations
name: <E>orderedPermutations
nameWithType: Collections2.<E>orderedPermutations
members:
- uid: com.azure.cosmos.implementation.guava25.collect.Collections2.<E>orderedPermutations(java.lang.Iterable<E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Collections2.<E>orderedPermutations(Iterable<E> elements)
  name: <E>orderedPermutations(Iterable<E> elements)
  nameWithType: Collections2.<E>orderedPermutations(Iterable<E> elements)
  summary: |-
    Returns a <xref uid="Collection" data-throw-if-not-resolved="false">Collection</xref> of all the permutations of the specified <xref uid="Iterable" data-throw-if-not-resolved="false">Iterable</xref>.

     <p><i>Notes:</i> This is an implementation of the algorithm for Lexicographical Permutations
     Generation, described in Knuth's "The Art of Computer Programming", Volume 4, Chapter 7,
     Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the
     first permutation will be in ascending order, and the last will be in descending order.

     <p>Duplicate elements are considered equal. For example, the list [1, 1] will have only one
     permutation, instead of two. This is why the elements have to implement <xref uid="Comparable" data-throw-if-not-resolved="false">Comparable</xref>.

     <p>An empty iterable has only one permutation, which is an empty list.

     <p>This method is equivalent to <code>Collections2.orderedPermutations(list,
     Ordering.natural())</code>.
  parameters:
  - description: the original iterable whose elements have to be permuted.
    name: elements
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
  syntax: public static Collection<List<E>> <E>orderedPermutations(Iterable<E> elements)
  returns:
    description: |-
      an immutable <xref uid="Collection" data-throw-if-not-resolved="false">Collection</xref> containing all the different permutations of the
           original iterable.
    type: <xref href="java.util.Collection?alt=java.util.Collection&text=Collection" data-throw-if-not-resolved="False" />&lt;<xref href="java.util.List?alt=java.util.List&text=List" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;&gt;
- uid: com.azure.cosmos.implementation.guava25.collect.Collections2.<E>orderedPermutations(java.lang.Iterable<E>,java.util.Comparator<? super E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Collections2.<E>orderedPermutations(Iterable<E> elements, Comparator<? super E> comparator)
  name: <E>orderedPermutations(Iterable<E> elements, Comparator<? super E> comparator)
  nameWithType: Collections2.<E>orderedPermutations(Iterable<E> elements, Comparator<? super E> comparator)
  summary: |-
    Returns a <xref uid="Collection" data-throw-if-not-resolved="false">Collection</xref> of all the permutations of the specified <xref uid="Iterable" data-throw-if-not-resolved="false">Iterable</xref> using
     the specified <xref uid="Comparator" data-throw-if-not-resolved="false">Comparator</xref> for establishing the lexicographical ordering.

     <p>Examples:

     <pre><code>
     for (List<String> perm : orderedPermutations(asList("b", "c", "a"))) {
       println(perm);
     }
     // -> ["a", "b", "c"]
     // -> ["a", "c", "b"]
     // -> ["b", "a", "c"]
     // -> ["b", "c", "a"]
     // -> ["c", "a", "b"]
     // -> ["c", "b", "a"]

     for (List<Integer> perm : orderedPermutations(asList(1, 2, 2, 1))) {
       println(perm);
     }
     // -> [1, 1, 2, 2]
     // -> [1, 2, 1, 2]
     // -> [1, 2, 2, 1]
     // -> [2, 1, 1, 2]
     // -> [2, 1, 2, 1]
     // -> [2, 2, 1, 1]
     </code></pre>

     <p><i>Notes:</i> This is an implementation of the algorithm for Lexicographical Permutations
     Generation, described in Knuth's "The Art of Computer Programming", Volume 4, Chapter 7,
     Section 7.2.1.2. The iteration order follows the lexicographical order. This means that the
     first permutation will be in ascending order, and the last will be in descending order.

     <p>Elements that compare equal are considered equal and no new permutations are created by
     swapping them.

     <p>An empty iterable has only one permutation, which is an empty list.
  parameters:
  - description: the original iterable whose elements have to be permuted.
    name: elements
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
  - description: a comparator for the iterable's elements.
    name: comparator
    type: <xref href="java.util.Comparator?alt=java.util.Comparator&text=Comparator" data-throw-if-not-resolved="False" />&lt;<xref href="? super E?alt=? super E&text=? super E" data-throw-if-not-resolved="False" />&gt;
  syntax: public static Collection<List<E>> <E>orderedPermutations(Iterable<E> elements, Comparator<? super E> comparator)
  returns:
    description: |-
      an immutable <xref uid="Collection" data-throw-if-not-resolved="false">Collection</xref> containing all the different permutations of the
           original iterable.
    type: <xref href="java.util.Collection?alt=java.util.Collection&text=Collection" data-throw-if-not-resolved="False" />&lt;<xref href="java.util.List?alt=java.util.List&text=List" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;&gt;
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.collect
artifact: com.azure:azure-cosmos:4.3.2-beta.2
