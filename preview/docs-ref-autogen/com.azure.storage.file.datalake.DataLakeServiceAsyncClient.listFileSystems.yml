### YamlMime:JavaMember
uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems*
fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems
name: listFileSystems
nameWithType: DataLakeServiceAsyncClient.listFileSystems
members:
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems()
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems()
  name: listFileSystems()
  nameWithType: DataLakeServiceAsyncClient.listFileSystems()
  summary: |-
    Returns a reactive Publisher emitting all the file systems in this account lazily as needed. For more
     information, see the <a href="https://docs.microsoft.com/rest/api/storageservices/list-containers2">Azure Docs</a>.

     <p><strong>Code Samples</strong></p>

     <pre>
     client.listFileSystems&#40;&#41;.subscribe&#40;fileSystem -&gt; System.out.printf&#40;&quot;Name: %s%n&quot;, fileSystem.getName&#40;&#41;&#41;&#41;;
     </pre>
  syntax: public PagedFlux<FileSystemItem> listFileSystems()
  returns:
    description: A reactive response emitting the list of file systems.
    type: <xref href="com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.file.datalake.models.FileSystemItem?alt=com.azure.storage.file.datalake.models.FileSystemItem&text=FileSystemItem" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems(com.azure.storage.file.datalake.models.ListFileSystemsOptions)
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.listFileSystems(ListFileSystemsOptions options)
  name: listFileSystems(ListFileSystemsOptions options)
  nameWithType: DataLakeServiceAsyncClient.listFileSystems(ListFileSystemsOptions options)
  summary: "Returns a reactive Publisher emitting all the file systems in this account lazily as needed. For more\n information, see the <a href=\"https://docs.microsoft.com/rest/api/storageservices/list-containers2\">Azure Docs</a>.\n\n <p><strong>Code Samples</strong></p>\n\n <pre>\n ListFileSystemsOptions options = new ListFileSystemsOptions&#40;&#41;\n     .setPrefix&#40;&quot;fileSystemNamePrefixToMatch&quot;&#41;\n     .setDetails&#40;new FileSystemListDetails&#40;&#41;.setRetrieveMetadata&#40;true&#41;&#41;;\n \n client.listFileSystems&#40;options&#41;.subscribe&#40;fileSystem -&gt; System.out.printf&#40;&quot;Name: %s%n&quot;, fileSystem.getName&#40;&#41;&#41;&#41;;\n </pre>"
  parameters:
  - description: A <xref uid="ListFileSystemsOptions" data-throw-if-not-resolved="false">ListFileSystemsOptions</xref> which specifies what data should be returned by the service.
    name: options
    type: <xref href="com.azure.storage.file.datalake.models.ListFileSystemsOptions?alt=com.azure.storage.file.datalake.models.ListFileSystemsOptions&text=ListFileSystemsOptions" data-throw-if-not-resolved="False" />
  syntax: public PagedFlux<FileSystemItem> listFileSystems(ListFileSystemsOptions options)
  returns:
    description: A reactive response emitting the list of file systems.
    type: <xref href="com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.file.datalake.models.FileSystemItem?alt=com.azure.storage.file.datalake.models.FileSystemItem&text=FileSystemItem" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.storage.file.datalake
artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
