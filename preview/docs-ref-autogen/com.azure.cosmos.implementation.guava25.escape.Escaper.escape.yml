### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.escape.Escaper.escape*
fullName: com.azure.cosmos.implementation.guava25.escape.Escaper.escape
name: escape
nameWithType: Escaper.escape
members:
- uid: com.azure.cosmos.implementation.guava25.escape.Escaper.escape(java.lang.String)
  fullName: com.azure.cosmos.implementation.guava25.escape.Escaper.escape(String string)
  name: escape(String string)
  nameWithType: Escaper.escape(String string)
  summary: |-
    Returns the escaped form of a given literal string.

     <p>Note that this method may treat input characters differently depending on the specific
     escaper implementation.

     <ul>
       <li><xref uid="UnicodeEscaper" data-throw-if-not-resolved="false">UnicodeEscaper</xref> handles <a href="http://en.wikipedia.org/wiki/UTF-16">UTF-16</a>
           correctly, including surrogate character pairs. If the input is badly formed the escaper
           should throw <xref uid="IllegalArgumentException" data-throw-if-not-resolved="false">IllegalArgumentException</xref>.
       <li><xref uid="CharEscaper" data-throw-if-not-resolved="false">CharEscaper</xref> handles Java characters independently and does not verify the input
           for well formed characters. A <code>CharEscaper</code> should not be used in situations where
           input is not guaranteed to be restricted to the Basic Multilingual Plane (BMP).
     </ul>
  parameters:
  - description: the literal string to be escaped
    name: string
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  syntax: public abstract String escape(String string)
  returns:
    description: the escaped form of <code>string</code>
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.escape
artifact: com.azure:azure-cosmos:4.3.2-beta.2
