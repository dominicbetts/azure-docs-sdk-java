### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.collect.Iterables.cycle*
fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle
name: <T>cycle
nameWithType: Iterables.<T>cycle
members:
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle(T...)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle(T[] elements)
  name: <T>cycle(T[] elements)
  nameWithType: Iterables.<T>cycle(T[] elements)
  summary: |-
    Returns an iterable whose iterators cycle indefinitely over the provided elements.

     <p>After <code>remove</code> is invoked on a generated iterator, the removed element will no longer
     appear in either that iterator or any other iterator created from the same source iterable.
     That is, this method behaves exactly as <code>Iterables.cycle(Lists.newArrayList(elements))</code>.
     The iterator's <code>hasNext</code> method returns <code>true</code> until all of the original elements
     have been removed.

     <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You
     should use an explicit <code>break</code> or be certain that you will eventually remove all the
     elements.

     <p>To cycle over the elements <code>n</code> times, use the following: <code>
     Iterables.concat(Collections.nCopies(n, Arrays.asList(elements)))</code>

     <p><b>Java 8 users:</b> If passing a single element <code>e</code>, the <code>Stream</code> equivalent of
     this method is <code>Stream.generate(() -> e)</code>. Otherwise, put the elements in a collection
     and use <code>Stream.generate(() -> collection).flatMap(Collection::stream)</code>.
  parameters:
  - name: elements
    type: <xref href="T?alt=T&text=T" data-throw-if-not-resolved="False" />[]
  syntax: public static Iterable<T> <T>cycle(T[] elements)
  returns:
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="T?alt=T&text=T" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle(java.lang.Iterable<T>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>cycle(Iterable<T> iterable)
  name: <T>cycle(Iterable<T> iterable)
  nameWithType: Iterables.<T>cycle(Iterable<T> iterable)
  summary: |-
    Returns an iterable whose iterators cycle indefinitely over the elements of <code>iterable</code>.

     <p>That iterator supports <code>remove()</code> if <code>iterable.iterator()</code> does. After <code>
     remove()</code> is called, subsequent cycles omit the removed element, which is no longer in <code>
     iterable</code>. The iterator's <code>hasNext()</code> method returns <code>true</code> until <code>iterable</code>
     is empty.

     <p><b>Warning:</b> Typical uses of the resulting iterator may produce an infinite loop. You
     should use an explicit <code>break</code> or be certain that you will eventually remove all the
     elements.

     <p>To cycle over the iterable <code>n</code> times, use the following: <code>
     Iterables.concat(Collections.nCopies(n, iterable))</code>

     <p><b>Java 8 users:</b> The <code>Stream</code> equivalent of this method is <code>
     Stream.generate(() -> iterable).flatMap(Streams::stream)</code>.
  parameters:
  - name: iterable
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="T?alt=T&text=T" data-throw-if-not-resolved="False" />&gt;
  syntax: public static Iterable<T> <T>cycle(Iterable<T> iterable)
  returns:
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="T?alt=T&text=T" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.collect
artifact: com.azure:azure-cosmos:4.3.2-beta.2
