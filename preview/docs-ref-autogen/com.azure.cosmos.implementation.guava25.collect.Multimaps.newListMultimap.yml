### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.collect.Multimaps.newListMultimap*
fullName: com.azure.cosmos.implementation.guava25.collect.Multimaps.<K,V>newListMultimap
name: <K,V>newListMultimap
nameWithType: Multimaps.<K,V>newListMultimap
members:
- uid: com.azure.cosmos.implementation.guava25.collect.Multimaps.<K,V>newListMultimap(java.util.Map<K,java.util.Collection<V>>,com.azure.cosmos.implementation.guava25.base.Supplier<? extends java.util.List<V>>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multimaps.<K,V>newListMultimap(Map<K,Collection<V>> map, Supplier<? extends List<V>> factory)
  name: <K,V>newListMultimap(Map<K,Collection<V>> map, Supplier<? extends List<V>> factory)
  nameWithType: Multimaps.<K,V>newListMultimap(Map<K,Collection<V>> map, Supplier<? extends List<V>> factory)
  summary: |-
    Creates a new <code>ListMultimap</code> that uses the provided map and factory. It can generate a
     multimap based on arbitrary <xref uid="Map" data-throw-if-not-resolved="false">Map</xref> and <xref uid="List" data-throw-if-not-resolved="false">List</xref> classes.

     <p>The <code>factory</code>-generated and <code>map</code> classes determine the multimap iteration
     order. They also specify the behavior of the <code>equals</code>, <code>hashCode</code>, and <code>
     toString</code> methods for the multimap and its returned views. The multimap's <code>get</code>, <code>
     removeAll</code>, and <code>replaceValues</code> methods return <code>RandomAccess</code> lists if the factory
     does. However, the multimap's <code>get</code> method returns instances of a different class than
     does <code>factory.get()</code>.

     <p>The multimap is serializable if <code>map</code>, <code>factory</code>, the lists generated by <code>
     factory</code>, and the multimap contents are all serializable.

     <p>The multimap is not threadsafe when any concurrent operations update the multimap, even if
     <code>map</code> and the instances generated by <code>factory</code> are. Concurrent read operations will
     work correctly. To allow concurrent update operations, wrap the multimap with a call to <xref uid="#synchronizedListMultimap" data-throw-if-not-resolved="false">#synchronizedListMultimap</xref>.

     <p>Call this method only when the simpler methods <xref uid="ArrayListMultimap#create()" data-throw-if-not-resolved="false">ArrayListMultimap#create()</xref> and <xref uid="LinkedListMultimap#create()" data-throw-if-not-resolved="false">LinkedListMultimap#create()</xref> won't suffice.

     <p>Note: the multimap assumes complete ownership over of <code>map</code> and the lists returned by
     <code>factory</code>. Those objects should not be manually updated, they should be empty when
     provided, and they should not use soft, weak, or phantom references.
  parameters:
  - description: place to store the mapping from each key to its corresponding values
    name: map
    type: <xref href="java.util.Map?alt=java.util.Map&text=Map" data-throw-if-not-resolved="False" />&lt;<xref href="K?alt=K&text=K" data-throw-if-not-resolved="False" />,<xref href="java.util.Collection?alt=java.util.Collection&text=Collection" data-throw-if-not-resolved="False" />&lt;<xref href="V?alt=V&text=V" data-throw-if-not-resolved="False" />&gt;&gt;
  - description: supplier of new, empty lists that will each hold all values for a given key
    name: factory
    type: <xref href="com.azure.cosmos.implementation.guava25.base.Supplier?alt=com.azure.cosmos.implementation.guava25.base.Supplier&text=Supplier" data-throw-if-not-resolved="False" />&lt;<xref href="? extends java.util.List?alt=? extends java.util.List&text=List" data-throw-if-not-resolved="False" />&lt;<xref href="V?alt=V&text=V" data-throw-if-not-resolved="False" />&gt;&gt;
  syntax: public static ListMultimap<K,V> <K,V>newListMultimap(Map<K,Collection<V>> map, Supplier<? extends List<V>> factory)
  returns:
    type: <xref href="com.azure.cosmos.implementation.guava25.collect.ListMultimap?alt=com.azure.cosmos.implementation.guava25.collect.ListMultimap&text=ListMultimap" data-throw-if-not-resolved="False" />&lt;<xref href="K?alt=K&text=K" data-throw-if-not-resolved="False" />,<xref href="V?alt=V&text=V" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.collect
artifact: com.azure:azure-cosmos:4.3.2-beta.2
