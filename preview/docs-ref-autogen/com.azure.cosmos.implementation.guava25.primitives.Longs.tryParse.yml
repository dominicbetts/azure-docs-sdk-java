### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.primitives.Longs.tryParse*
fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.tryParse
name: tryParse
nameWithType: Longs.tryParse
members:
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.tryParse(java.lang.String)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.tryParse(String string)
  name: tryParse(String string)
  nameWithType: Longs.tryParse(String string)
  summary: |-
    Parses the specified string as a signed decimal long value. The ASCII character <code>'-'</code> (
     <code>'&#92;u002D'</code>) is recognized as the minus sign.

     <p>Unlike <xref uid="Long#parseLong(String)" data-throw-if-not-resolved="false">Long#parseLong(String)</xref>, this method returns <code>null</code> instead of throwing
     an exception if parsing fails. Additionally, this method only accepts ASCII digits, and returns
     <code>null</code> if non-ASCII digits are present in the string.

     <p>Note that strings prefixed with ASCII <code>'+'</code> are rejected, even under JDK 7, despite
     the change to <xref uid="Long#parseLong(String)" data-throw-if-not-resolved="false">Long#parseLong(String)</xref> for that version.
  parameters:
  - description: the string representation of a long value
    name: string
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  syntax: public static Long tryParse(String string)
  returns:
    description: |-
      the long value represented by <code>string</code>, or <code>null</code> if <code>string</code> has a
           length of zero or cannot be parsed as a long value
    type: <xref href="java.lang.Long?alt=java.lang.Long&text=Long" data-throw-if-not-resolved="False" />
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.tryParse(java.lang.String,int)
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.tryParse(String string, int radix)
  name: tryParse(String string, int radix)
  nameWithType: Longs.tryParse(String string, int radix)
  summary: |-
    Parses the specified string as a signed long value using the specified radix. The ASCII
     character <code>'-'</code> (<code>'&#92;u002D'</code>) is recognized as the minus sign.

     <p>Unlike <xref uid="Long#parseLong(String, int)" data-throw-if-not-resolved="false">Long#parseLong(String, int)</xref>, this method returns <code>null</code> instead of
     throwing an exception if parsing fails. Additionally, this method only accepts ASCII digits,
     and returns <code>null</code> if non-ASCII digits are present in the string.

     <p>Note that strings prefixed with ASCII <code>'+'</code> are rejected, even under JDK 7, despite
     the change to <xref uid="Long#parseLong(String, int)" data-throw-if-not-resolved="false">Long#parseLong(String, int)</xref> for that version.
  parameters:
  - description: the string representation of an long value
    name: string
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: the radix to use when parsing
    name: radix
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False" />
  syntax: public static Long tryParse(String string, int radix)
  returns:
    description: |-
      the long value represented by <code>string</code> using <code>radix</code>, or <code>null</code> if
           <code>string</code> has a length of zero or cannot be parsed as a long value
    type: <xref href="java.lang.Long?alt=java.lang.Long&text=Long" data-throw-if-not-resolved="False" />
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.primitives
artifact: com.azure:azure-cosmos:4.3.2-beta.2
