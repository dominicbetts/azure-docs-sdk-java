### YamlMime:JavaType
uid: com.azure.cosmos.implementation.guava25.base.Splitter
fullName: com.azure.cosmos.implementation.guava25.base.Splitter
name: Splitter
nameWithType: Splitter
summary: |-
  Extracts non-overlapping substrings from an input string, typically by recognizing appearances of a *separator* sequence. This separator can be specified as a single <xref uid="com.azure.cosmos.implementation.guava25.base.Splitter.on*" data-throw-if-not-resolved="false">character</xref>, fixed <xref uid="com.azure.cosmos.implementation.guava25.base.Splitter.on*" data-throw-if-not-resolved="false">string</xref>, <xref uid="com.azure.cosmos.implementation.guava25.base.Splitter.onPattern*" data-throw-if-not-resolved="false">regular expression</xref> or <xref uid="com.azure.cosmos.implementation.guava25.base.Splitter.on*" data-throw-if-not-resolved="false">CharMatcher</xref> instance. Or, instead of using a separator at all, a splitter can extract adjacent substrings of a given <xref uid="com.azure.cosmos.implementation.guava25.base.Splitter.fixedLength*" data-throw-if-not-resolved="false">fixed length</xref>.

  For example, this expression:

  ```java
  Splitter.on(',').split("foo,bar,qux")
  ```

  ... produces an `Iterable` containing `"foo"`, `"bar"` and `"qux"`, in that order.

  By default, `Splitter`'s behavior is simplistic and unassuming. The following expression:

  ```java
  Splitter.on(',').split(" foo,,,  bar ,")
  ```

  ... yields the substrings `[" foo", "", "", " bar ", ""]`. If this is not the desired behavior, use configuration methods to obtain a *new* splitter instance with modified behavior:

  ```java
  private static final Splitter MY_SPLITTER = Splitter.on(',')
       .trimResults()
       .omitEmptyStrings();
  ```

  Now `MY_SPLITTER.split("foo,,, bar ,")` returns just `["foo", "bar"]`. Note that the order in which these configuration methods are called is never significant.

  **Warning:** Splitter instances are immutable. Invoking a configuration method has no effect on the receiving instance; you must store and use the new splitter instance it returns instead.

  ```java
  // Do NOT do this
   Splitter splitter = Splitter.on('/');
   splitter.trimResults(); // does nothing!
   return splitter.split("wrong / wrong / wrong");
  ```

  For separator-based splitters that do not use `omitEmptyStrings`, an input string containing `n` occurrences of the separator naturally yields an iterable of size `n + 1`. So if the separator does not occur anywhere in the input, a single substring is returned containing the entire input. Consequently, all splitters split the empty string to `[""]` (note: even fixed-length splitters).

  Splitter instances are thread-safe immutable, and are therefore safe to store as `static final` constants.

  The <xref uid="com.azure.cosmos.implementation.guava25.base.Joiner" data-throw-if-not-resolved="false">Joiner</xref> class provides the inverse operation to splitting, but note that a round-trip between the two should be assumed to be lossy.

  See the Guava User Guide article on [`Splitter`][Splitter].


  [Splitter]: https://github.com/google/guava/wiki/StringsExplained#splitter
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False" />
inheritedMembers:
- java.lang.Object.clone()
- java.lang.Object.equals(java.lang.Object)
- java.lang.Object.finalize()
- java.lang.Object.getClass()
- java.lang.Object.hashCode()
- java.lang.Object.notify()
- java.lang.Object.notifyAll()
- java.lang.Object.toString()
- java.lang.Object.wait()
- java.lang.Object.wait(long)
- java.lang.Object.wait(long,int)
syntax: public final class Splitter
methods:
- com.azure.cosmos.implementation.guava25.base.Splitter.fixedLength(int)
- com.azure.cosmos.implementation.guava25.base.Splitter.limit(int)
- com.azure.cosmos.implementation.guava25.base.Splitter.omitEmptyStrings()
- com.azure.cosmos.implementation.guava25.base.Splitter.on(char)
- com.azure.cosmos.implementation.guava25.base.Splitter.on(com.azure.cosmos.implementation.guava25.base.CharMatcher)
- com.azure.cosmos.implementation.guava25.base.Splitter.on(java.lang.String)
- com.azure.cosmos.implementation.guava25.base.Splitter.on(java.util.regex.Pattern)
- com.azure.cosmos.implementation.guava25.base.Splitter.onPattern(java.lang.String)
- com.azure.cosmos.implementation.guava25.base.Splitter.split(java.lang.CharSequence)
- com.azure.cosmos.implementation.guava25.base.Splitter.splitToList(java.lang.CharSequence)
- com.azure.cosmos.implementation.guava25.base.Splitter.trimResults()
- com.azure.cosmos.implementation.guava25.base.Splitter.trimResults(com.azure.cosmos.implementation.guava25.base.CharMatcher)
- com.azure.cosmos.implementation.guava25.base.Splitter.withKeyValueSeparator(char)
- com.azure.cosmos.implementation.guava25.base.Splitter.withKeyValueSeparator(com.azure.cosmos.implementation.guava25.base.Splitter)
- com.azure.cosmos.implementation.guava25.base.Splitter.withKeyValueSeparator(java.lang.String)
type: class
metadata: {}
package: com.azure.cosmos.implementation.guava25.base
artifact: com.azure:azure-cosmos:4.3.2-beta.2
