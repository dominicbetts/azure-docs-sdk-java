### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.base.Splitter.limit*
fullName: com.azure.cosmos.implementation.guava25.base.Splitter.limit
name: limit
nameWithType: Splitter.limit
members:
- uid: com.azure.cosmos.implementation.guava25.base.Splitter.limit(int)
  fullName: com.azure.cosmos.implementation.guava25.base.Splitter.limit(int limit)
  name: limit(int limit)
  nameWithType: Splitter.limit(int limit)
  summary: |-
    Returns a splitter that behaves equivalently to <code>this</code> splitter but stops splitting after
     it reaches the limit. The limit defines the maximum number of items returned by the iterator,
     or the maximum size of the list returned by <xref uid="#splitToList" data-throw-if-not-resolved="false">#splitToList</xref>.

     <p>For example, <code>Splitter.on(',').limit(3).split("a,b,c,d")</code> returns an iterable
     containing <code>["a", "b", "c,d"]</code>. When omitting empty strings, the omitted strings do not
     count. Hence, <code>Splitter.on(',').limit(3).omitEmptyStrings().split("a,,,b,,,c,d")</code> returns
     an iterable containing <code>["a", "b", "c,d"</code>. When trim is requested, all entries are
     trimmed, including the last. Hence <code>Splitter.on(',').limit(3).trimResults().split(" a , b
     , c , d ")</code> results in <code>["a", "b", "c , d"]</code>.
  parameters:
  - description: the maximum number of items returned
    name: limit
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False" />
  syntax: public Splitter limit(int limit)
  returns:
    description: a splitter with the desired configuration
    type: <xref href="com.azure.cosmos.implementation.guava25.base.Splitter?alt=com.azure.cosmos.implementation.guava25.base.Splitter&text=Splitter" data-throw-if-not-resolved="False" />
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.base
artifact: com.azure:azure-cosmos:4.3.2-beta.2
