### YamlMime:JavaMember
uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockListWithResponse*
fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockListWithResponse
name: commitBlockListWithResponse
nameWithType: BlockBlobAsyncClient.commitBlockListWithResponse
members:
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockListWithResponse(com.azure.storage.blob.options.BlockBlobCommitBlockListOptions)
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockListWithResponse(BlockBlobCommitBlockListOptions options)
  name: commitBlockListWithResponse(BlockBlobCommitBlockListOptions options)
  nameWithType: BlockBlobAsyncClient.commitBlockListWithResponse(BlockBlobCommitBlockListOptions options)
  summary: "Writes a blob by specifying the list of block IDs that are to make up the blob. In order to be written as part\n of a blob, a block must have been successfully written to the server in a prior stageBlock operation. You can\n call commitBlockList to update a blob by uploading only those blocks that have changed, then committing the new\n and existing blocks together. Any blocks not specified in the block list and permanently deleted. For more\n information, see the\n <a href=\"https://docs.microsoft.com/rest/api/storageservices/put-block-list\">Azure Docs</a>.\n <p>\n To avoid overwriting, pass \"*\" to <xref uid=\"BlobRequestConditions#setIfNoneMatch(String)\" data-throw-if-not-resolved=\"false\">BlobRequestConditions#setIfNoneMatch(String)</xref>.\n\n <p><strong>Code Samples</strong></p>\n\n <pre>\n BlobHttpHeaders headers = new BlobHttpHeaders&#40;&#41;\n     .setContentMd5&#40;&quot;data&quot;.getBytes&#40;StandardCharsets.UTF_8&#41;&#41;\n     .setContentLanguage&#40;&quot;en-US&quot;&#41;\n     .setContentType&#40;&quot;binary&quot;&#41;;\n \n Map&lt;String, String&gt; metadata = Collections.singletonMap&#40;&quot;metadata&quot;, &quot;value&quot;&#41;;\n Map&lt;String, String&gt; tags = Collections.singletonMap&#40;&quot;tag&quot;, &quot;value&quot;&#41;;\n BlobRequestConditions requestConditions = new BlobRequestConditions&#40;&#41;\n     .setLeaseId&#40;leaseId&#41;\n     .setIfUnmodifiedSince&#40;OffsetDateTime.now&#40;&#41;.minusDays&#40;3&#41;&#41;;\n client.commitBlockListWithResponse&#40;new BlockBlobCommitBlockListOptions&#40;Collections.singletonList&#40;base64BlockID&#41;&#41;\n     .setHeaders&#40;headers&#41;.setMetadata&#40;metadata&#41;.setTags&#40;tags&#41;.setTier&#40;AccessTier.HOT&#41;\n     .setRequestConditions&#40;requestConditions&#41;&#41;\n     .subscribe&#40;response -&gt;\n     System.out.printf&#40;&quot;Committing block list completed with status %d%n&quot;, response.getStatusCode&#40;&#41;&#41;&#41;;\n </pre>"
  parameters:
  - description: <xref uid="BlockBlobCommitBlockListOptions" data-throw-if-not-resolved="false">BlockBlobCommitBlockListOptions</xref>
    name: options
    type: <xref href="com.azure.storage.blob.options.BlockBlobCommitBlockListOptions?alt=com.azure.storage.blob.options.BlockBlobCommitBlockListOptions&text=BlockBlobCommitBlockListOptions" data-throw-if-not-resolved="False" />
  syntax: public Mono<Response<BlockBlobItem>> commitBlockListWithResponse(BlockBlobCommitBlockListOptions options)
  returns:
    description: A reactive response containing the information of the block blob.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.blob.models.BlockBlobItem?alt=com.azure.storage.blob.models.BlockBlobItem&text=BlockBlobItem" data-throw-if-not-resolved="False" />&gt;&gt;
- uid: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockListWithResponse(java.util.List<java.lang.String>,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,com.azure.storage.blob.models.BlobRequestConditions)
  fullName: com.azure.storage.blob.specialized.BlockBlobAsyncClient.commitBlockListWithResponse(List<String> base64BlockIds, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)
  name: commitBlockListWithResponse(List<String> base64BlockIds, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)
  nameWithType: BlockBlobAsyncClient.commitBlockListWithResponse(List<String> base64BlockIds, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)
  summary: "Writes a blob by specifying the list of block IDs that are to make up the blob. In order to be written as part\n of a blob, a block must have been successfully written to the server in a prior stageBlock operation. You can\n call commitBlockList to update a blob by uploading only those blocks that have changed, then committing the new\n and existing blocks together. Any blocks not specified in the block list and permanently deleted. For more\n information, see the\n <a href=\"https://docs.microsoft.com/rest/api/storageservices/put-block-list\">Azure Docs</a>.\n <p>\n To avoid overwriting, pass \"*\" to <xref uid=\"BlobRequestConditions#setIfNoneMatch(String)\" data-throw-if-not-resolved=\"false\">BlobRequestConditions#setIfNoneMatch(String)</xref>.\n\n <p><strong>Code Samples</strong></p>\n\n <pre>\n BlobHttpHeaders headers = new BlobHttpHeaders&#40;&#41;\n     .setContentMd5&#40;&quot;data&quot;.getBytes&#40;StandardCharsets.UTF_8&#41;&#41;\n     .setContentLanguage&#40;&quot;en-US&quot;&#41;\n     .setContentType&#40;&quot;binary&quot;&#41;;\n \n Map&lt;String, String&gt; metadata = Collections.singletonMap&#40;&quot;metadata&quot;, &quot;value&quot;&#41;;\n BlobRequestConditions requestConditions = new BlobRequestConditions&#40;&#41;\n     .setLeaseId&#40;leaseId&#41;\n     .setIfUnmodifiedSince&#40;OffsetDateTime.now&#40;&#41;.minusDays&#40;3&#41;&#41;;\n client.commitBlockListWithResponse&#40;Collections.singletonList&#40;base64BlockID&#41;, headers, metadata,\n     AccessTier.HOT, requestConditions&#41;.subscribe&#40;response -&gt;\n         System.out.printf&#40;&quot;Committing block list completed with status %d%n&quot;, response.getStatusCode&#40;&#41;&#41;&#41;;\n </pre>"
  parameters:
  - description: A list of base64 encode <code>String</code>s that specifies the block IDs to be committed.
    name: base64BlockIds
    type: <xref href="java.util.List?alt=java.util.List&text=List" data-throw-if-not-resolved="False" />&lt;<xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />&gt;
  - description: <xref uid="BlobHttpHeaders" data-throw-if-not-resolved="false">BlobHttpHeaders</xref>
    name: headers
    type: <xref href="com.azure.storage.blob.models.BlobHttpHeaders?alt=com.azure.storage.blob.models.BlobHttpHeaders&text=BlobHttpHeaders" data-throw-if-not-resolved="False" />
  - description: Metadata to associate with the blob.
    name: metadata
    type: <xref href="java.util.Map?alt=java.util.Map&text=Map" data-throw-if-not-resolved="False" />&lt;<xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />,<xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />&gt;
  - description: <xref uid="AccessTier" data-throw-if-not-resolved="false">AccessTier</xref> for the destination blob.
    name: tier
    type: <xref href="com.azure.storage.blob.models.AccessTier?alt=com.azure.storage.blob.models.AccessTier&text=AccessTier" data-throw-if-not-resolved="False" />
  - description: <xref uid="BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    name: requestConditions
    type: <xref href="com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions" data-throw-if-not-resolved="False" />
  syntax: public Mono<Response<BlockBlobItem>> commitBlockListWithResponse(List<String> base64BlockIds, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, BlobRequestConditions requestConditions)
  returns:
    description: A reactive response containing the information of the block blob.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.blob.models.BlockBlobItem?alt=com.azure.storage.blob.models.BlockBlobItem&text=BlockBlobItem" data-throw-if-not-resolved="False" />&gt;&gt;
type: method
metadata: {}
package: com.azure.storage.blob.specialized
artifact: com.azure:azure-storage-blob:12.8.0-beta.1
