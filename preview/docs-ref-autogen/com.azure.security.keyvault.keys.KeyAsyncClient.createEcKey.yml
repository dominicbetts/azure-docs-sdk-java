### YamlMime:JavaMember
uid: com.azure.security.keyvault.keys.KeyAsyncClient.createEcKey*
fullName: com.azure.security.keyvault.keys.KeyAsyncClient.createEcKey
name: createEcKey
nameWithType: KeyAsyncClient.createEcKey
members:
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.createEcKey(com.azure.security.keyvault.keys.models.CreateEcKeyOptions)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.createEcKey(CreateEcKeyOptions createEcKeyOptions)
  name: createEcKey(CreateEcKeyOptions createEcKeyOptions)
  nameWithType: KeyAsyncClient.createEcKey(CreateEcKeyOptions createEcKeyOptions)
  summary: |-
    Creates a new Ec key and stores it in the key vault. The create Ec key operation can be used to create any Ec key
     type in key vault. If the named key already exists, Azure Key Vault creates a new version of the key. It requires
     the <code>keys/create</code> permission.

     <p>The <xref uid="CreateEcKeyOptions" data-throw-if-not-resolved="false">CreateEcKeyOptions</xref> parameter is required. The <xref uid="CreateEcKeyOptions#getCurveName()" data-throw-if-not-resolved="false">key curve</xref> can be
     optionally specified. If not specified, default value of <xref uid="KeyCurveName#P_256" data-throw-if-not-resolved="false">P-256</xref> is used by Azure Key
     Vault. The <xref uid="CreateEcKeyOptions#getExpiresOn()" data-throw-if-not-resolved="false">expires</xref> and <xref uid="CreateEcKeyOptions#getNotBefore()" data-throw-if-not-resolved="false">notBefore</xref>
     values are optional. The <xref uid="CreateEcKeyOptions#isEnabled()" data-throw-if-not-resolved="false">enabled</xref> field is set to true by Azure Key Vault,
     if not specified.</p>

     <p>The <xref uid="CreateEcKeyOptions#getKeyType()" data-throw-if-not-resolved="false">keyType</xref> indicates the type of key to create. Possible values include:
     <xref uid="KeyType#EC" data-throw-if-not-resolved="false">EC</xref> and <xref uid="KeyType#EC_HSM" data-throw-if-not-resolved="false">EC-HSM</xref>.</p>

     <p><strong>Code Samples</strong></p>
     <p>Creates a new EC key with P-384 web key curve. The key activates in one day and expires in one year.
     Subscribes to the call asynchronously and prints out the newly created ec key details when a response has been
     received.</p>

     <pre>
     CreateEcKeyOptions createEcKeyOptions = new CreateEcKeyOptions&#40;&quot;keyName&quot;&#41;
         .setCurveName&#40;KeyCurveName.P_384&#41;
         .setNotBefore&#40;OffsetDateTime.now&#40;&#41;.plusDays&#40;1&#41;&#41;
         .setExpiresOn&#40;OffsetDateTime.now&#40;&#41;.plusYears&#40;1&#41;&#41;;
     keyAsyncClient.createEcKey&#40;createEcKeyOptions&#41;
         .subscriberContext&#40;Context.of&#40;key1, value1, key2, value2&#41;&#41;
         .subscribe&#40;keyResponse -&gt;
             System.out.printf&#40;&quot;Key is created with name %s and id %s %n&quot;, keyResponse.getName&#40;&#41;,
                 keyResponse.getId&#40;&#41;&#41;&#41;;
     </pre>
  parameters:
  - description: The key options object containing information about the ec key being created.
    name: createEcKeyOptions
    type: <xref href="com.azure.security.keyvault.keys.models.CreateEcKeyOptions?alt=com.azure.security.keyvault.keys.models.CreateEcKeyOptions&text=CreateEcKeyOptions" data-throw-if-not-resolved="False" />
  syntax: public Mono<KeyVaultKey> createEcKey(CreateEcKeyOptions createEcKeyOptions)
  returns:
    description: A <xref uid="Mono" data-throw-if-not-resolved="false">Mono</xref> containing the <xref uid="KeyVaultKey" data-throw-if-not-resolved="false">created key</xref>.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.security.keyvault.keys.models.KeyVaultKey?alt=com.azure.security.keyvault.keys.models.KeyVaultKey&text=KeyVaultKey" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.security.keyvault.keys
artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
