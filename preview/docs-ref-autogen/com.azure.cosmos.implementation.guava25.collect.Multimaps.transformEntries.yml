### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.collect.Multimaps.transformEntries*
fullName: com.azure.cosmos.implementation.guava25.collect.Multimaps.<K,V1,V2>transformEntries
name: <K,V1,V2>transformEntries
nameWithType: Multimaps.<K,V1,V2>transformEntries
members:
- uid: com.azure.cosmos.implementation.guava25.collect.Multimaps.<K,V1,V2>transformEntries(com.azure.cosmos.implementation.guava25.collect.ListMultimap<K,V1>,com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer<? super K,? super V1,V2>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multimaps.<K,V1,V2>transformEntries(ListMultimap<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)
  name: <K,V1,V2>transformEntries(ListMultimap<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)
  nameWithType: Multimaps.<K,V1,V2>transformEntries(ListMultimap<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)
  summary: |-
    Returns a view of a <code>ListMultimap</code> whose values are derived from the original multimap's
     entries. In contrast to <xref uid="#transformValues(ListMultimap, Function)" data-throw-if-not-resolved="false">#transformValues(ListMultimap, Function)</xref>, this method's
     entry-transformation logic may depend on the key as well as the value.

     <p>All other properties of the transformed multimap, such as iteration order, are left intact.
     For example, the code:

     <pre><code>
     Multimap<String, Integer> multimap =
         ImmutableMultimap.of("a", 1, "a", 4, "b", 6);
     EntryTransformer<String, Integer, String> transformer =
         new EntryTransformer<String, Integer, String>() {
           public String transformEntry(String key, Integer value) {
             return key + value;
           }
         };
     Multimap<String, String> transformed =
         Multimaps.transformEntries(multimap, transformer);
     System.out.println(transformed);
     </code></pre>

     ... prints <code>{"a"=["a1", "a4"], "b"=["b6"]}</code>.

     <p>Changes in the underlying multimap are reflected in this view. Conversely, this view
     supports removal operations, and these are reflected in the underlying multimap.

     <p>It's acceptable for the underlying multimap to contain null keys and null values provided
     that the transformer is capable of accepting null inputs. The transformed multimap might
     contain null values if the transformer sometimes gives a null result.

     <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap
     is.

     <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
     multimap to be a view, but it means that the transformer will be applied many times for bulk
     operations like <xref uid="Multimap#containsValue" data-throw-if-not-resolved="false">Multimap#containsValue</xref> and <xref uid="Object#toString" data-throw-if-not-resolved="false">Object#toString</xref>. For this to perform
     well, <code>transformer</code> should be fast. To avoid lazy evaluation when the returned multimap
     doesn't need to be a view, copy the returned multimap into a new multimap of your choosing.

     <p><b>Warning:</b> This method assumes that for any instance <code>k</code> of <code>
     EntryTransformer</code> key type <code>K</code>, <code>k.equals(k2)</code> implies that <code>k2</code> is also of
     type <code>K</code>. Using an <code>EntryTransformer</code> key type for which this may not hold, such as
     <code>ArrayList</code>, may risk a <code>ClassCastException</code> when calling methods on the
     transformed multimap.
  parameters:
  - name: fromMap
    type: <xref href="com.azure.cosmos.implementation.guava25.collect.ListMultimap?alt=com.azure.cosmos.implementation.guava25.collect.ListMultimap&text=ListMultimap" data-throw-if-not-resolved="False" />&lt;<xref href="K?alt=K&text=K" data-throw-if-not-resolved="False" />,<xref href="V1?alt=V1&text=V1" data-throw-if-not-resolved="False" />&gt;
  - name: transformer
    type: <xref href="com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer?alt=com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer&text=EntryTransformer" data-throw-if-not-resolved="False" />&lt;<xref href="? super K?alt=? super K&text=? super K" data-throw-if-not-resolved="False" />,<xref href="? super V1?alt=? super V1&text=? super V1" data-throw-if-not-resolved="False" />,<xref href="V2?alt=V2&text=V2" data-throw-if-not-resolved="False" />&gt;
  syntax: public static ListMultimap<K,V2> <K,V1,V2>transformEntries(ListMultimap<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)
  returns:
    type: <xref href="com.azure.cosmos.implementation.guava25.collect.ListMultimap?alt=com.azure.cosmos.implementation.guava25.collect.ListMultimap&text=ListMultimap" data-throw-if-not-resolved="False" />&lt;<xref href="K?alt=K&text=K" data-throw-if-not-resolved="False" />,<xref href="V2?alt=V2&text=V2" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.cosmos.implementation.guava25.collect.Multimaps.<K,V1,V2>transformEntries(com.azure.cosmos.implementation.guava25.collect.Multimap<K,V1>,com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer<? super K,? super V1,V2>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multimaps.<K,V1,V2>transformEntries(Multimap<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)
  name: <K,V1,V2>transformEntries(Multimap<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)
  nameWithType: Multimaps.<K,V1,V2>transformEntries(Multimap<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)
  summary: |-
    Returns a view of a multimap whose values are derived from the original multimap's entries. In
     contrast to <xref uid="#transformValues" data-throw-if-not-resolved="false">#transformValues</xref>, this method's entry-transformation logic may depend on
     the key as well as the value.

     <p>All other properties of the transformed multimap, such as iteration order, are left intact.
     For example, the code:

     <pre><code>
     SetMultimap<String, Integer> multimap =
         ImmutableSetMultimap.of("a", 1, "a", 4, "b", -6);
     EntryTransformer<String, Integer, String> transformer =
         new EntryTransformer<String, Integer, String>() {
           public String transformEntry(String key, Integer value) {
              return (value >= 0) ? key : "no" + key;
           }
         };
     Multimap<String, String> transformed =
         Multimaps.transformEntries(multimap, transformer);
     System.out.println(transformed);
     </code></pre>

     ... prints <code>{a=[a, a], b=[nob]}</code>.

     <p>Changes in the underlying multimap are reflected in this view. Conversely, this view
     supports removal operations, and these are reflected in the underlying multimap.

     <p>It's acceptable for the underlying multimap to contain null keys and null values provided
     that the transformer is capable of accepting null inputs. The transformed multimap might
     contain null values if the transformer sometimes gives a null result.

     <p>The returned multimap is not thread-safe or serializable, even if the underlying multimap
     is. The <code>equals</code> and <code>hashCode</code> methods of the returned multimap are meaningless,
     since there is not a definition of <code>equals</code> or <code>hashCode</code> for general collections,
     and <code>get()</code> will return a general <code>Collection</code> as opposed to a <code>List</code> or a
     <code>Set</code>.

     <p>The transformer is applied lazily, invoked when needed. This is necessary for the returned
     multimap to be a view, but it means that the transformer will be applied many times for bulk
     operations like <xref uid="Multimap#containsValue" data-throw-if-not-resolved="false">Multimap#containsValue</xref> and <xref uid="Object#toString" data-throw-if-not-resolved="false">Object#toString</xref>. For this to perform
     well, <code>transformer</code> should be fast. To avoid lazy evaluation when the returned multimap
     doesn't need to be a view, copy the returned multimap into a new multimap of your choosing.

     <p><b>Warning:</b> This method assumes that for any instance <code>k</code> of <code>
     EntryTransformer</code> key type <code>K</code>, <code>k.equals(k2)</code> implies that <code>k2</code> is also of
     type <code>K</code>. Using an <code>EntryTransformer</code> key type for which this may not hold, such as
     <code>ArrayList</code>, may risk a <code>ClassCastException</code> when calling methods on the
     transformed multimap.
  parameters:
  - name: fromMap
    type: <xref href="com.azure.cosmos.implementation.guava25.collect.Multimap?alt=com.azure.cosmos.implementation.guava25.collect.Multimap&text=Multimap" data-throw-if-not-resolved="False" />&lt;<xref href="K?alt=K&text=K" data-throw-if-not-resolved="False" />,<xref href="V1?alt=V1&text=V1" data-throw-if-not-resolved="False" />&gt;
  - name: transformer
    type: <xref href="com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer?alt=com.azure.cosmos.implementation.guava25.collect.Maps.EntryTransformer&text=EntryTransformer" data-throw-if-not-resolved="False" />&lt;<xref href="? super K?alt=? super K&text=? super K" data-throw-if-not-resolved="False" />,<xref href="? super V1?alt=? super V1&text=? super V1" data-throw-if-not-resolved="False" />,<xref href="V2?alt=V2&text=V2" data-throw-if-not-resolved="False" />&gt;
  syntax: public static Multimap<K,V2> <K,V1,V2>transformEntries(Multimap<K,V1> fromMap, Maps.EntryTransformer<? super K,? super V1,V2> transformer)
  returns:
    type: <xref href="com.azure.cosmos.implementation.guava25.collect.Multimap?alt=com.azure.cosmos.implementation.guava25.collect.Multimap&text=Multimap" data-throw-if-not-resolved="False" />&lt;<xref href="K?alt=K&text=K" data-throw-if-not-resolved="False" />,<xref href="V2?alt=V2&text=V2" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.collect
artifact: com.azure:azure-cosmos:4.3.2-beta.2
