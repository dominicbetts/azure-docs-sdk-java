### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.collect.Lists.newArrayList*
fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList
name: <E>newArrayList
nameWithType: Lists.<E>newArrayList
members:
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList()
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList()
  name: <E>newArrayList()
  nameWithType: Lists.<E>newArrayList()
  summary: |-
    Creates a <i>mutable</i>, empty <code>ArrayList</code> instance (for Java 6 and earlier).

     <p><b>Note:</b> if mutability is not required, use <xref uid="ImmutableList#of()" data-throw-if-not-resolved="false">ImmutableList#of()</xref> instead.

     <p><b>Note for Java 7 and later:</b> this method is now unnecessary and should be treated as
     deprecated. Instead, use the <code>ArrayList</code> <xref uid="ArrayList#ArrayList()" data-throw-if-not-resolved="false">constructor</xref>
     directly, taking advantage of the new <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>.
  syntax: public static ArrayList<E> <E>newArrayList()
  returns:
    type: <xref href="java.util.ArrayList?alt=java.util.ArrayList&text=ArrayList" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList(E...)
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList(E[] elements)
  name: <E>newArrayList(E[] elements)
  nameWithType: Lists.<E>newArrayList(E[] elements)
  summary: |-
    Creates a <i>mutable</i> <code>ArrayList</code> instance containing the given elements.

     <p><b>Note:</b> essentially the only reason to use this method is when you will need to add or
     remove elements later. Otherwise, for non-null elements use <xref uid="ImmutableList#of()" data-throw-if-not-resolved="false">ImmutableList#of()</xref> (for
     varargs) or <xref uid="ImmutableList#copyOf(Object[])" data-throw-if-not-resolved="false">ImmutableList#copyOf(Object[])</xref> (for an array) instead. If any elements
     might be null, or you need support for <xref uid="List#set(int, Object)" data-throw-if-not-resolved="false">List#set(int, Object)</xref>, use <xref uid="Arrays#asList" data-throw-if-not-resolved="false">Arrays#asList</xref>.

     <p>Note that even when you do need the ability to add or remove, this method provides only a
     tiny bit of syntactic sugar for <code>newArrayList(</code><xref uid="Arrays#asList" data-throw-if-not-resolved="false">asList</xref><code>
     (...))</code>, or for creating an empty list then calling <xref uid="Collections#addAll" data-throw-if-not-resolved="false">Collections#addAll</xref>. This method is
     not actually very useful and will likely be deprecated in the future.
  parameters:
  - name: elements
    type: <xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />[]
  syntax: public static ArrayList<E> <E>newArrayList(E[] elements)
  returns:
    type: <xref href="java.util.ArrayList?alt=java.util.ArrayList&text=ArrayList" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList(java.lang.Iterable<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList(Iterable<? extends E> elements)
  name: <E>newArrayList(Iterable<? extends E> elements)
  nameWithType: Lists.<E>newArrayList(Iterable<? extends E> elements)
  summary: |-
    Creates a <i>mutable</i> <code>ArrayList</code> instance containing the given elements; a very thin
     shortcut for creating an empty list then calling <xref uid="Iterables#addAll" data-throw-if-not-resolved="false">Iterables#addAll</xref>.

     <p><b>Note:</b> if mutability is not required and the elements are non-null, use <xref uid="ImmutableList#copyOf(Iterable)" data-throw-if-not-resolved="false">ImmutableList#copyOf(Iterable)</xref> instead. (Or, change <code>elements</code> to be a <xref uid="FluentIterable" data-throw-if-not-resolved="false">FluentIterable</xref> and call <code>elements.toList()</code>.)

     <p><b>Note for Java 7 and later:</b> if <code>elements</code> is a <xref uid="Collection" data-throw-if-not-resolved="false">Collection</xref>, you don't
     need this method. Use the <code>ArrayList</code> <xref uid="ArrayList#ArrayList(Collection)" data-throw-if-not-resolved="false">constructor</xref> directly, taking advantage of the new <a href="http://goo.gl/iz2Wi">"diamond"
     syntax</a>.
  parameters:
  - name: elements
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="? extends E?alt=? extends E&text=? extends E" data-throw-if-not-resolved="False" />&gt;
  syntax: public static ArrayList<E> <E>newArrayList(Iterable<? extends E> elements)
  returns:
    type: <xref href="java.util.ArrayList?alt=java.util.ArrayList&text=ArrayList" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList(java.util.Iterator<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Lists.<E>newArrayList(Iterator<? extends E> elements)
  name: <E>newArrayList(Iterator<? extends E> elements)
  nameWithType: Lists.<E>newArrayList(Iterator<? extends E> elements)
  summary: |-
    Creates a <i>mutable</i> <code>ArrayList</code> instance containing the given elements; a very thin
     shortcut for creating an empty list and then calling <xref uid="Iterators#addAll" data-throw-if-not-resolved="false">Iterators#addAll</xref>.

     <p><b>Note:</b> if mutability is not required and the elements are non-null, use <xref uid="ImmutableList#copyOf(Iterator)" data-throw-if-not-resolved="false">ImmutableList#copyOf(Iterator)</xref> instead.
  parameters:
  - name: elements
    type: <xref href="java.util.Iterator?alt=java.util.Iterator&text=Iterator" data-throw-if-not-resolved="False" />&lt;<xref href="? extends E?alt=? extends E&text=? extends E" data-throw-if-not-resolved="False" />&gt;
  syntax: public static ArrayList<E> <E>newArrayList(Iterator<? extends E> elements)
  returns:
    type: <xref href="java.util.ArrayList?alt=java.util.ArrayList&text=ArrayList" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.collect
artifact: com.azure:azure-cosmos:4.3.2-beta.2
