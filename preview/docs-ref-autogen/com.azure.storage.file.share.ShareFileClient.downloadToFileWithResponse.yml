### YamlMime:JavaMember
uid: com.azure.storage.file.share.ShareFileClient.downloadToFileWithResponse*
fullName: com.azure.storage.file.share.ShareFileClient.downloadToFileWithResponse
name: downloadToFileWithResponse
nameWithType: ShareFileClient.downloadToFileWithResponse
members:
- uid: com.azure.storage.file.share.ShareFileClient.downloadToFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareFileRange,com.azure.storage.file.share.models.ShareRequestConditions,java.time.Duration,com.azure.core.util.Context)
  fullName: com.azure.storage.file.share.ShareFileClient.downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, ShareRequestConditions requestConditions, Duration timeout, Context context)
  name: downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, ShareRequestConditions requestConditions, Duration timeout, Context context)
  nameWithType: ShareFileClient.downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, ShareRequestConditions requestConditions, Duration timeout, Context context)
  summary: |-
    Downloads a file from the system, including its metadata and properties into a file specified by the path.

     <p>The file will be created and must not exist, if the file already exists a <xref uid="FileAlreadyExistsException" data-throw-if-not-resolved="false">FileAlreadyExistsException</xref>
     will be thrown.</p>

     <p><strong>Code Samples</strong></p>

     <p>Download the file from 1024 to 2048 bytes to current folder. </p>

     <pre>
     ShareRequestConditions requestConditions = new ShareRequestConditions&#40;&#41;.setLeaseId&#40;leaseId&#41;;
     Response&lt;ShareFileProperties&gt; response =
         fileClient.downloadToFileWithResponse&#40;&quot;somelocalfilepath&quot;, new ShareFileRange&#40;1024, 2047L&#41;,
             requestConditions, Duration.ofSeconds&#40;1&#41;, Context.NONE&#41;;
     if &#40;Files.exists&#40;Paths.get&#40;&quot;somelocalfilepath&quot;&#41;&#41;&#41; &#123;
         System.out.println&#40;&quot;Complete downloading the file with status code &quot; + response.getStatusCode&#40;&#41;&#41;;
     &#125;
     </pre>

     <p>For more information, see the
     <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-file">Azure Docs</a>.</p>
  parameters:
  - description: The path where store the downloaded file
    name: downloadFilePath
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: Optional byte range which returns file data only from the specified range.
    name: range
    type: <xref href="com.azure.storage.file.share.models.ShareFileRange?alt=com.azure.storage.file.share.models.ShareFileRange&text=ShareFileRange" data-throw-if-not-resolved="False" />
  - description: <xref uid="ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    name: requestConditions
    type: <xref href="com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions" data-throw-if-not-resolved="False" />
  - description: |-
      An optional timeout applied to the operation. If a response is not returned before the timeout
       concludes a <xref uid="RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    name: timeout
    type: <xref href="java.time.Duration?alt=java.time.Duration&text=Duration" data-throw-if-not-resolved="False" />
  - description: Additional context that is passed through the Http pipeline during the service call.
    name: context
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
  syntax: public Response<ShareFileProperties> downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, ShareRequestConditions requestConditions, Duration timeout, Context context)
  returns:
    description: The response of the file properties.
    type: <xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.file.share.models.ShareFileProperties?alt=com.azure.storage.file.share.models.ShareFileProperties&text=ShareFileProperties" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.storage.file.share.ShareFileClient.downloadToFileWithResponse(java.lang.String,com.azure.storage.file.share.models.ShareFileRange,java.time.Duration,com.azure.core.util.Context)
  fullName: com.azure.storage.file.share.ShareFileClient.downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, Duration timeout, Context context)
  name: downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, Duration timeout, Context context)
  nameWithType: ShareFileClient.downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, Duration timeout, Context context)
  summary: |-
    Downloads a file from the system, including its metadata and properties into a file specified by the path.

     <p>The file will be created and must not exist, if the file already exists a <xref uid="FileAlreadyExistsException" data-throw-if-not-resolved="false">FileAlreadyExistsException</xref>
     will be thrown.</p>

     <p><strong>Code Samples</strong></p>

     <p>Download the file from 1024 to 2048 bytes to current folder. </p>

     <pre>
     Response&lt;ShareFileProperties&gt; response =
         fileClient.downloadToFileWithResponse&#40;&quot;somelocalfilepath&quot;, new ShareFileRange&#40;1024, 2047L&#41;,
             Duration.ofSeconds&#40;1&#41;, Context.NONE&#41;;
     if &#40;Files.exists&#40;Paths.get&#40;&quot;somelocalfilepath&quot;&#41;&#41;&#41; &#123;
         System.out.println&#40;&quot;Complete downloading the file with status code &quot; + response.getStatusCode&#40;&#41;&#41;;
     &#125;
     </pre>

     <p>For more information, see the
     <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/get-file">Azure Docs</a>.</p>
  parameters:
  - description: The path where store the downloaded file
    name: downloadFilePath
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: Optional byte range which returns file data only from the specified range.
    name: range
    type: <xref href="com.azure.storage.file.share.models.ShareFileRange?alt=com.azure.storage.file.share.models.ShareFileRange&text=ShareFileRange" data-throw-if-not-resolved="False" />
  - description: |-
      An optional timeout applied to the operation. If a response is not returned before the timeout
       concludes a <xref uid="RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> will be thrown.
    name: timeout
    type: <xref href="java.time.Duration?alt=java.time.Duration&text=Duration" data-throw-if-not-resolved="False" />
  - description: Additional context that is passed through the Http pipeline during the service call.
    name: context
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
  syntax: public Response<ShareFileProperties> downloadToFileWithResponse(String downloadFilePath, ShareFileRange range, Duration timeout, Context context)
  returns:
    description: The response of the file properties.
    type: <xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.file.share.models.ShareFileProperties?alt=com.azure.storage.file.share.models.ShareFileProperties&text=ShareFileProperties" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.storage.file.share
artifact: com.azure:azure-storage-file-share:12.6.0-beta.1
