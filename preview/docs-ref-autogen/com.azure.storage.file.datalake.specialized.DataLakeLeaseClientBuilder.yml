### YamlMime:JavaType
uid: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
fullName: com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder
name: DataLakeLeaseClientBuilder
nameWithType: DataLakeLeaseClientBuilder
summary: |-
  This class provides a fluent builder API to help aid the configuration and instantiation of Storage Lease clients. Lease clients are able to interact with both file system and path clients and act as a supplement client. A new instance of <xref uid="com.azure.storage.file.datalake.specialized.DataLakeLeaseClient" data-throw-if-not-resolved="false">DataLakeLeaseClient</xref> and <xref uid="com.azure.storage.file.datalake.specialized.DataLakeLeaseAsyncClient" data-throw-if-not-resolved="false">DataLakeLeaseAsyncClient</xref> are constructed every time <xref uid="com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildClient*" data-throw-if-not-resolved="false">buildClient</xref> and <xref uid="com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildAsyncClient*" data-throw-if-not-resolved="false">buildAsyncClient</xref> are called respectively.

  When a client is instantiated and a <xref uid="com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.leaseId*" data-throw-if-not-resolved="false">leaseId</xref> hasn't been set a <xref uid="" data-throw-if-not-resolved="false">UUID</xref> will be used as the lease identifier.

  **Instantiating LeaseClients**

  ```java
  DataLakeLeaseClient dataLakeLeaseClient = new DataLakeLeaseClientBuilder()
       .fileClient(fileClient)
       .leaseId(leaseId)
       .buildClient();
  ```

  ```java
  DataLakeLeaseClient dataLakeLeaseClient = new DataLakeLeaseClientBuilder()
       .directoryClient(directoryClient)
       .leaseId(leaseId)
       .buildClient();
  ```

  ```java
  DataLakeLeaseClient dataLakeLeaseClient = new DataLakeLeaseClientBuilder()
       .fileSystemClient(dataLakeFileSystemClient)
       .leaseId(leaseId)
       .buildClient();
  ```

  **Instantiating LeaseAsyncClients**

  ```java
  DataLakeLeaseAsyncClient dataLakeLeaseAsyncClient = new DataLakeLeaseClientBuilder()
       .fileAsyncClient(fileAsyncClient)
       .leaseId(leaseId)
       .buildAsyncClient();
  ```

  ```java
  DataLakeLeaseAsyncClient dataLakeLeaseAsyncClient = new DataLakeLeaseClientBuilder()
       .directoryAsyncClient(directoryAsyncClient)
       .leaseId(leaseId)
       .buildAsyncClient();
  ```

  ```java
  DataLakeLeaseAsyncClient dataLakeLeaseAsyncClient = new DataLakeLeaseClientBuilder()
       .fileSystemAsyncClient(dataLakeFileSystemAsyncClient)
       .leaseId(leaseId)
       .buildAsyncClient();
  ```
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False" />
inheritedMembers:
- java.lang.Object.clone()
- java.lang.Object.equals(java.lang.Object)
- java.lang.Object.finalize()
- java.lang.Object.getClass()
- java.lang.Object.hashCode()
- java.lang.Object.notify()
- java.lang.Object.notifyAll()
- java.lang.Object.toString()
- java.lang.Object.wait()
- java.lang.Object.wait(long)
- java.lang.Object.wait(long,int)
syntax: public final class DataLakeLeaseClientBuilder
constructors:
- com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.DataLakeLeaseClientBuilder()
methods:
- com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildAsyncClient()
- com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.buildClient()
- com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.directoryAsyncClient(com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient)
- com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.directoryClient(com.azure.storage.file.datalake.DataLakeDirectoryClient)
- com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileAsyncClient(com.azure.storage.file.datalake.DataLakeFileAsyncClient)
- com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileClient(com.azure.storage.file.datalake.DataLakeFileClient)
- com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileSystemAsyncClient(com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient)
- com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.fileSystemClient(com.azure.storage.file.datalake.DataLakeFileSystemClient)
- com.azure.storage.file.datalake.specialized.DataLakeLeaseClientBuilder.leaseId(java.lang.String)
type: class
metadata: {}
package: com.azure.storage.file.datalake.specialized
artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
