### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.primitives.Longs.fromByteArray*
fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.fromByteArray
name: fromByteArray
nameWithType: Longs.fromByteArray
members:
- uid: com.azure.cosmos.implementation.guava25.primitives.Longs.fromByteArray(byte[])
  fullName: com.azure.cosmos.implementation.guava25.primitives.Longs.fromByteArray(byte[] bytes)
  name: fromByteArray(byte[] bytes)
  nameWithType: Longs.fromByteArray(byte[] bytes)
  summary: |-
    Returns the <code>long</code> value whose big-endian representation is stored in the first 8 bytes
     of <code>bytes</code>; equivalent to <code>ByteBuffer.wrap(bytes).getLong()</code>. For example, the
     input byte array <code>{0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19}</code> would yield the
     <code>long</code> value <code>0x1213141516171819L</code>.

     <p>Arguably, it's preferable to use <xref uid="java.nio.ByteBuffer" data-throw-if-not-resolved="false">java.nio.ByteBuffer</xref>; that library exposes much more
     flexibility at little cost in readability.
  parameters:
  - name: bytes
    type: <xref href="byte?alt=byte&text=byte" data-throw-if-not-resolved="False" />[]
  syntax: public static long fromByteArray(byte[] bytes)
  returns:
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False" />
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.primitives
artifact: com.azure:azure-cosmos:4.3.2-beta.2
