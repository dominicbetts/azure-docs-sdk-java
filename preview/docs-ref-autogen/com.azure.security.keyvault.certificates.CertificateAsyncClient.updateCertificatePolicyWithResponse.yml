### YamlMime:JavaMember
uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicyWithResponse*
fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicyWithResponse
name: updateCertificatePolicyWithResponse
nameWithType: CertificateAsyncClient.updateCertificatePolicyWithResponse
members:
- uid: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicyWithResponse(java.lang.String,com.azure.security.keyvault.certificates.models.CertificatePolicy)
  fullName: com.azure.security.keyvault.certificates.CertificateAsyncClient.updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy)
  name: updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy)
  nameWithType: CertificateAsyncClient.updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy)
  summary: |-
    Updates the policy for a certificate. The update operation changes specified attributes of the certificate policy and attributes
     that are not specified in the request are left unchanged. This operation requires the <code>certificates/update</code> permission.

     <p><strong>Code Samples</strong></p>
     <p>Gets the certificate policy, changes its properties and then updates it in the Azure Key Vault. Prints out the
     returned policy details when a response has been received.</p>

     <pre>
     certificateAsyncClient.getCertificatePolicy&#40;&quot;certificateName&quot;&#41;
         .subscriberContext&#40;Context.of&#40;key1, value1, key2, value2&#41;&#41;
         .subscribe&#40;certificatePolicyResponseValue -&gt; &#123;
             CertificatePolicy certificatePolicy = certificatePolicyResponseValue;
             &#47;&#47; Update transparency
             certificatePolicy.setCertificateTransparent&#40;true&#41;;
             certificateAsyncClient.updateCertificatePolicyWithResponse&#40;&quot;certificateName&quot;,
                 certificatePolicy&#41;
                 .subscribe&#40;updatedPolicyResponse -&gt;
                     System.out.printf&#40;&quot;Certificate policy's updated transparency status %s %n&quot;,
                         updatedPolicyResponse.getValue&#40;&#41;.isCertificateTransparent&#40;&#41;&#41;&#41;;
         &#125;&#41;;
     </pre>
  parameters:
  - description: The name of the certificate whose policy is to be updated.
    name: certificateName
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: The certificate policy is to be updated.
    name: policy
    type: <xref href="com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy" data-throw-if-not-resolved="False" />
  syntax: public Mono<Response<CertificatePolicy>> updateCertificatePolicyWithResponse(String certificateName, CertificatePolicy policy)
  returns:
    description: A <xref uid="Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="Response#getValue()" data-throw-if-not-resolved="false">value</xref> contains the updated <xref uid="CertificatePolicy" data-throw-if-not-resolved="false">certificate policy</xref>.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.security.keyvault.certificates.models.CertificatePolicy?alt=com.azure.security.keyvault.certificates.models.CertificatePolicy&text=CertificatePolicy" data-throw-if-not-resolved="False" />&gt;&gt;
type: method
metadata: {}
package: com.azure.security.keyvault.certificates
artifact: com.azure:azure-security-keyvault-certificates:4.1.0-beta.3
