### YamlMime:JavaMember
uid: com.azure.security.keyvault.keys.KeyAsyncClient.getKey*
fullName: com.azure.security.keyvault.keys.KeyAsyncClient.getKey
name: getKey
nameWithType: KeyAsyncClient.getKey
members:
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.getKey(java.lang.String)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.getKey(String name)
  name: getKey(String name)
  nameWithType: KeyAsyncClient.getKey(String name)
  summary: |-
    Get the public part of the latest version of the specified key from the key vault. The get key operation is
     applicable to all key types and it requires the <code>keys/get</code> permission.

     <p><strong>Code Samples</strong></p>
     <p>Gets latest version of the key in the key vault. Subscribes to the call asynchronously and prints out the
     returned key details when a response has been received.</p>

     <pre>
     keyAsyncClient.getKey&#40;&quot;keyName&quot;&#41;
         .subscriberContext&#40;Context.of&#40;key1, value1, key2, value2&#41;&#41;
         .subscribe&#40;keyResponse -&gt;
             System.out.printf&#40;&quot;Key is created with name %s and id %s %n&quot;, keyResponse.getName&#40;&#41;,
                 keyResponse.getId&#40;&#41;&#41;&#41;;
     </pre>
  parameters:
  - description: The name of the key.
    name: name
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  syntax: public Mono<KeyVaultKey> getKey(String name)
  returns:
    description: |-
      A <xref uid="Mono" data-throw-if-not-resolved="false">Mono</xref> containing the requested <xref uid="KeyVaultKey" data-throw-if-not-resolved="false">key</xref>. The content of the key is null
       if <code>name</code> is null or empty.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.security.keyvault.keys.models.KeyVaultKey?alt=com.azure.security.keyvault.keys.models.KeyVaultKey&text=KeyVaultKey" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.security.keyvault.keys.KeyAsyncClient.getKey(java.lang.String,java.lang.String)
  fullName: com.azure.security.keyvault.keys.KeyAsyncClient.getKey(String name, String version)
  name: getKey(String name, String version)
  nameWithType: KeyAsyncClient.getKey(String name, String version)
  summary: |-
    Gets the public part of the specified key and key version. The get key operation is applicable to all key types
     and it requires the <code>keys/get</code> permission.

     <p><strong>Code Samples</strong></p>
     <p>Gets a specific version of the key in the key vault. Subscribes to the call asynchronously and prints out the
     returned key details when a response has been received.</p>

     <pre>
     String keyVersion = &quot;6A385B124DEF4096AF1361A85B16C204&quot;;
     keyAsyncClient.getKey&#40;&quot;keyName&quot;, keyVersion&#41;
         .subscriberContext&#40;Context.of&#40;key1, value1, key2, value2&#41;&#41;
         .subscribe&#40;keyResponse -&gt;
             System.out.printf&#40;&quot;Key is created with name %s and id %s %n&quot;, keyResponse.getName&#40;&#41;,
                 keyResponse.getId&#40;&#41;&#41;&#41;;
     </pre>
  parameters:
  - description: The name of the key, cannot be null
    name: name
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: |-
      The version of the key to retrieve. If this is an empty String or null, this call is
           equivalent to calling <xref uid="KeyAsyncClient#getKey(String)" data-throw-if-not-resolved="false">KeyAsyncClient#getKey(String)</xref>, with the latest version being retrieved.
    name: version
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  syntax: public Mono<KeyVaultKey> getKey(String name, String version)
  returns:
    description: |-
      A <xref uid="Mono" data-throw-if-not-resolved="false">Mono</xref> containing the requested <xref uid="KeyVaultKey" data-throw-if-not-resolved="false">key</xref>.
       The content of the key is null if both <code>name</code> and <code>version</code> are null or empty.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.security.keyvault.keys.models.KeyVaultKey?alt=com.azure.security.keyvault.keys.models.KeyVaultKey&text=KeyVaultKey" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.security.keyvault.keys
artifact: com.azure:azure-security-keyvault-keys:4.2.0-beta.4
