### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.collect.Ordering.max*
fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>max
name: <E>max
nameWithType: Ordering<T>.<E>max
members:
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<E>max(E,E)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>max(E a, E b)
  name: <E>max(E a, E b)
  nameWithType: Ordering<T>.<E>max(E a, E b)
  summary: |-
    Returns the greater of the two values according to this ordering. If the values compare as 0,
     the first is returned.

     <p><b>Implementation note:</b> this method is invoked by the default implementations of the
     other <code>max</code> overloads, so overriding it will affect their behavior.

     <p><b>Java 8 users:</b> Use <code>Collections.max(Arrays.asList(a, b), thisComparator)</code>
     instead (but note that it does not guarantee which tied maximum element is returned).
  parameters:
  - description: value to compare, returned if greater than or equal to b.
    name: a
    type: <xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />
  - description: value to compare.
    name: b
    type: <xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />
  syntax: public E <E>max(E a, E b)
  returns:
    type: <xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<E>max(E,E,E,E...)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>max(E a, E b, E c, E[] rest)
  name: <E>max(E a, E b, E c, E[] rest)
  nameWithType: Ordering<T>.<E>max(E a, E b, E c, E[] rest)
  summary: |-
    Returns the greatest of the specified values according to this ordering. If there are multiple
     greatest values, the first of those is returned.

     <p><b>Java 8 users:</b> Use <code>Collections.max(Arrays.asList(a, b, c...), thisComparator)</code>
     instead (but note that it does not guarantee which tied maximum element is returned).
  parameters:
  - description: value to compare, returned if greater than or equal to the rest.
    name: a
    type: <xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />
  - description: value to compare
    name: b
    type: <xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />
  - description: value to compare
    name: c
    type: <xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />
  - description: values to compare
    name: rest
    type: <xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />[]
  syntax: public E <E>max(E a, E b, E c, E[] rest)
  returns:
    type: <xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<E>max(java.lang.Iterable<E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>max(Iterable<E> iterable)
  name: <E>max(Iterable<E> iterable)
  nameWithType: Ordering<T>.<E>max(Iterable<E> iterable)
  summary: |-
    Returns the greatest of the specified values according to this ordering. If there are multiple
     greatest values, the first of those is returned.

     <p><b>Java 8 users:</b> If <code>iterable</code> is a <xref uid="Collection" data-throw-if-not-resolved="false">Collection</xref>, use <code>
     Collections.max(collection, thisComparator)</code> instead. Otherwise, continue to use this method
     for now. After the next release of Guava, use <code>
     Streams.stream(iterable).max(thisComparator).get()</code> instead. Note that these alternatives do
     not guarantee which tied maximum element is returned)
  parameters:
  - description: the iterable whose maximum element is to be determined
    name: iterable
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
  syntax: public E <E>max(Iterable<E> iterable)
  returns:
    type: <xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<E>max(java.util.Iterator<E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<E>max(Iterator<E> iterator)
  name: <E>max(Iterator<E> iterator)
  nameWithType: Ordering<T>.<E>max(Iterator<E> iterator)
  summary: |-
    Returns the greatest of the specified values according to this ordering. If there are multiple
     greatest values, the first of those is returned. The iterator will be left exhausted: its
     <code>hasNext()</code> method will return <code>false</code>.

     <p><b>Java 8 users:</b> Continue to use this method for now. After the next release of Guava,
     use <code>Streams.stream(iterator).max(thisComparator).get()</code> instead (but note that it does
     not guarantee which tied maximum element is returned).
  parameters:
  - description: the iterator whose maximum element is to be determined
    name: iterator
    type: <xref href="java.util.Iterator?alt=java.util.Iterator&text=Iterator" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
  syntax: public E <E>max(Iterator<E> iterator)
  returns:
    type: <xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.collect
artifact: com.azure:azure-cosmos:4.3.2-beta.2
