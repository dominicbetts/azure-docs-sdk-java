### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.collect.Iterables.concat*
fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat
name: <T>concat
nameWithType: Iterables.<T>concat
members:
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b)
  name: <T>concat(Iterable<? extends T> a, Iterable<? extends T> b)
  nameWithType: Iterables.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b)
  summary: |-
    Combines two iterables into a single iterable. The returned iterable has an iterator that
     traverses the elements in <code>a</code>, followed by the elements in <code>b</code>. The source
     iterators are not polled until necessary.

     <p>The returned iterable's iterator supports <code>remove()</code> when the corresponding input
     iterator supports it.

     <p><b>Java 8 users:</b> The <code>Stream</code> equivalent of this method is <code>Stream.concat(a,
     b)</code>.
  parameters:
  - name: a
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="? extends T?alt=? extends T&text=? extends T" data-throw-if-not-resolved="False" />&gt;
  - name: b
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="? extends T?alt=? extends T&text=? extends T" data-throw-if-not-resolved="False" />&gt;
  syntax: public static Iterable<T> <T>concat(Iterable<? extends T> a, Iterable<? extends T> b)
  returns:
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="T?alt=T&text=T" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c)
  name: <T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c)
  nameWithType: Iterables.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c)
  summary: |-
    Combines three iterables into a single iterable. The returned iterable has an iterator that
     traverses the elements in <code>a</code>, followed by the elements in <code>b</code>, followed by the
     elements in <code>c</code>. The source iterators are not polled until necessary.

     <p>The returned iterable's iterator supports <code>remove()</code> when the corresponding input
     iterator supports it.

     <p><b>Java 8 users:</b> The <code>Stream</code> equivalent of this method is <code>
     Streams.concat(a, b, c)</code>.
  parameters:
  - name: a
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="? extends T?alt=? extends T&text=? extends T" data-throw-if-not-resolved="False" />&gt;
  - name: b
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="? extends T?alt=? extends T&text=? extends T" data-throw-if-not-resolved="False" />&gt;
  - name: c
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="? extends T?alt=? extends T&text=? extends T" data-throw-if-not-resolved="False" />&gt;
  syntax: public static Iterable<T> <T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c)
  returns:
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="T?alt=T&text=T" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>,java.lang.Iterable<? extends T>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c, Iterable<? extends T> d)
  name: <T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c, Iterable<? extends T> d)
  nameWithType: Iterables.<T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c, Iterable<? extends T> d)
  summary: |-
    Combines four iterables into a single iterable. The returned iterable has an iterator that
     traverses the elements in <code>a</code>, followed by the elements in <code>b</code>, followed by the
     elements in <code>c</code>, followed by the elements in <code>d</code>. The source iterators are not
     polled until necessary.

     <p>The returned iterable's iterator supports <code>remove()</code> when the corresponding input
     iterator supports it.

     <p><b>Java 8 users:</b> The <code>Stream</code> equivalent of this method is <code>
     Streams.concat(a, b, c, d)</code>.
  parameters:
  - name: a
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="? extends T?alt=? extends T&text=? extends T" data-throw-if-not-resolved="False" />&gt;
  - name: b
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="? extends T?alt=? extends T&text=? extends T" data-throw-if-not-resolved="False" />&gt;
  - name: c
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="? extends T?alt=? extends T&text=? extends T" data-throw-if-not-resolved="False" />&gt;
  - name: d
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="? extends T?alt=? extends T&text=? extends T" data-throw-if-not-resolved="False" />&gt;
  syntax: public static Iterable<T> <T>concat(Iterable<? extends T> a, Iterable<? extends T> b, Iterable<? extends T> c, Iterable<? extends T> d)
  returns:
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="T?alt=T&text=T" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(java.lang.Iterable<? extends T>...)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(Iterable<? extends T>[] inputs)
  name: <T>concat(Iterable<? extends T>[] inputs)
  nameWithType: Iterables.<T>concat(Iterable<? extends T>[] inputs)
  summary: |-
    Combines multiple iterables into a single iterable. The returned iterable has an iterator that
     traverses the elements of each iterable in <code>inputs</code>. The input iterators are not polled
     until necessary.

     <p>The returned iterable's iterator supports <code>remove()</code> when the corresponding input
     iterator supports it.

     <p><b>Java 8 users:</b> The <code>Stream</code> equivalent of this method is <code>
     Streams.concat(...)</code>.
  parameters:
  - name: inputs
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="? extends T?alt=? extends T&text=? extends T" data-throw-if-not-resolved="False" />&gt;[]
  syntax: public static Iterable<T> <T>concat(Iterable<? extends T>[] inputs)
  returns:
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="T?alt=T&text=T" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(java.lang.Iterable<? extends java.lang.Iterable<? extends T>>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Iterables.<T>concat(Iterable<? extends Iterable<? extends T>> inputs)
  name: <T>concat(Iterable<? extends Iterable<? extends T>> inputs)
  nameWithType: Iterables.<T>concat(Iterable<? extends Iterable<? extends T>> inputs)
  summary: |-
    Combines multiple iterables into a single iterable. The returned iterable has an iterator that
     traverses the elements of each iterable in <code>inputs</code>. The input iterators are not polled
     until necessary.

     <p>The returned iterable's iterator supports <code>remove()</code> when the corresponding input
     iterator supports it. The methods of the returned iterable may throw <code>
     NullPointerException</code> if any of the input iterators is null.

     <p><b>Java 8 users:</b> The <code>Stream</code> equivalent of this method is <code>
     streamOfStreams.flatMap(s -> s)</code>.
  parameters:
  - name: inputs
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="? extends java.lang.Iterable?alt=? extends java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="? extends T?alt=? extends T&text=? extends T" data-throw-if-not-resolved="False" />&gt;&gt;
  syntax: public static Iterable<T> <T>concat(Iterable<? extends Iterable<? extends T>> inputs)
  returns:
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="T?alt=T&text=T" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.collect
artifact: com.azure:azure-cosmos:4.3.2-beta.2
