### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.collect.Sets.newHashSet*
fullName: com.azure.cosmos.implementation.guava25.collect.Sets.<E>newHashSet
name: <E>newHashSet
nameWithType: Sets.<E>newHashSet
members:
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.<E>newHashSet()
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.<E>newHashSet()
  name: <E>newHashSet()
  nameWithType: Sets.<E>newHashSet()
  summary: |-
    Creates a <i>mutable</i>, initially empty <code>HashSet</code> instance.

     <p><b>Note:</b> if mutability is not required, use <xref uid="ImmutableSet#of()" data-throw-if-not-resolved="false">ImmutableSet#of()</xref> instead. If <code>
     E</code> is an <xref uid="Enum" data-throw-if-not-resolved="false">Enum</xref> type, use <xref uid="EnumSet#noneOf" data-throw-if-not-resolved="false">EnumSet#noneOf</xref> instead. Otherwise, strongly consider
     using a <code>LinkedHashSet</code> instead, at the cost of increased memory footprint, to get
     deterministic iteration behavior.

     <p><b>Note for Java 7 and later:</b> this method is now unnecessary and should be treated as
     deprecated. Instead, use the <code>HashSet</code> constructor directly, taking advantage of the new
     <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>.
  syntax: public static HashSet<E> <E>newHashSet()
  returns:
    type: <xref href="java.util.HashSet?alt=java.util.HashSet&text=HashSet" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.<E>newHashSet(E...)
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.<E>newHashSet(E[] elements)
  name: <E>newHashSet(E[] elements)
  nameWithType: Sets.<E>newHashSet(E[] elements)
  summary: |-
    Creates a <i>mutable</i> <code>HashSet</code> instance initially containing the given elements.

     <p><b>Note:</b> if elements are non-null and won't be added or removed after this point, use
     <xref uid="ImmutableSet#of()" data-throw-if-not-resolved="false">ImmutableSet#of()</xref> or <xref uid="ImmutableSet#copyOf(Object[])" data-throw-if-not-resolved="false">ImmutableSet#copyOf(Object[])</xref> instead. If <code>E</code> is an
     <xref uid="Enum" data-throw-if-not-resolved="false">Enum</xref> type, use <xref uid="EnumSet#of(Enum, Enum[])" data-throw-if-not-resolved="false">EnumSet#of(Enum, Enum[])</xref> instead. Otherwise, strongly consider
     using a <code>LinkedHashSet</code> instead, at the cost of increased memory footprint, to get
     deterministic iteration behavior.

     <p>This method is just a small convenience, either for <code>newHashSet(</code><xref uid="Arrays#asList" data-throw-if-not-resolved="false">asList</xref><code>(...))</code>, or for creating an empty set then calling <xref uid="Collections#addAll" data-throw-if-not-resolved="false">Collections#addAll</xref>.
     This method is not actually very useful and will likely be deprecated in the future.
  parameters:
  - name: elements
    type: <xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />[]
  syntax: public static HashSet<E> <E>newHashSet(E[] elements)
  returns:
    type: <xref href="java.util.HashSet?alt=java.util.HashSet&text=HashSet" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.<E>newHashSet(java.lang.Iterable<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.<E>newHashSet(Iterable<? extends E> elements)
  name: <E>newHashSet(Iterable<? extends E> elements)
  nameWithType: Sets.<E>newHashSet(Iterable<? extends E> elements)
  summary: |-
    Creates a <i>mutable</i> <code>HashSet</code> instance containing the given elements. A very thin
     convenience for creating an empty set then calling <xref uid="Collection#addAll" data-throw-if-not-resolved="false">Collection#addAll</xref> or <xref uid="Iterables#addAll" data-throw-if-not-resolved="false">Iterables#addAll</xref>.

     <p><b>Note:</b> if mutability is not required and the elements are non-null, use <xref uid="ImmutableSet#copyOf(Iterable)" data-throw-if-not-resolved="false">ImmutableSet#copyOf(Iterable)</xref> instead. (Or, change <code>elements</code> to be a <xref uid="FluentIterable" data-throw-if-not-resolved="false">FluentIterable</xref> and call <code>elements.toSet()</code>.)

     <p><b>Note:</b> if <code>E</code> is an <xref uid="Enum" data-throw-if-not-resolved="false">Enum</xref> type, use <xref uid="#newEnumSet(Iterable, Class)" data-throw-if-not-resolved="false">#newEnumSet(Iterable, Class)</xref>
     instead.

     <p><b>Note for Java 7 and later:</b> if <code>elements</code> is a <xref uid="Collection" data-throw-if-not-resolved="false">Collection</xref>, you don't
     need this method. Instead, use the <code>HashSet</code> constructor directly, taking advantage of
     the new <a href="http://goo.gl/iz2Wi">"diamond" syntax</a>.

     <p>Overall, this method is not very useful and will likely be deprecated in the future.
  parameters:
  - name: elements
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="? extends E?alt=? extends E&text=? extends E" data-throw-if-not-resolved="False" />&gt;
  syntax: public static HashSet<E> <E>newHashSet(Iterable<? extends E> elements)
  returns:
    type: <xref href="java.util.HashSet?alt=java.util.HashSet&text=HashSet" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.cosmos.implementation.guava25.collect.Sets.<E>newHashSet(java.util.Iterator<? extends E>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Sets.<E>newHashSet(Iterator<? extends E> elements)
  name: <E>newHashSet(Iterator<? extends E> elements)
  nameWithType: Sets.<E>newHashSet(Iterator<? extends E> elements)
  summary: |-
    Creates a <i>mutable</i> <code>HashSet</code> instance containing the given elements. A very thin
     convenience for creating an empty set and then calling <xref uid="Iterators#addAll" data-throw-if-not-resolved="false">Iterators#addAll</xref>.

     <p><b>Note:</b> if mutability is not required and the elements are non-null, use <xref uid="ImmutableSet#copyOf(Iterator)" data-throw-if-not-resolved="false">ImmutableSet#copyOf(Iterator)</xref> instead.

     <p><b>Note:</b> if <code>E</code> is an <xref uid="Enum" data-throw-if-not-resolved="false">Enum</xref> type, you should create an <xref uid="EnumSet" data-throw-if-not-resolved="false">EnumSet</xref>
     instead.

     <p>Overall, this method is not very useful and will likely be deprecated in the future.
  parameters:
  - name: elements
    type: <xref href="java.util.Iterator?alt=java.util.Iterator&text=Iterator" data-throw-if-not-resolved="False" />&lt;<xref href="? extends E?alt=? extends E&text=? extends E" data-throw-if-not-resolved="False" />&gt;
  syntax: public static HashSet<E> <E>newHashSet(Iterator<? extends E> elements)
  returns:
    type: <xref href="java.util.HashSet?alt=java.util.HashSet&text=HashSet" data-throw-if-not-resolved="False" />&lt;<xref href="E?alt=E&text=E" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.collect
artifact: com.azure:azure-cosmos:4.3.2-beta.2
