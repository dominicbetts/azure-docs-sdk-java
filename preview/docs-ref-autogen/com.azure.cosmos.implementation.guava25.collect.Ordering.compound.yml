### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.collect.Ordering.compound*
fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<T>compound
name: <T>compound
nameWithType: Ordering<T>.<T>compound
members:
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<T>compound(java.lang.Iterable<? extends java.util.Comparator<? super T>>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<T>compound(Iterable<? extends Comparator<? super T>> comparators)
  name: <T>compound(Iterable<? extends Comparator<? super T>> comparators)
  nameWithType: Ordering<T>.<T>compound(Iterable<? extends Comparator<? super T>> comparators)
  summary: |-
    Returns an ordering which tries each given comparator in order until a non-zero result is
     found, returning that result, and returning zero only if all comparators return zero. The
     returned ordering is based on the state of the <code>comparators</code> iterable at the time it was
     provided to this method.

     <p>The returned ordering is equivalent to that produced using <code>
     Ordering.from(comp1).compound(comp2).compound(comp3) . . .</code>.

     <p><b>Warning:</b> Supplying an argument with undefined iteration order, such as a <xref uid="HashSet" data-throw-if-not-resolved="false">HashSet</xref>, will produce non-deterministic results.

     <p><b>Java 8 users:</b> Use a chain of calls to <xref uid="Comparator#thenComparing(Comparator)" data-throw-if-not-resolved="false">Comparator#thenComparing(Comparator)</xref>,
     or <code>comparatorCollection.stream().reduce(Comparator::thenComparing).get()</code> (if the
     collection might be empty, also provide a default comparator as the <code>identity</code> parameter
     to <code>reduce</code>).
  parameters:
  - description: the comparators to try in order
    name: comparators
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;<xref href="? extends java.util.Comparator?alt=? extends java.util.Comparator&text=Comparator" data-throw-if-not-resolved="False" />&lt;<xref href="? super T?alt=? super T&text=? super T" data-throw-if-not-resolved="False" />&gt;&gt;
  syntax: public static Ordering<T> <T>compound(Iterable<? extends Comparator<? super T>> comparators)
  returns:
    type: <xref href="com.azure.cosmos.implementation.guava25.collect.Ordering?alt=com.azure.cosmos.implementation.guava25.collect.Ordering&text=Ordering" data-throw-if-not-resolved="False" />&lt;<xref href="T?alt=T&text=T" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.cosmos.implementation.guava25.collect.Ordering.<U>compound(java.util.Comparator<? super U>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Ordering<T>.<U>compound(Comparator<? super U> secondaryComparator)
  name: <U>compound(Comparator<? super U> secondaryComparator)
  nameWithType: Ordering<T>.<U>compound(Comparator<? super U> secondaryComparator)
  summary: |-
    Returns an ordering which first uses the ordering <code>this</code>, but which in the event of a
     "tie", then delegates to <code>secondaryComparator</code>. For example, to sort a bug list first by
     status and second by priority, you might use <code>byStatus.compound(byPriority)</code>. For a
     compound ordering with three or more components, simply chain multiple calls to this method.

     <p>An ordering produced by this method, or a chain of calls to this method, is equivalent to
     one created using <xref uid="Ordering#compound(Iterable)" data-throw-if-not-resolved="false">Ordering#compound(Iterable)</xref> on the same component comparators.

     <p><b>Java 8 users:</b> Use <code>thisComparator.thenComparing(secondaryComparator)</code> instead.
     Depending on what <code>secondaryComparator</code> is, one of the other overloads of <code>
     thenComparing</code> may be even more useful.
  parameters:
  - name: secondaryComparator
    type: <xref href="java.util.Comparator?alt=java.util.Comparator&text=Comparator" data-throw-if-not-resolved="False" />&lt;<xref href="? super U?alt=? super U&text=? super U" data-throw-if-not-resolved="False" />&gt;
  syntax: public Ordering<U> <U>compound(Comparator<? super U> secondaryComparator)
  returns:
    type: <xref href="com.azure.cosmos.implementation.guava25.collect.Ordering?alt=com.azure.cosmos.implementation.guava25.collect.Ordering&text=Ordering" data-throw-if-not-resolved="False" />&lt;<xref href="U?alt=U&text=U" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.collect
artifact: com.azure:azure-cosmos:4.3.2-beta.2
