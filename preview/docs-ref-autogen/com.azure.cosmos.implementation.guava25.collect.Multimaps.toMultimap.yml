### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.collect.Multimaps.toMultimap*
fullName: com.azure.cosmos.implementation.guava25.collect.Multimaps.<T,K,V,M>toMultimap
name: <T,K,V,M>toMultimap
nameWithType: Multimaps.<T,K,V,M>toMultimap
members:
- uid: com.azure.cosmos.implementation.guava25.collect.Multimaps.<T,K,V,M>toMultimap(java.util.function.Function<? super T,? extends K>,java.util.function.Function<? super T,? extends V>,java.util.function.Supplier<M>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Multimaps.<T,K,V,M>toMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction, Supplier<M> multimapSupplier)
  name: <T,K,V,M>toMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction, Supplier<M> multimapSupplier)
  nameWithType: Multimaps.<T,K,V,M>toMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction, Supplier<M> multimapSupplier)
  summary: |-
    Returns a <code>Collector</code> accumulating entries into a <code>Multimap</code> generated from the
     specified supplier. The keys and values of the entries are the result of applying the provided
     mapping functions to the input elements, accumulated in the encounter order of the stream.

     <p>Example:

     <pre><code>
     static final ListMultimap<Character, String> FIRST_LETTER_MULTIMAP =
         Stream.of("banana", "apple", "carrot", "asparagus", "cherry")
             .collect(
                 toMultimap(
                      str -> str.charAt(0),
                      str -> str.substring(1),
                      MultimapBuilder.treeKeys().arrayListValues()::build));

     // is equivalent to

     static final ListMultimap<Character, String> FIRST_LETTER_MULTIMAP;

     static {
         FIRST_LETTER_MULTIMAP = MultimapBuilder.treeKeys().arrayListValues().build();
         FIRST_LETTER_MULTIMAP.put('b', "anana");
         FIRST_LETTER_MULTIMAP.put('a', "pple");
         FIRST_LETTER_MULTIMAP.put('a', "sparagus");
         FIRST_LETTER_MULTIMAP.put('c', "arrot");
         FIRST_LETTER_MULTIMAP.put('c', "herry");
     }
     </code></pre>
  parameters:
  - name: keyFunction
    type: <xref href="java.util.function.Function?alt=java.util.function.Function&text=Function" data-throw-if-not-resolved="False" />&lt;<xref href="? super T?alt=? super T&text=? super T" data-throw-if-not-resolved="False" />,<xref href="? extends K?alt=? extends K&text=? extends K" data-throw-if-not-resolved="False" />&gt;
  - name: valueFunction
    type: <xref href="java.util.function.Function?alt=java.util.function.Function&text=Function" data-throw-if-not-resolved="False" />&lt;<xref href="? super T?alt=? super T&text=? super T" data-throw-if-not-resolved="False" />,<xref href="? extends V?alt=? extends V&text=? extends V" data-throw-if-not-resolved="False" />&gt;
  - name: multimapSupplier
    type: <xref href="java.util.function.Supplier?alt=java.util.function.Supplier&text=Supplier" data-throw-if-not-resolved="False" />&lt;<xref href="M?alt=M&text=M" data-throw-if-not-resolved="False" />&gt;
  syntax: public static Collector<T,?,M> <T,K,V,M>toMultimap(Function<? super T,? extends K> keyFunction, Function<? super T,? extends V> valueFunction, Supplier<M> multimapSupplier)
  returns:
    type: <xref href="java.util.stream.Collector?alt=java.util.stream.Collector&text=Collector" data-throw-if-not-resolved="False" />&lt;<xref href="T?alt=T&text=T" data-throw-if-not-resolved="False" />,?,<xref href="M?alt=M&text=M" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.collect
artifact: com.azure:azure-cosmos:4.3.2-beta.2
