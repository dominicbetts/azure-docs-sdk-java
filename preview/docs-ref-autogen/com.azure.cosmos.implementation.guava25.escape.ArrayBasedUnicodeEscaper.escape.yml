### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escape*
fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escape
name: escape
nameWithType: ArrayBasedUnicodeEscaper.escape
members:
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escape(int)
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escape(int cp)
  name: escape(int cp)
  nameWithType: ArrayBasedUnicodeEscaper.escape(int cp)
  summary: |-
    Escapes a single Unicode code point using the replacement array and safe range values. If the
     given character does not have an explicit replacement and lies outside the safe range then
     <xref uid="#escapeUnsafe" data-throw-if-not-resolved="false">#escapeUnsafe</xref> is called.
  overridden: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape(int)
  parameters:
  - name: cp
    type: <xref href="int?alt=int&text=int" data-throw-if-not-resolved="False" />
  syntax: protected final char[] escape(int cp)
  returns:
    type: <xref href="char?alt=char&text=char" data-throw-if-not-resolved="False" />[]
- uid: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escape(java.lang.String)
  fullName: com.azure.cosmos.implementation.guava25.escape.ArrayBasedUnicodeEscaper.escape(String s)
  name: escape(String s)
  nameWithType: ArrayBasedUnicodeEscaper.escape(String s)
  summary: |-
    Returns the escaped form of a given literal string.

     <p>If you are escaping input in arbitrary successive chunks, then it is not generally safe to
     use this method. If an input string ends with an unmatched high surrogate character, then this
     method will throw <xref uid="IllegalArgumentException" data-throw-if-not-resolved="false">IllegalArgumentException</xref>. You should ensure your input is valid <a href="http://en.wikipedia.org/wiki/UTF-16">UTF-16</a> before calling this method.

     <p><b>Note:</b> When implementing an escaper it is a good idea to override this method for
     efficiency by inlining the implementation of <xref uid="#nextEscapeIndex(CharSequence, int, int)" data-throw-if-not-resolved="false">#nextEscapeIndex(CharSequence, int, int)</xref>
     directly. Doing this for <xref uid="com.azure.cosmos.implementation.guava25.net.PercentEscaper" data-throw-if-not-resolved="false">com.azure.cosmos.implementation.guava25.net.PercentEscaper</xref> more than doubled the
     performance for unescaped strings (as measured by <xref uid="CharEscapersBenchmark" data-throw-if-not-resolved="false">CharEscapersBenchmark</xref>).
  overridden: com.azure.cosmos.implementation.guava25.escape.UnicodeEscaper.escape(java.lang.String)
  parameters:
  - name: s
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  syntax: public final String escape(String s)
  returns:
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.escape
artifact: com.azure:azure-cosmos:4.3.2-beta.2
