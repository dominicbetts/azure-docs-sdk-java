### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.base.Converter.from*
fullName: com.azure.cosmos.implementation.guava25.base.Converter<A,B>.<A,B>from
name: <A,B>from
nameWithType: Converter<A,B>.<A,B>from
members:
- uid: com.azure.cosmos.implementation.guava25.base.Converter.<A,B>from(com.azure.cosmos.implementation.guava25.base.Function<? super A,? extends B>,com.azure.cosmos.implementation.guava25.base.Function<? super B,? extends A>)
  fullName: com.azure.cosmos.implementation.guava25.base.Converter<A,B>.<A,B>from(Function<? super A,? extends B> forwardFunction, Function<? super B,? extends A> backwardFunction)
  name: <A,B>from(Function<? super A,? extends B> forwardFunction, Function<? super B,? extends A> backwardFunction)
  nameWithType: Converter<A,B>.<A,B>from(Function<? super A,? extends B> forwardFunction, Function<? super B,? extends A> backwardFunction)
  summary: |-
    Returns a converter based on separate forward and backward functions. This is useful if the
     function instances already exist, or so that you can supply lambda expressions. If those
     circumstances don't apply, you probably don't need to use this; subclass <code>Converter</code> and
     implement its <xref uid="#doForward" data-throw-if-not-resolved="false">#doForward</xref> and <xref uid="#doBackward" data-throw-if-not-resolved="false">#doBackward</xref> methods directly.

     <p>These functions will never be passed <code>null</code> and must not under any circumstances
     return <code>null</code>. If a value cannot be converted, the function should throw an unchecked
     exception (typically, but not necessarily, <xref uid="IllegalArgumentException" data-throw-if-not-resolved="false">IllegalArgumentException</xref>).

     <p>The returned converter is serializable if both provided functions are.
  parameters:
  - name: forwardFunction
    type: <xref href="com.azure.cosmos.implementation.guava25.base.Function?alt=com.azure.cosmos.implementation.guava25.base.Function&text=Function" data-throw-if-not-resolved="False" />&lt;<xref href="? super A?alt=? super A&text=? super A" data-throw-if-not-resolved="False" />,<xref href="? extends B?alt=? extends B&text=? extends B" data-throw-if-not-resolved="False" />&gt;
  - name: backwardFunction
    type: <xref href="com.azure.cosmos.implementation.guava25.base.Function?alt=com.azure.cosmos.implementation.guava25.base.Function&text=Function" data-throw-if-not-resolved="False" />&lt;<xref href="? super B?alt=? super B&text=? super B" data-throw-if-not-resolved="False" />,<xref href="? extends A?alt=? extends A&text=? extends A" data-throw-if-not-resolved="False" />&gt;
  syntax: public static Converter<A,B> <A,B>from(Function<? super A,? extends B> forwardFunction, Function<? super B,? extends A> backwardFunction)
  returns:
    type: <xref href="com.azure.cosmos.implementation.guava25.base.Converter?alt=com.azure.cosmos.implementation.guava25.base.Converter&text=Converter" data-throw-if-not-resolved="False" />&lt;<xref href="A?alt=A&text=A" data-throw-if-not-resolved="False" />,<xref href="B?alt=B&text=B" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.base
artifact: com.azure:azure-cosmos:4.3.2-beta.2
