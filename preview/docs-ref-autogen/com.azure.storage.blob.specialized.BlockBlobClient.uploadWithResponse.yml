### YamlMime:JavaMember
uid: com.azure.storage.blob.specialized.BlockBlobClient.uploadWithResponse*
fullName: com.azure.storage.blob.specialized.BlockBlobClient.uploadWithResponse
name: uploadWithResponse
nameWithType: BlockBlobClient.uploadWithResponse
members:
- uid: com.azure.storage.blob.specialized.BlockBlobClient.uploadWithResponse(com.azure.storage.blob.options.BlockBlobSimpleUploadOptions,java.time.Duration,com.azure.core.util.Context)
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.uploadWithResponse(BlockBlobSimpleUploadOptions options, Duration timeout, Context context)
  name: uploadWithResponse(BlockBlobSimpleUploadOptions options, Duration timeout, Context context)
  nameWithType: BlockBlobClient.uploadWithResponse(BlockBlobSimpleUploadOptions options, Duration timeout, Context context)
  summary: "Creates a new block blob, or updates the content of an existing block blob. Updating an existing block blob\n overwrites any existing metadata on the blob. Partial updates are not supported with PutBlob; the content of the\n existing blob is overwritten with the new content. To perform a partial update of a block blob's, use PutBlock\n and PutBlockList. For more information, see the\n <a href=\"https://docs.microsoft.com/rest/api/storageservices/put-blob\">Azure Docs</a>.\n <p>\n To avoid overwriting, pass \"*\" to <xref uid=\"BlobRequestConditions#setIfNoneMatch(String)\" data-throw-if-not-resolved=\"false\">BlobRequestConditions#setIfNoneMatch(String)</xref>.\n\n <p><strong>Code Samples</strong></p>\n\n <pre>\n BlobHttpHeaders headers = new BlobHttpHeaders&#40;&#41;\n     .setContentMd5&#40;&quot;data&quot;.getBytes&#40;StandardCharsets.UTF_8&#41;&#41;\n     .setContentLanguage&#40;&quot;en-US&quot;&#41;\n     .setContentType&#40;&quot;binary&quot;&#41;;\n \n Map&lt;String, String&gt; metadata = Collections.singletonMap&#40;&quot;metadata&quot;, &quot;value&quot;&#41;;\n Map&lt;String, String&gt; tags = Collections.singletonMap&#40;&quot;tag&quot;, &quot;value&quot;&#41;;\n \n byte[] md5 = MessageDigest.getInstance&#40;&quot;MD5&quot;&#41;.digest&#40;&quot;data&quot;.getBytes&#40;StandardCharsets.UTF_8&#41;&#41;;\n \n BlobRequestConditions requestConditions = new BlobRequestConditions&#40;&#41;\n     .setLeaseId&#40;leaseId&#41;\n     .setIfUnmodifiedSince&#40;OffsetDateTime.now&#40;&#41;.minusDays&#40;3&#41;&#41;;\n Context context = new Context&#40;&quot;key&quot;, &quot;value&quot;&#41;;\n \n System.out.printf&#40;&quot;Uploaded BlockBlob MD5 is %s%n&quot;, Base64.getEncoder&#40;&#41;\n     .encodeToString&#40;client.uploadWithResponse&#40;new BlockBlobSimpleUploadOptions&#40;data, length&#41;\n         .setHeaders&#40;headers&#41;.setMetadata&#40;metadata&#41;.setTags&#40;tags&#41;.setTier&#40;AccessTier.HOT&#41;.setContentMd5&#40;md5&#41;\n         .setRequestConditions&#40;requestConditions&#41;, timeout, context&#41;\n         .getValue&#40;&#41;\n         .getContentMd5&#40;&#41;&#41;&#41;;\n </pre>"
  parameters:
  - description: <xref uid="BlockBlobSimpleUploadOptions" data-throw-if-not-resolved="false">BlockBlobSimpleUploadOptions</xref>
    name: options
    type: <xref href="com.azure.storage.blob.options.BlockBlobSimpleUploadOptions?alt=com.azure.storage.blob.options.BlockBlobSimpleUploadOptions&text=BlockBlobSimpleUploadOptions" data-throw-if-not-resolved="False" />
  - description: An optional timeout value beyond which a <xref uid="RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    name: timeout
    type: <xref href="java.time.Duration?alt=java.time.Duration&text=Duration" data-throw-if-not-resolved="False" />
  - description: Additional context that is passed through the Http pipeline during the service call.
    name: context
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
  syntax: public Response<BlockBlobItem> uploadWithResponse(BlockBlobSimpleUploadOptions options, Duration timeout, Context context)
  returns:
    description: The information of the uploaded block blob.
    type: <xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.blob.models.BlockBlobItem?alt=com.azure.storage.blob.models.BlockBlobItem&text=BlockBlobItem" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.storage.blob.specialized.BlockBlobClient.uploadWithResponse(java.io.InputStream,long,com.azure.storage.blob.models.BlobHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.blob.models.AccessTier,byte[],com.azure.storage.blob.models.BlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  fullName: com.azure.storage.blob.specialized.BlockBlobClient.uploadWithResponse(InputStream data, long length, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, byte[] contentMd5, BlobRequestConditions requestConditions, Duration timeout, Context context)
  name: uploadWithResponse(InputStream data, long length, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, byte[] contentMd5, BlobRequestConditions requestConditions, Duration timeout, Context context)
  nameWithType: BlockBlobClient.uploadWithResponse(InputStream data, long length, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, byte[] contentMd5, BlobRequestConditions requestConditions, Duration timeout, Context context)
  summary: "Creates a new block blob, or updates the content of an existing block blob. Updating an existing block blob\n overwrites any existing metadata on the blob. Partial updates are not supported with PutBlob; the content of the\n existing blob is overwritten with the new content. To perform a partial update of a block blob's, use PutBlock\n and PutBlockList. For more information, see the\n <a href=\"https://docs.microsoft.com/rest/api/storageservices/put-blob\">Azure Docs</a>.\n <p>\n To avoid overwriting, pass \"*\" to <xref uid=\"BlobRequestConditions#setIfNoneMatch(String)\" data-throw-if-not-resolved=\"false\">BlobRequestConditions#setIfNoneMatch(String)</xref>.\n\n <p><strong>Code Samples</strong></p>\n\n <pre>\n BlobHttpHeaders headers = new BlobHttpHeaders&#40;&#41;\n     .setContentMd5&#40;&quot;data&quot;.getBytes&#40;StandardCharsets.UTF_8&#41;&#41;\n     .setContentLanguage&#40;&quot;en-US&quot;&#41;\n     .setContentType&#40;&quot;binary&quot;&#41;;\n \n Map&lt;String, String&gt; metadata = Collections.singletonMap&#40;&quot;metadata&quot;, &quot;value&quot;&#41;;\n \n byte[] md5 = MessageDigest.getInstance&#40;&quot;MD5&quot;&#41;.digest&#40;&quot;data&quot;.getBytes&#40;StandardCharsets.UTF_8&#41;&#41;;\n \n BlobRequestConditions requestConditions = new BlobRequestConditions&#40;&#41;\n     .setLeaseId&#40;leaseId&#41;\n     .setIfUnmodifiedSince&#40;OffsetDateTime.now&#40;&#41;.minusDays&#40;3&#41;&#41;;\n Context context = new Context&#40;&quot;key&quot;, &quot;value&quot;&#41;;\n \n System.out.printf&#40;&quot;Uploaded BlockBlob MD5 is %s%n&quot;, Base64.getEncoder&#40;&#41;\n     .encodeToString&#40;client.uploadWithResponse&#40;data, length, headers, metadata, AccessTier.HOT, md5,\n         requestConditions, timeout, context&#41;\n         .getValue&#40;&#41;\n         .getContentMd5&#40;&#41;&#41;&#41;;\n </pre>"
  parameters:
  - description: |-
      The data to write to the blob. The data must be markable. This is in order to support retries. If
       the data is not markable, consider using <xref uid="#getBlobOutputStream()" data-throw-if-not-resolved="false">#getBlobOutputStream()</xref> and writing to the returned OutputStream.
       Alternatively, consider wrapping your data source in a <xref uid="java.io.BufferedInputStream" data-throw-if-not-resolved="false">java.io.BufferedInputStream</xref> to add mark support.
    name: data
    type: <xref href="java.io.InputStream?alt=java.io.InputStream&text=InputStream" data-throw-if-not-resolved="False" />
  - description: |-
      The exact length of the data. It is important that this value match precisely the length of the
       data provided in the <xref uid="InputStream" data-throw-if-not-resolved="false">InputStream</xref>.
    name: length
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False" />
  - description: <xref uid="BlobHttpHeaders" data-throw-if-not-resolved="false">BlobHttpHeaders</xref>
    name: headers
    type: <xref href="com.azure.storage.blob.models.BlobHttpHeaders?alt=com.azure.storage.blob.models.BlobHttpHeaders&text=BlobHttpHeaders" data-throw-if-not-resolved="False" />
  - description: Metadata to associate with the blob.
    name: metadata
    type: <xref href="java.util.Map?alt=java.util.Map&text=Map" data-throw-if-not-resolved="False" />&lt;<xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />,<xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />&gt;
  - description: <xref uid="AccessTier" data-throw-if-not-resolved="false">AccessTier</xref> for the destination blob.
    name: tier
    type: <xref href="com.azure.storage.blob.models.AccessTier?alt=com.azure.storage.blob.models.AccessTier&text=AccessTier" data-throw-if-not-resolved="False" />
  - description: |-
      An MD5 hash of the block content. This hash is used to verify the integrity of the block during
       transport. When this header is specified, the storage service compares the hash of the content that has arrived
       with this header value. Note that this MD5 hash is not stored with the blob. If the two hashes do not match, the
       operation will fail.
    name: contentMd5
    type: <xref href="byte?alt=byte&text=byte" data-throw-if-not-resolved="False" />[]
  - description: <xref uid="BlobRequestConditions" data-throw-if-not-resolved="false">BlobRequestConditions</xref>
    name: requestConditions
    type: <xref href="com.azure.storage.blob.models.BlobRequestConditions?alt=com.azure.storage.blob.models.BlobRequestConditions&text=BlobRequestConditions" data-throw-if-not-resolved="False" />
  - description: An optional timeout value beyond which a <xref uid="RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    name: timeout
    type: <xref href="java.time.Duration?alt=java.time.Duration&text=Duration" data-throw-if-not-resolved="False" />
  - description: Additional context that is passed through the Http pipeline during the service call.
    name: context
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
  syntax: public Response<BlockBlobItem> uploadWithResponse(InputStream data, long length, BlobHttpHeaders headers, Map<String,String> metadata, AccessTier tier, byte[] contentMd5, BlobRequestConditions requestConditions, Duration timeout, Context context)
  returns:
    description: The information of the uploaded block blob.
    type: <xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.blob.models.BlockBlobItem?alt=com.azure.storage.blob.models.BlockBlobItem&text=BlockBlobItem" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.storage.blob.specialized
artifact: com.azure:azure-storage-blob:12.8.0-beta.1
