### YamlMime:JavaMember
uid: com.azure.cosmos.implementation.guava25.collect.Streams.zip*
fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<A,B,R>zip
name: <A,B,R>zip
nameWithType: Streams.<A,B,R>zip
members:
- uid: com.azure.cosmos.implementation.guava25.collect.Streams.<A,B,R>zip(java.util.stream.Stream<A>,java.util.stream.Stream<B>,java.util.function.BiFunction<? super A,? super B,R>)
  fullName: com.azure.cosmos.implementation.guava25.collect.Streams.<A,B,R>zip(Stream<A> streamA, Stream<B> streamB, BiFunction<? super A,? super B,R> function)
  name: <A,B,R>zip(Stream<A> streamA, Stream<B> streamB, BiFunction<? super A,? super B,R> function)
  nameWithType: Streams.<A,B,R>zip(Stream<A> streamA, Stream<B> streamB, BiFunction<? super A,? super B,R> function)
  summary: |-
    Returns a stream in which each element is the result of passing the corresponding elementY of
     each of <code>streamA</code> and <code>streamB</code> to <code>function</code>.

     <p>For example:

     <pre><code>
     Streams.zip(
       Stream.of("foo1", "foo2", "foo3"),
       Stream.of("bar1", "bar2"),
       (arg1, arg2) -> arg1 + ":" + arg2)
     </code></pre>

     <p>will return <code>Stream.of("foo1:bar1", "foo2:bar2")</code>.

     <p>The resulting stream will only be as long as the shorter of the two input streams; if one
     stream is longer, its extra elements will be ignored.

     <p>Note that if you are calling <xref uid="Stream#forEach" data-throw-if-not-resolved="false">Stream#forEach</xref> on the resulting stream, you might want
     to consider using <xref uid="#forEachPair" data-throw-if-not-resolved="false">#forEachPair</xref> instead of this method.

     <p><b>Performance note:</b> The resulting stream is not <a href="http://gee.cs.oswego.edu/dl/html/StreamParallelGuidance.html">efficiently splittable</a>.
     This may harm parallel performance.
  parameters:
  - name: streamA
    type: <xref href="java.util.stream.Stream?alt=java.util.stream.Stream&text=Stream" data-throw-if-not-resolved="False" />&lt;<xref href="A?alt=A&text=A" data-throw-if-not-resolved="False" />&gt;
  - name: streamB
    type: <xref href="java.util.stream.Stream?alt=java.util.stream.Stream&text=Stream" data-throw-if-not-resolved="False" />&lt;<xref href="B?alt=B&text=B" data-throw-if-not-resolved="False" />&gt;
  - name: function
    type: <xref href="java.util.function.BiFunction?alt=java.util.function.BiFunction&text=BiFunction" data-throw-if-not-resolved="False" />&lt;<xref href="? super A?alt=? super A&text=? super A" data-throw-if-not-resolved="False" />,<xref href="? super B?alt=? super B&text=? super B" data-throw-if-not-resolved="False" />,<xref href="R?alt=R&text=R" data-throw-if-not-resolved="False" />&gt;
  syntax: public static Stream<R> <A,B,R>zip(Stream<A> streamA, Stream<B> streamB, BiFunction<? super A,? super B,R> function)
  returns:
    type: <xref href="java.util.stream.Stream?alt=java.util.stream.Stream&text=Stream" data-throw-if-not-resolved="False" />&lt;<xref href="R?alt=R&text=R" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.cosmos.implementation.guava25.collect
artifact: com.azure:azure-cosmos:4.3.2-beta.2
