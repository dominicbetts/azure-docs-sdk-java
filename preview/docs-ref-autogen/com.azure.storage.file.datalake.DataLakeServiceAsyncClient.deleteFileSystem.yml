### YamlMime:JavaMember
uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystem*
fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystem
name: deleteFileSystem
nameWithType: DataLakeServiceAsyncClient.deleteFileSystem
members:
- uid: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystem(java.lang.String)
  fullName: com.azure.storage.file.datalake.DataLakeServiceAsyncClient.deleteFileSystem(String fileSystemName)
  name: deleteFileSystem(String fileSystemName)
  nameWithType: DataLakeServiceAsyncClient.deleteFileSystem(String fileSystemName)
  summary: |-
    Deletes the specified file system in the storage account. If the file system doesn't exist the operation fails.
     For more information see the <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/delete-container">Azure
     Docs</a>.
     <p><strong>Code Samples</strong></p>

     <pre>
     client.deleteFileSystem&#40;&quot;fileSystemName&quot;&#41;.subscribe&#40;
         response -&gt; System.out.printf&#40;&quot;Delete file system completed%n&quot;&#41;,
         error -&gt; System.out.printf&#40;&quot;Delete file system failed: %s%n&quot;, error&#41;&#41;;
     </pre>
  parameters:
  - description: Name of the file system to delete
    name: fileSystemName
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  syntax: public Mono<Void> deleteFileSystem(String fileSystemName)
  returns:
    description: A reactive response signalling completion.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="java.lang.Void?alt=java.lang.Void&text=Void" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.storage.file.datalake
artifact: com.azure:azure-storage-file-datalake:12.2.0-beta.1
