### YamlMime:JavaType
uid: com.azure.cosmos.implementation.guava25.base.Stopwatch
fullName: com.azure.cosmos.implementation.guava25.base.Stopwatch
name: Stopwatch
nameWithType: Stopwatch
summary: |-
  An object that measures elapsed time in nanoseconds. It is useful to measure elapsed time using this class instead of direct calls to <xref uid="" data-throw-if-not-resolved="false">System#nanoTime</xref> for a few reasons:

   *  An alternate time source can be substituted, for testing or performance reasons.
   *  As documented by `nanoTime`, the value returned has no absolute meaning, and can only be interpreted as relative to another timestamp returned by `nanoTime` at a different time. `Stopwatch` is a more effective abstraction because it exposes only these relative values, not the absolute ones.

  Basic usage:

  ```java
  Stopwatch stopwatch = Stopwatch.createStarted();
   doSomething();
   stopwatch.stop(); // optional

   Duration duration = stopwatch.elapsed();

   log.info("time: " + stopwatch); // formatted string like "12.3 ms"
  ```

  Stopwatch methods are not idempotent; it is an error to start or stop a stopwatch that is already in the desired state.

  When testing code that uses this class, use <xref uid="com.azure.cosmos.implementation.guava25.base.Stopwatch.createUnstarted*" data-throw-if-not-resolved="false">#createUnstarted(Ticker)</xref> or <xref uid="com.azure.cosmos.implementation.guava25.base.Stopwatch.createStarted*" data-throw-if-not-resolved="false">#createStarted(Ticker)</xref> to supply a fake or mock ticker. This allows you to simulate any valid behavior of the stopwatch.

  **Note:** This class is not thread-safe.

  **Warning for Android users:** a stopwatch with default behavior may not continue to keep time while the device is asleep. Instead, create one like this:

  ```java
  Stopwatch.createStarted(
        new Ticker() {
          public long read() {
            return android.os.SystemClock.elapsedRealtimeNanos();
          }
        });
  ```
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False" />
inheritedMembers:
- java.lang.Object.clone()
- java.lang.Object.equals(java.lang.Object)
- java.lang.Object.finalize()
- java.lang.Object.getClass()
- java.lang.Object.hashCode()
- java.lang.Object.notify()
- java.lang.Object.notifyAll()
- java.lang.Object.toString()
- java.lang.Object.wait()
- java.lang.Object.wait(long)
- java.lang.Object.wait(long,int)
syntax: public final class Stopwatch
methods:
- com.azure.cosmos.implementation.guava25.base.Stopwatch.createStarted()
- com.azure.cosmos.implementation.guava25.base.Stopwatch.createStarted(com.azure.cosmos.implementation.guava25.base.Ticker)
- com.azure.cosmos.implementation.guava25.base.Stopwatch.createUnstarted()
- com.azure.cosmos.implementation.guava25.base.Stopwatch.createUnstarted(com.azure.cosmos.implementation.guava25.base.Ticker)
- com.azure.cosmos.implementation.guava25.base.Stopwatch.elapsed()
- com.azure.cosmos.implementation.guava25.base.Stopwatch.elapsed(java.util.concurrent.TimeUnit)
- com.azure.cosmos.implementation.guava25.base.Stopwatch.isRunning()
- com.azure.cosmos.implementation.guava25.base.Stopwatch.reset()
- com.azure.cosmos.implementation.guava25.base.Stopwatch.start()
- com.azure.cosmos.implementation.guava25.base.Stopwatch.stop()
- com.azure.cosmos.implementation.guava25.base.Stopwatch.toString()
type: class
metadata: {}
package: com.azure.cosmos.implementation.guava25.base
artifact: com.azure:azure-cosmos:4.3.2-beta.2
