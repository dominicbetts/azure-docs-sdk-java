### YamlMime:JavaMember
uid: com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse*
fullName: com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse
name: uploadWithResponse
nameWithType: ShareFileAsyncClient.uploadWithResponse
members:
- uid: com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset)
  name: uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset)
  nameWithType: ShareFileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset)
  summary: |-
    Uploads a range of bytes to specific of a file in storage file service. Upload operations performs an in-place
     write on the specified file.

     <p><strong>Code Samples</strong></p>

     <p>Upload the file from 1024 to 2048 bytes with its metadata and properties and without the contentMD5. </p>

     <pre>
     ByteBuffer defaultData = ByteBuffer.wrap&#40;&quot;default&quot;.getBytes&#40;StandardCharsets.UTF_8&#41;&#41;;
     shareFileAsyncClient.uploadWithResponse&#40;Flux.just&#40;defaultData&#41;, defaultData.remaining&#40;&#41;, 0L&#41;.subscribe&#40;
         response -&gt; &#123; &#125;,
         error -&gt; System.err.print&#40;error.toString&#40;&#41;&#41;,
         &#40;&#41; -&gt; System.out.println&#40;&quot;Complete deleting the file!&quot;&#41;
     &#41;;
     </pre>

     <p>For more information, see the
     <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/put-range">Azure Docs</a>.</p>
  parameters:
  - description: The data which will upload to the storage file.
    name: data
    type: <xref href="reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux" data-throw-if-not-resolved="False" />&lt;<xref href="java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer" data-throw-if-not-resolved="False" />&gt;
  - description: |-
      Specifies the number of bytes being transmitted in the request body. When the
       ShareFileRangeWriteType is set to clear, the value of this header must be set to zero.
    name: length
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False" />
  - description: |-
      Optional starting point of the upload range. It will start from the beginning if it is
       <code>null</code>.
    name: offset
    type: <xref href="java.lang.Long?alt=java.lang.Long&text=Long" data-throw-if-not-resolved="False" />
  syntax: public Mono<Response<ShareFileUploadInfo>> uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset)
  returns:
    description: |-
      A response containing the <xref uid="ShareFileUploadInfo" data-throw-if-not-resolved="false">file upload info</xref> with headers and response
       status code.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.file.share.models.ShareFileUploadInfo?alt=com.azure.storage.file.share.models.ShareFileUploadInfo&text=ShareFileUploadInfo" data-throw-if-not-resolved="False" />&gt;&gt;
- uid: com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(reactor.core.publisher.Flux<java.nio.ByteBuffer>,long,java.lang.Long,com.azure.storage.file.share.models.ShareRequestConditions)
  fullName: com.azure.storage.file.share.ShareFileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset, ShareRequestConditions requestConditions)
  name: uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset, ShareRequestConditions requestConditions)
  nameWithType: ShareFileAsyncClient.uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset, ShareRequestConditions requestConditions)
  summary: |-
    Uploads a range of bytes to specific of a file in storage file service. Upload operations performs an in-place
     write on the specified file.

     <p><strong>Code Samples</strong></p>

     <p>Upload the file from 1024 to 2048 bytes with its metadata and properties and without the contentMD5. </p>

     <pre>
     ShareRequestConditions requestConditions = new ShareRequestConditions&#40;&#41;.setLeaseId&#40;leaseId&#41;;
     ByteBuffer defaultData = ByteBuffer.wrap&#40;&quot;default&quot;.getBytes&#40;StandardCharsets.UTF_8&#41;&#41;;
     shareFileAsyncClient.uploadWithResponse&#40;Flux.just&#40;defaultData&#41;, defaultData.remaining&#40;&#41;, 0L, requestConditions&#41;
         .subscribe&#40;
             response -&gt; &#123; &#125;,
             error -&gt; System.err.print&#40;error.toString&#40;&#41;&#41;,
             &#40;&#41; -&gt; System.out.println&#40;&quot;Complete deleting the file!&quot;&#41;
         &#41;;
     </pre>

     <p>For more information, see the
     <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/put-range">Azure Docs</a>.</p>
  parameters:
  - description: The data which will upload to the storage file.
    name: data
    type: <xref href="reactor.core.publisher.Flux?alt=reactor.core.publisher.Flux&text=Flux" data-throw-if-not-resolved="False" />&lt;<xref href="java.nio.ByteBuffer?alt=java.nio.ByteBuffer&text=ByteBuffer" data-throw-if-not-resolved="False" />&gt;
  - description: |-
      Specifies the number of bytes being transmitted in the request body. When the
       ShareFileRangeWriteType is set to clear, the value of this header must be set to zero.
    name: length
    type: <xref href="long?alt=long&text=long" data-throw-if-not-resolved="False" />
  - description: |-
      Optional starting point of the upload range. It will start from the beginning if it is
       <code>null</code>.
    name: offset
    type: <xref href="java.lang.Long?alt=java.lang.Long&text=Long" data-throw-if-not-resolved="False" />
  - description: <xref uid="ShareRequestConditions" data-throw-if-not-resolved="false">ShareRequestConditions</xref>
    name: requestConditions
    type: <xref href="com.azure.storage.file.share.models.ShareRequestConditions?alt=com.azure.storage.file.share.models.ShareRequestConditions&text=ShareRequestConditions" data-throw-if-not-resolved="False" />
  syntax: public Mono<Response<ShareFileUploadInfo>> uploadWithResponse(Flux<ByteBuffer> data, long length, Long offset, ShareRequestConditions requestConditions)
  returns:
    description: |-
      A response containing the <xref uid="ShareFileUploadInfo" data-throw-if-not-resolved="false">file upload info</xref> with headers and response
       status code.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.file.share.models.ShareFileUploadInfo?alt=com.azure.storage.file.share.models.ShareFileUploadInfo&text=ShareFileUploadInfo" data-throw-if-not-resolved="False" />&gt;&gt;
type: method
metadata: {}
package: com.azure.storage.file.share
artifact: com.azure:azure-storage-file-share:12.6.0
