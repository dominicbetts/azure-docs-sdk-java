### YamlMime:JavaMember
uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions*
fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions
name: AnalyzeTextOptions
nameWithType: AnalyzeTextOptions.AnalyzeTextOptions
members:
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(java.lang.String,com.azure.search.documents.indexes.models.LexicalAnalyzerName)
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalAnalyzerName analyzerName)
  name: AnalyzeTextOptions(String text, LexicalAnalyzerName analyzerName)
  nameWithType: AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalAnalyzerName analyzerName)
  summary: Constructor to <xref uid="AnalyzeTextOptions" data-throw-if-not-resolved="false">AnalyzeTextOptions</xref> which takes analyzerName.
  parameters:
  - description: The text break into tokens.
    name: text
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: |-
      The name of the analyzer to use to break the
       given text. If this parameter is not specified, you must specify a
       tokenizer instead. The tokenizer and analyzer parameters are mutually
       exclusive. Possible values include: 'ArMicrosoft', 'ArLucene',
       'HyLucene', 'BnMicrosoft', 'EuLucene', 'BgMicrosoft', 'BgLucene',
       'CaMicrosoft', 'CaLucene', 'ZhHansMicrosoft', 'ZhHansLucene',
       'ZhHantMicrosoft', 'ZhHantLucene', 'HrMicrosoft', 'CsMicrosoft',
       'CsLucene', 'DaMicrosoft', 'DaLucene', 'NlMicrosoft', 'NlLucene',
       'EnMicrosoft', 'EnLucene', 'EtMicrosoft', 'FiMicrosoft', 'FiLucene',
       'FrMicrosoft', 'FrLucene', 'GlLucene', 'DeMicrosoft', 'DeLucene',
       'ElMicrosoft', 'ElLucene', 'GuMicrosoft', 'HeMicrosoft', 'HiMicrosoft',
       'HiLucene', 'HuMicrosoft', 'HuLucene', 'IsMicrosoft', 'IdMicrosoft',
       'IdLucene', 'GaLucene', 'ItMicrosoft', 'ItLucene', 'JaMicrosoft',
       'JaLucene', 'KnMicrosoft', 'KoMicrosoft', 'KoLucene', 'LvMicrosoft',
       'LvLucene', 'LtMicrosoft', 'MlMicrosoft', 'MsMicrosoft', 'MrMicrosoft',
       'NbMicrosoft', 'NoLucene', 'FaLucene', 'PlMicrosoft', 'PlLucene',
       'PtBrMicrosoft', 'PtBrLucene', 'PtPtMicrosoft', 'PtPtLucene',
       'PaMicrosoft', 'RoMicrosoft', 'RoLucene', 'RuMicrosoft', 'RuLucene',
       'SrCyrillicMicrosoft', 'SrLatinMicrosoft', 'SkMicrosoft', 'SlMicrosoft',
       'EsMicrosoft', 'EsLucene', 'SvMicrosoft', 'SvLucene', 'TaMicrosoft',
       'TeMicrosoft', 'ThMicrosoft', 'ThLucene', 'TrMicrosoft', 'TrLucene',
       'UkMicrosoft', 'UrMicrosoft', 'ViMicrosoft', 'StandardLucene',
       'StandardAsciiFoldingLucene', 'Keyword', 'Pattern', 'Simple', 'Stop',
       'Whitespace'.
    name: analyzerName
    type: <xref href="com.azure.search.documents.indexes.models.LexicalAnalyzerName?alt=com.azure.search.documents.indexes.models.LexicalAnalyzerName&text=LexicalAnalyzerName" data-throw-if-not-resolved="False" />
  syntax: public AnalyzeTextOptions(String text, LexicalAnalyzerName analyzerName)
- uid: com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(java.lang.String,com.azure.search.documents.indexes.models.LexicalTokenizerName)
  fullName: com.azure.search.documents.indexes.models.AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalTokenizerName tokenizerName)
  name: AnalyzeTextOptions(String text, LexicalTokenizerName tokenizerName)
  nameWithType: AnalyzeTextOptions.AnalyzeTextOptions(String text, LexicalTokenizerName tokenizerName)
  summary: Constructor to <xref uid="AnalyzeTextOptions" data-throw-if-not-resolved="false">AnalyzeTextOptions</xref> which takes tokenizerName.
  parameters:
  - description: The text break into tokens.
    name: text
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: |-
      The name of the tokenizer to use to break
       the given text. If this parameter is not specified, you must specify an
       analyzer instead. The tokenizer and analyzer parameters are mutually
       exclusive. Possible values include: 'Classic', 'EdgeNGram', 'Keyword',
       'Letter', 'Lowercase', 'MicrosoftLanguageTokenizer',
       'MicrosoftLanguageStemmingTokenizer', 'NGram', 'PathHierarchy',
       'Pattern', 'Standard', 'UaxUrlEmail', 'Whitespace'.
    name: tokenizerName
    type: <xref href="com.azure.search.documents.indexes.models.LexicalTokenizerName?alt=com.azure.search.documents.indexes.models.LexicalTokenizerName&text=LexicalTokenizerName" data-throw-if-not-resolved="False" />
  syntax: public AnalyzeTextOptions(String text, LexicalTokenizerName tokenizerName)
type: constructor
metadata: {}
package: com.azure.search.documents.indexes.models
artifact: com.azure:azure-search-documents:11.0.0
