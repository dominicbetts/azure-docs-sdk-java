### YamlMime:JavaMember
uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile*
fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile
name: createFile
nameWithType: DataLakeFileSystemAsyncClient.createFile
members:
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile(java.lang.String)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile(String fileName)
  name: createFile(String fileName)
  nameWithType: DataLakeFileSystemAsyncClient.createFile(String fileName)
  summary: |-
    Creates a new file within a file system. By default this method will not overwrite an existing file. For more
     information, see the <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create">Azure Docs</a>.

     <p><strong>Code Samples</strong></p>

     <pre>
     Mono&lt;DataLakeFileAsyncClient&gt; fileClient = client.createFile&#40;fileName&#41;;
     </pre>
  parameters:
  - description: Name of the file to create.
    name: fileName
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  syntax: public Mono<DataLakeFileAsyncClient> createFile(String fileName)
  returns:
    description: A <xref uid="Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="DataLakeFileAsyncClient" data-throw-if-not-resolved="false">DataLakeFileAsyncClient</xref> used to interact with the file created.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile(java.lang.String,boolean)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createFile(String fileName, boolean overwrite)
  name: createFile(String fileName, boolean overwrite)
  nameWithType: DataLakeFileSystemAsyncClient.createFile(String fileName, boolean overwrite)
  summary: |-
    Creates a new file within a file system. For more information, see the
     <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create">Azure Docs</a>.

     <p><strong>Code Samples</strong></p>

     <pre>
     boolean overwrite = false; &#47;* Default value. *&#47;
     Mono&lt;DataLakeFileAsyncClient&gt; fClient = client.createFile&#40;fileName, overwrite&#41;;
     </pre>
  parameters:
  - description: Name of the file to create.
    name: fileName
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: Whether or not to overwrite, should a file exist.
    name: overwrite
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False" />
  syntax: public Mono<DataLakeFileAsyncClient> createFile(String fileName, boolean overwrite)
  returns:
    description: A <xref uid="Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="DataLakeFileAsyncClient" data-throw-if-not-resolved="false">DataLakeFileAsyncClient</xref> used to interact with the file created.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.storage.file.datalake
artifact: com.azure:azure-storage-file-datalake:12.2.0
