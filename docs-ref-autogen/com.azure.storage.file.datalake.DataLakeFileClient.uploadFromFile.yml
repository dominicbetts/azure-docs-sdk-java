### YamlMime:JavaMember
uid: com.azure.storage.file.datalake.DataLakeFileClient.uploadFromFile*
fullName: com.azure.storage.file.datalake.DataLakeFileClient.uploadFromFile
name: uploadFromFile
nameWithType: DataLakeFileClient.uploadFromFile
members:
- uid: com.azure.storage.file.datalake.DataLakeFileClient.uploadFromFile(java.lang.String)
  fullName: com.azure.storage.file.datalake.DataLakeFileClient.uploadFromFile(String filePath)
  name: uploadFromFile(String filePath)
  nameWithType: DataLakeFileClient.uploadFromFile(String filePath)
  summary: |-
    Creates a file, with the content of the specified file. By default this method will not overwrite an
     existing file.

     <p><strong>Code Samples</strong></p>

     <pre>
     try &#123;
         client.uploadFromFile&#40;filePath&#41;;
         System.out.println&#40;&quot;Upload from file succeeded&quot;&#41;;
     &#125; catch &#40;UncheckedIOException ex&#41; &#123;
         System.err.printf&#40;&quot;Failed to upload from file %s%n&quot;, ex.getMessage&#40;&#41;&#41;;
     &#125;
     </pre>
  parameters:
  - description: Path of the file to upload
    name: filePath
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  syntax: public void uploadFromFile(String filePath)
- uid: com.azure.storage.file.datalake.DataLakeFileClient.uploadFromFile(java.lang.String,boolean)
  fullName: com.azure.storage.file.datalake.DataLakeFileClient.uploadFromFile(String filePath, boolean overwrite)
  name: uploadFromFile(String filePath, boolean overwrite)
  nameWithType: DataLakeFileClient.uploadFromFile(String filePath, boolean overwrite)
  summary: |-
    Creates a file, with the content of the specified file.

     <p><strong>Code Samples</strong></p>

     <pre>
     try &#123;
         boolean overwrite = false;
         client.uploadFromFile&#40;filePath, overwrite&#41;;
         System.out.println&#40;&quot;Upload from file succeeded&quot;&#41;;
     &#125; catch &#40;UncheckedIOException ex&#41; &#123;
         System.err.printf&#40;&quot;Failed to upload from file %s%n&quot;, ex.getMessage&#40;&#41;&#41;;
     &#125;
     </pre>
  parameters:
  - description: Path of the file to upload
    name: filePath
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: Whether or not to overwrite, should the file already exist
    name: overwrite
    type: <xref href="boolean?alt=boolean&text=boolean" data-throw-if-not-resolved="False" />
  syntax: public void uploadFromFile(String filePath, boolean overwrite)
- uid: com.azure.storage.file.datalake.DataLakeFileClient.uploadFromFile(java.lang.String,com.azure.storage.common.ParallelTransferOptions,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration)
  fullName: com.azure.storage.file.datalake.DataLakeFileClient.uploadFromFile(String filePath, ParallelTransferOptions parallelTransferOptions, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout)
  name: uploadFromFile(String filePath, ParallelTransferOptions parallelTransferOptions, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout)
  nameWithType: DataLakeFileClient.uploadFromFile(String filePath, ParallelTransferOptions parallelTransferOptions, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout)
  summary: "Creates a file, with the content of the specified file.\n <p>\n To avoid overwriting, pass \"*\" to <xref uid=\"DataLakeRequestConditions#setIfNoneMatch(String)\" data-throw-if-not-resolved=\"false\">DataLakeRequestConditions#setIfNoneMatch(String)</xref>.\n\n <p><strong>Code Samples</strong></p>\n\n <pre>\n PathHttpHeaders headers = new PathHttpHeaders&#40;&#41;\n     .setContentMd5&#40;&quot;data&quot;.getBytes&#40;StandardCharsets.UTF_8&#41;&#41;\n     .setContentLanguage&#40;&quot;en-US&quot;&#41;\n     .setContentType&#40;&quot;binary&quot;&#41;;\n \n Map&lt;String, String&gt; metadata = Collections.singletonMap&#40;&quot;metadata&quot;, &quot;value&quot;&#41;;\n DataLakeRequestConditions requestConditions = new DataLakeRequestConditions&#40;&#41;\n     .setLeaseId&#40;leaseId&#41;\n     .setIfUnmodifiedSince&#40;OffsetDateTime.now&#40;&#41;.minusDays&#40;3&#41;&#41;;\n Long blockSize = 100L * 1024L * 1024L; &#47;&#47; 100 MB;\n ParallelTransferOptions parallelTransferOptions = new ParallelTransferOptions&#40;&#41;.setBlockSizeLong&#40;blockSize&#41;;\n \n try &#123;\n     client.uploadFromFile&#40;filePath, parallelTransferOptions, headers, metadata, requestConditions, timeout&#41;;\n     System.out.println&#40;&quot;Upload from file succeeded&quot;&#41;;\n &#125; catch &#40;UncheckedIOException ex&#41; &#123;\n     System.err.printf&#40;&quot;Failed to upload from file %s%n&quot;, ex.getMessage&#40;&#41;&#41;;\n &#125;\n </pre>"
  parameters:
  - description: Path of the file to upload
    name: filePath
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: <xref uid="ParallelTransferOptions" data-throw-if-not-resolved="false">ParallelTransferOptions</xref> used to configure buffered uploading.
    name: parallelTransferOptions
    type: <xref href="com.azure.storage.common.ParallelTransferOptions?alt=com.azure.storage.common.ParallelTransferOptions&text=ParallelTransferOptions" data-throw-if-not-resolved="False" />
  - description: <xref uid="PathHttpHeaders" data-throw-if-not-resolved="false">PathHttpHeaders</xref>
    name: headers
    type: <xref href="com.azure.storage.file.datalake.models.PathHttpHeaders?alt=com.azure.storage.file.datalake.models.PathHttpHeaders&text=PathHttpHeaders" data-throw-if-not-resolved="False" />
  - description: Metadata to associate with the resource.
    name: metadata
    type: <xref href="java.util.Map?alt=java.util.Map&text=Map" data-throw-if-not-resolved="False" />&lt;<xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />,<xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />&gt;
  - description: <xref uid="DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    name: requestConditions
    type: <xref href="com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions" data-throw-if-not-resolved="False" />
  - description: An optional timeout value beyond which a <xref uid="RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    name: timeout
    type: <xref href="java.time.Duration?alt=java.time.Duration&text=Duration" data-throw-if-not-resolved="False" />
  syntax: public void uploadFromFile(String filePath, ParallelTransferOptions parallelTransferOptions, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout)
type: method
metadata: {}
package: com.azure.storage.file.datalake
artifact: com.azure:azure-storage-file-datalake:12.2.0
