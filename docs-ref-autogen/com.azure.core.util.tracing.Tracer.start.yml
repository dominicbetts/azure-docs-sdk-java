### YamlMime:JavaMember
uid: com.azure.core.util.tracing.Tracer.start*
fullName: com.azure.core.util.tracing.Tracer.start
name: start
nameWithType: Tracer.start
members:
- uid: com.azure.core.util.tracing.Tracer.start(java.lang.String,com.azure.core.util.Context)
  fullName: com.azure.core.util.tracing.Tracer.start(String methodName, Context context)
  name: start(String methodName, Context context)
  nameWithType: Tracer.start(String methodName, Context context)
  summary: |-
    Creates a new tracing span.
     <p>
     The <code>context</code> will be checked for information about a parent span. If a parent span is found, the new span
     will be added as a child. Otherwise, the parent span will be created and added to the <code>context</code> and any
     downstream <code>start()</code> calls will use the created span as the parent.

     <p><strong>Code samples</strong></p>

     <p>Starts a tracing span with provided method name and explicit parent span</p>
     <pre>
     &#47;&#47; pass the current tracing span context to the calling method
     Context traceContext = new Context&#40;PARENT_SPAN_KEY, &quot;&lt;user-current-span&gt;&quot;&#41;;
     &#47;&#47; start a new tracing span with the given method name and explicit parent span
     Context updatedContext = tracer.start&#40;&quot;azure.keyvault.secrets&#47;setsecret&quot;, traceContext&#41;;
     System.out.printf&#40;&quot;Span returned in the context object: %s%n&quot;,
         updatedContext.getData&#40;PARENT_SPAN_KEY&#41;.get&#40;&#41;&#41;;
     </pre>
  parameters:
  - description: Name of the method triggering the span creation.
    name: methodName
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: Additional metadata that is passed through the call stack.
    name: context
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
  syntax: public abstract Context start(String methodName, Context context)
  returns:
    description: The updated <xref uid="Context" data-throw-if-not-resolved="false">Context</xref> object containing the returned span.
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
- uid: com.azure.core.util.tracing.Tracer.start(java.lang.String,com.azure.core.util.Context,com.azure.core.util.tracing.ProcessKind)
  fullName: com.azure.core.util.tracing.Tracer.start(String methodName, Context context, ProcessKind processKind)
  name: start(String methodName, Context context, ProcessKind processKind)
  nameWithType: Tracer.start(String methodName, Context context, ProcessKind processKind)
  summary: "Creates a new tracing span for AMQP calls.\n\n <p>\n The <code>context</code> will be checked for information about a parent span. If a parent span is found, the new span\n will be added as a child. Otherwise, the parent span will be created and added to the <code>context</code> and any\n downstream <code>start()</code> calls will use the created span as the parent.\n\n <p>\n Sets additional request attributes on the created span when <code>processKind</code> is\n <xref uid=\"ProcessKind#SEND\" data-throw-if-not-resolved=\"false\">ProcessKind.SEND</xref>.\n\n <p>\n Returns the diagnostic Id and span context of the returned span when <code>processKind</code> is\n <xref uid=\"ProcessKind#MESSAGE\" data-throw-if-not-resolved=\"false\">ProcessKind.MESSAGE</xref>.\n\n <p>\n Creates a new tracing span with remote parent and returns that scope when the given when <code>processKind</code>\n is <xref uid=\"ProcessKind#PROCESS\" data-throw-if-not-resolved=\"false\">ProcessKind.PROCESS</xref>.\n\n <p><strong>Code samples</strong></p>\n\n <p>Starts a tracing span with provided method name and AMQP operation SEND</p>\n <pre>\n &#47;&#47; pass the current tracing span and request metadata to the calling method\n Context sendContext = new Context&#40;PARENT_SPAN_KEY, &quot;&lt;user-current-span&gt;&quot;&#41;\n     .addData&#40;ENTITY_PATH_KEY, &quot;entity-path&quot;&#41;.addData&#40;HOST_NAME_KEY, &quot;hostname&quot;&#41;;\n \n &#47;&#47; start a new tracing span with explicit parent, sets the request attributes on the span and sets the span\n &#47;&#47; kind to client when process kind SEND\n Context updatedSendContext = tracer.start&#40;&quot;azure.eventhubs.send&quot;, sendContext, ProcessKind.SEND&#41;;\n System.out.printf&#40;&quot;Span returned in the context object: %s%n&quot;,\n     updatedSendContext.getData&#40;PARENT_SPAN_KEY&#41;.get&#40;&#41;&#41;;\n </pre>\n\n <p>Starts a tracing span with provided method name and AMQP operation MESSAGE</p>\n <pre>\n String diagnosticIdKey = &quot;diagnostic-id&quot;;\n &#47;&#47; start a new tracing span with explicit parent, sets the diagnostic Id &#40;traceparent headers&#41; on the current\n &#47;&#47; context when process kind MESSAGE\n Context updatedReceiveContext = tracer.start&#40;&quot;azure.eventhubs.receive&quot;, traceContext,\n     ProcessKind.MESSAGE&#41;;\n System.out.printf&#40;&quot;Diagnostic Id: %s%n&quot;, updatedReceiveContext.getData&#40;diagnosticIdKey&#41;.get&#40;&#41;.toString&#40;&#41;&#41;;\n </pre>\n\n <p>Starts a tracing span with provided method name and AMQP operation PROCESS</p>\n <pre>\n String spanImplContext = &quot;span-context&quot;;\n &#47;&#47; start a new tracing span with remote parent and uses the span in the current context to return a scope\n &#47;&#47; when process kind PROCESS\n Context processContext = new Context&#40;PARENT_SPAN_KEY, &quot;&lt;user-current-span&gt;&quot;&#41;\n     .addData&#40;spanImplContext, &quot;&lt;user-current-span-context&gt;&quot;&#41;;\n Context updatedProcessContext = tracer.start&#40;&quot;azure.eventhubs.process&quot;, processContext,\n     ProcessKind.PROCESS&#41;;\n System.out.printf&#40;&quot;Scope: %s%n&quot;, updatedProcessContext.getData&#40;&quot;scope&quot;&#41;.get&#40;&#41;&#41;;\n </pre>"
  parameters:
  - description: Name of the method triggering the span creation.
    name: methodName
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: Additional metadata that is passed through the call stack.
    name: context
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
  - description: AMQP operation kind.
    name: processKind
    type: <xref href="com.azure.core.util.tracing.ProcessKind?alt=com.azure.core.util.tracing.ProcessKind&text=ProcessKind" data-throw-if-not-resolved="False" />
  syntax: public abstract Context start(String methodName, Context context, ProcessKind processKind)
  returns:
    description: The updated <xref uid="Context" data-throw-if-not-resolved="false">Context</xref> object containing the returned span.
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
type: method
metadata: {}
package: com.azure.core.util.tracing
artifact: com.azure:azure-core:1.7.0
