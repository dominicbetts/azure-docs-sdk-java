### YamlMime:JavaMember
uid: com.azure.storage.file.datalake.DataLakeDirectoryClient.createFileWithResponse*
fullName: com.azure.storage.file.datalake.DataLakeDirectoryClient.createFileWithResponse
name: createFileWithResponse
nameWithType: DataLakeDirectoryClient.createFileWithResponse
members:
- uid: com.azure.storage.file.datalake.DataLakeDirectoryClient.createFileWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions,java.time.Duration,com.azure.core.util.Context)
  fullName: com.azure.storage.file.datalake.DataLakeDirectoryClient.createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  name: createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  nameWithType: DataLakeDirectoryClient.createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  summary: |-
    Creates a new file within a directory. If a file with the same name already exists, the file will be
     overwritten. For more information, see the
     <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create">Azure Docs</a>.

     <p><strong>Code Samples</strong></p>

     <pre>
     PathHttpHeaders httpHeaders = new PathHttpHeaders&#40;&#41;
         .setContentLanguage&#40;&quot;en-US&quot;&#41;
         .setContentType&#40;&quot;binary&quot;&#41;;
     DataLakeRequestConditions requestConditions = new DataLakeRequestConditions&#40;&#41;
         .setLeaseId&#40;leaseId&#41;;
     String permissions = &quot;permissions&quot;;
     String umask = &quot;umask&quot;;
     Response&lt;DataLakeFileClient&gt; newFileClient = client.createFileWithResponse&#40;fileName, permissions, umask, httpHeaders,
         Collections.singletonMap&#40;&quot;metadata&quot;, &quot;value&quot;&#41;, requestConditions,
         timeout, new Context&#40;key1, value1&#41;&#41;;
     </pre>
  parameters:
  - description: Name of the file to create.
    name: fileName
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: POSIX access permissions for the file owner, the file owning group, and others.
    name: permissions
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: Restricts permissions of the file to be created.
    name: umask
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: <xref uid="PathHttpHeaders" data-throw-if-not-resolved="false">PathHttpHeaders</xref>
    name: headers
    type: <xref href="com.azure.storage.file.datalake.models.PathHttpHeaders?alt=com.azure.storage.file.datalake.models.PathHttpHeaders&text=PathHttpHeaders" data-throw-if-not-resolved="False" />
  - description: Metadata to associate with the file.
    name: metadata
    type: <xref href="java.util.Map?alt=java.util.Map&text=Map" data-throw-if-not-resolved="False" />&lt;<xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />,<xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />&gt;
  - description: <xref uid="DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    name: requestConditions
    type: <xref href="com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions" data-throw-if-not-resolved="False" />
  - description: An optional timeout value beyond which a <xref uid="RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    name: timeout
    type: <xref href="java.time.Duration?alt=java.time.Duration&text=Duration" data-throw-if-not-resolved="False" />
  - description: Additional context that is passed through the Http pipeline during the service call.
    name: context
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
  syntax: public Response<DataLakeFileClient> createFileWithResponse(String fileName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions, Duration timeout, Context context)
  returns:
    description: |-
      A <xref uid="Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="Response#getValue()" data-throw-if-not-resolved="false">value</xref> contains the <xref uid="DataLakeFileClient" data-throw-if-not-resolved="false">DataLakeFileClient</xref> used
       to interact with the file created.
    type: <xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.file.datalake.DataLakeFileClient?alt=com.azure.storage.file.datalake.DataLakeFileClient&text=DataLakeFileClient" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.storage.file.datalake
artifact: com.azure:azure-storage-file-datalake:12.2.0
