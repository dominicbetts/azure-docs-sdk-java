### YamlMime:JavaMember
uid: com.azure.storage.common.ParallelTransferOptions.ParallelTransferOptions*
fullName: com.azure.storage.common.ParallelTransferOptions.ParallelTransferOptions
name: ParallelTransferOptions
nameWithType: ParallelTransferOptions.ParallelTransferOptions
members:
- uid: com.azure.storage.common.ParallelTransferOptions.ParallelTransferOptions()
  fullName: com.azure.storage.common.ParallelTransferOptions.ParallelTransferOptions()
  name: ParallelTransferOptions()
  nameWithType: ParallelTransferOptions.ParallelTransferOptions()
  summary: Creates a new <xref uid="ParallelTransferOptions" data-throw-if-not-resolved="false">ParallelTransferOptions</xref> with default parameters applied.
  syntax: public ParallelTransferOptions()
- uid: com.azure.storage.common.ParallelTransferOptions.ParallelTransferOptions(java.lang.Integer,java.lang.Integer,com.azure.storage.common.ProgressReceiver,java.lang.Integer)
  fullName: com.azure.storage.common.ParallelTransferOptions.ParallelTransferOptions(Integer blockSize, Integer maxConcurrency, ProgressReceiver progressReceiver, Integer maxSingleUploadSize)
  name: ParallelTransferOptions(Integer blockSize, Integer maxConcurrency, ProgressReceiver progressReceiver, Integer maxSingleUploadSize)
  nameWithType: ParallelTransferOptions.ParallelTransferOptions(Integer blockSize, Integer maxConcurrency, ProgressReceiver progressReceiver, Integer maxSingleUploadSize)
  summary: Creates a new <xref uid="ParallelTransferOptions" data-throw-if-not-resolved="false">ParallelTransferOptions</xref> with default parameters applied.
  parameters:
  - description: |-
      The block size.
       For upload, The block size is the size of each block that will be staged. This value also determines the number
       of requests that need to be made. This parameter also determines the size that each buffer uses when buffering
       is required and consequently amount of memory consumed by such methods may be up to blockSize * numBuffers.
       For download to file, the block size is the size of each data chunk returned from the service.
       For both applications, If block size is large, upload will make fewer network calls, but each
       individual call will send more data and will therefore take longer.
    name: blockSize
    type: <xref href="java.lang.Integer?alt=java.lang.Integer&text=Integer" data-throw-if-not-resolved="False" />
  - description: |-
      The maximum number of parallel requests that will be issued at any given time as a part of
       a single parallel transfer. This value applies per api. For example, if two calls to uploadFromFile are made at
       the same time, and each specifies a maxConcurrency of 5, there may be up to 10 outstanding, concurrent requests,
       up to 5 for each of the upload operations. For buffered uploads only, the maximum number of buffers to be
       allocated as part of the transfer will be <code>maxConcurrency + 1</code>. In those cases, memory will be allocated
       lazily as needed. The amount of memory consumed by methods which buffer may be up to blockSize * maxConcurrency.
       In general, upload methods which do not accept a length parameter must perform some buffering.
    name: maxConcurrency
    type: <xref href="java.lang.Integer?alt=java.lang.Integer&text=Integer" data-throw-if-not-resolved="False" />
  - description: <xref uid="ProgressReceiver" data-throw-if-not-resolved="false">ProgressReceiver</xref>
    name: progressReceiver
    type: <xref href="com.azure.storage.common.ProgressReceiver?alt=com.azure.storage.common.ProgressReceiver&text=ProgressReceiver" data-throw-if-not-resolved="False" />
  - description: |-
      If the size of the data is less than or equal to this value, it will be uploaded in a
       single put rather than broken up into chunks. If the data is uploaded in a single shot, the block size will be
       ignored. Some constraints to consider are that more requests cost more, but several small or mid-sized requests
       may sometimes perform better. In the case of buffered upload, up to this amount of data may be buffered before
       any data is sent. Must be greater than 0. May be null to accept default behavior, which is the maximum value the
       service accepts for uploading in a single requests, which varies depending on the service.
    name: maxSingleUploadSize
    type: <xref href="java.lang.Integer?alt=java.lang.Integer&text=Integer" data-throw-if-not-resolved="False" />
  syntax: public ParallelTransferOptions(Integer blockSize, Integer maxConcurrency, ProgressReceiver progressReceiver, Integer maxSingleUploadSize)
type: constructor
metadata: {}
package: com.azure.storage.common
artifact: com.azure:azure-storage-common:12.8.0
