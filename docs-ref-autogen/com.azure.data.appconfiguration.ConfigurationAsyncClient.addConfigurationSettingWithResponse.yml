### YamlMime:JavaMember
uid: com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSettingWithResponse*
fullName: com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSettingWithResponse
name: addConfigurationSettingWithResponse
nameWithType: ConfigurationAsyncClient.addConfigurationSettingWithResponse
members:
- uid: com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSettingWithResponse(com.azure.data.appconfiguration.models.ConfigurationSetting)
  fullName: com.azure.data.appconfiguration.ConfigurationAsyncClient.addConfigurationSettingWithResponse(ConfigurationSetting setting)
  name: addConfigurationSettingWithResponse(ConfigurationSetting setting)
  nameWithType: ConfigurationAsyncClient.addConfigurationSettingWithResponse(ConfigurationSetting setting)
  summary: |-
    Adds a configuration value in the service if that key and label does not exist. The label value of the
     ConfigurationSetting is optional.

     <p><strong>Code Samples</strong></p>

     <p>Add a setting with the key "prodDBConnection", label "westUS", and value "db_connection".</p>

     <pre>
     client.addConfigurationSettingWithResponse&#40;
         new ConfigurationSetting&#40;&#41;.setKey&#40;&quot;prodDBConnection&quot;&#41;.setLabel&#40;&quot;westUS&quot;&#41;.setValue&#40;&quot;db_connection&quot;&#41;&#41;
         .subscriberContext&#40;Context.of&#40;key1, value1, key2, value2&#41;&#41;
         .subscribe&#40;response -&gt; &#123;
             ConfigurationSetting responseSetting = response.getValue&#40;&#41;;
             System.out.printf&#40;&quot;Key: %s, Label: %s, Value: %s&quot;,
                 responseSetting.getKey&#40;&#41;, responseSetting.getLabel&#40;&#41;, responseSetting.getValue&#40;&#41;&#41;;
         &#125;&#41;;
     </pre>
  parameters:
  - description: The setting to add based on its key and optional label combination.
    name: setting
    type: <xref href="com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting" data-throw-if-not-resolved="False" />
  syntax: public Mono<Response<ConfigurationSetting>> addConfigurationSettingWithResponse(ConfigurationSetting setting)
  returns:
    description: |-
      A REST response containing the <xref uid="ConfigurationSetting" data-throw-if-not-resolved="false">ConfigurationSetting</xref> that was created, if a key collision occurs
       or the key is an invalid value (which will also throw HttpResponseException described below).
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting" data-throw-if-not-resolved="False" />&gt;&gt;
type: method
metadata: {}
package: com.azure.data.appconfiguration
artifact: com.azure:azure-data-appconfiguration:1.1.4
