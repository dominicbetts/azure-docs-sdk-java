### YamlMime:JavaType
uid: com.azure.core.annotation.HostParam
fullName: com.azure.core.annotation.HostParam
name: HostParam
nameWithType: HostParam
summary: |-
  Annotation to annotate replacement of parameterized segments in a dynamic <xref uid="com.azure.core.annotation.Host" data-throw-if-not-resolved="false">Host</xref>.

  You provide the value, which should be the same (case sensitive) with the parameterized segments in '\{\}' in the host, unless there's only one parameterized segment, then you can leave the value empty. This is extremely useful when the designer of the API interface doesn't know about the named parameters in the host.

  **Example 1: Named parameters**

  ```java
  @Host("{accountName}.{suffix}")
    interface DatalakeService {
     @GET("jobs/{jobIdentity}")
      Job getJob(@HostParam("accountName") String accountName, @HostParam("suffix") String suffix, @PathParam
      ("jobIdentity") jobIdentity);
    }
  ```

  **Example 2: Unnamed parameter**

  ```java
  @Host(KEY_VAULT_ENDPOINT)
    interface KeyVaultService {
     @GET("secrets/{secretName}")
      Secret get(@HostParam String vaultName, @PathParam("secretName") String secretName);
    }
  ```
syntax: public interface HostParam implements Annotation
methods:
- com.azure.core.annotation.HostParam.encoded()
- com.azure.core.annotation.HostParam.value()
type: interface
implements:
- <xref href="java.lang.annotation.Annotation?alt=java.lang.annotation.Annotation&text=Annotation" data-throw-if-not-resolved="False" />
metadata: {}
package: com.azure.core.annotation
artifact: com.azure:azure-core:1.7.0
