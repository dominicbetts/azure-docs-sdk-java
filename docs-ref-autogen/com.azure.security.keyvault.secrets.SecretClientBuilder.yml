### YamlMime:JavaType
uid: com.azure.security.keyvault.secrets.SecretClientBuilder
fullName: com.azure.security.keyvault.secrets.SecretClientBuilder
name: SecretClientBuilder
nameWithType: SecretClientBuilder
summary: |-
  This class provides a fluent builder API to help aid the configuration and instantiation of the <xref uid="com.azure.security.keyvault.secrets.SecretAsyncClient" data-throw-if-not-resolved="false">secret async client</xref> and <xref uid="com.azure.security.keyvault.secrets.SecretClient" data-throw-if-not-resolved="false">secret client</xref>, by calling <xref uid="com.azure.security.keyvault.secrets.SecretClientBuilder.buildAsyncClient*" data-throw-if-not-resolved="false">buildAsyncClient</xref> and <xref uid="com.azure.security.keyvault.secrets.SecretClientBuilder.buildClient*" data-throw-if-not-resolved="false">buildClient</xref> respectively. It constructs an instance of the desired client.

  The minimal configuration options required by <xref uid="com.azure.security.keyvault.secrets.SecretClientBuilder" data-throw-if-not-resolved="false">secretClientBuilder</xref> to build <xref uid="com.azure.security.keyvault.secrets.SecretAsyncClient" data-throw-if-not-resolved="false">SecretAsyncClient</xref> are <xref uid="java.lang.String" data-throw-if-not-resolved="false">vaultUrl</xref> and <xref uid="com.azure.core.credential.TokenCredential" data-throw-if-not-resolved="false">credential</xref>.

  ```java
  SecretAsyncClient secretAsyncClient = new SecretClientBuilder()
       .credential(new DefaultAzureCredentialBuilder().build())
       .vaultUrl("https://myvault.vault.azure.net/")
       .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))
       .buildAsyncClient();
  ```

  **Samples to construct the sync client**

  ```java
  SecretClient secretClient = new SecretClientBuilder()
       .credential(new DefaultAzureCredentialBuilder().build())
       .vaultUrl("https://myvault.vault.azure.net/")
       .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))
       .buildClient();
  ```

  The <xref uid="" data-throw-if-not-resolved="false">log detail level</xref>, multiple custom <xref uid="" data-throw-if-not-resolved="false">policies</xref> and custom <xref uid="com.azure.core.http.HttpClient" data-throw-if-not-resolved="false">http client</xref> can be optionally configured in the <xref uid="com.azure.security.keyvault.secrets.SecretClientBuilder" data-throw-if-not-resolved="false">SecretClientBuilder</xref>.

  ```java
  SecretAsyncClient secretAsyncClient = new SecretClientBuilder()
       .httpLogOptions(new HttpLogOptions().setLogLevel(HttpLogDetailLevel.BODY_AND_HEADERS))
       .vaultUrl("https://myvault.azure.net/")
       .credential(new DefaultAzureCredentialBuilder().build())
       .httpClient(HttpClient.createDefault())
       .buildAsyncClient();
  ```

  Alternatively, custom <xref uid="com.azure.core.http.HttpPipeline" data-throw-if-not-resolved="false">http pipeline</xref> with custom <xref uid="com.azure.core.http.policy.HttpPipelinePolicy" data-throw-if-not-resolved="false">HttpPipelinePolicy</xref> policies and <xref uid="java.lang.String" data-throw-if-not-resolved="false">vaultUrl</xref> can be specified. It provides finer control over the construction of <xref uid="com.azure.security.keyvault.secrets.SecretAsyncClient" data-throw-if-not-resolved="false">client</xref>

  ```java
  HttpPipeline pipeline = new HttpPipelineBuilder()
       .policies(new KeyVaultCredentialPolicy(credential), new RetryPolicy())
       .build();
   SecretAsyncClient secretAsyncClient = new SecretClientBuilder()
       .pipeline(pipeline)
       .vaultUrl("https://myvault.azure.net/")
       .buildAsyncClient();
  ```
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False" />
inheritedMembers:
- java.lang.Object.clone()
- java.lang.Object.equals(java.lang.Object)
- java.lang.Object.finalize()
- java.lang.Object.getClass()
- java.lang.Object.hashCode()
- java.lang.Object.notify()
- java.lang.Object.notifyAll()
- java.lang.Object.toString()
- java.lang.Object.wait()
- java.lang.Object.wait(long)
- java.lang.Object.wait(long,int)
syntax: public final class SecretClientBuilder
constructors:
- com.azure.security.keyvault.secrets.SecretClientBuilder.SecretClientBuilder()
methods:
- com.azure.security.keyvault.secrets.SecretClientBuilder.addPolicy(com.azure.core.http.policy.HttpPipelinePolicy)
- com.azure.security.keyvault.secrets.SecretClientBuilder.buildAsyncClient()
- com.azure.security.keyvault.secrets.SecretClientBuilder.buildClient()
- com.azure.security.keyvault.secrets.SecretClientBuilder.configuration(com.azure.core.util.Configuration)
- com.azure.security.keyvault.secrets.SecretClientBuilder.credential(com.azure.core.credential.TokenCredential)
- com.azure.security.keyvault.secrets.SecretClientBuilder.httpClient(com.azure.core.http.HttpClient)
- com.azure.security.keyvault.secrets.SecretClientBuilder.httpLogOptions(com.azure.core.http.policy.HttpLogOptions)
- com.azure.security.keyvault.secrets.SecretClientBuilder.pipeline(com.azure.core.http.HttpPipeline)
- com.azure.security.keyvault.secrets.SecretClientBuilder.retryPolicy(com.azure.core.http.policy.RetryPolicy)
- com.azure.security.keyvault.secrets.SecretClientBuilder.serviceVersion(com.azure.security.keyvault.secrets.SecretServiceVersion)
- com.azure.security.keyvault.secrets.SecretClientBuilder.vaultUrl(java.lang.String)
type: class
metadata: {}
package: com.azure.security.keyvault.secrets
artifact: com.azure:azure-security-keyvault-secrets:4.2.0
