### YamlMime:JavaMember
uid: com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings*
fullName: com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings
name: listConfigurationSettings
nameWithType: ConfigurationClient.listConfigurationSettings
members:
- uid: com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings(com.azure.data.appconfiguration.models.SettingSelector)
  fullName: com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings(SettingSelector selector)
  name: listConfigurationSettings(SettingSelector selector)
  nameWithType: ConfigurationClient.listConfigurationSettings(SettingSelector selector)
  summary: |-
    Fetches the configuration settings that match the <code>selector</code>. If <code>selector</code> is <code>null</code>, then all
     the <xref uid="ConfigurationSetting" data-throw-if-not-resolved="false">configuration settings</xref> are fetched with their current values.

     <p><strong>Code Samples</strong></p>

     <p>Retrieve all settings that use the key "prodDBConnection".</p>

     <pre>
     SettingSelector settingSelector = new SettingSelector&#40;&#41;.setKeyFilter&#40;&quot;prodDBConnection&quot;&#41;;
     configurationClient.listConfigurationSettings&#40;settingSelector&#41;.forEach&#40;setting -&gt; &#123;
         System.out.printf&#40;&quot;Key: %s, Value: %s&quot;, setting.getKey&#40;&#41;, setting.getValue&#40;&#41;&#41;;
     &#125;&#41;;
     </pre>
  parameters:
  - description: Optional. Selector to filter configuration setting results from the service.
    name: selector
    type: <xref href="com.azure.data.appconfiguration.models.SettingSelector?alt=com.azure.data.appconfiguration.models.SettingSelector&text=SettingSelector" data-throw-if-not-resolved="False" />
  syntax: public PagedIterable<ConfigurationSetting> listConfigurationSettings(SettingSelector selector)
  returns:
    description: |-
      A <xref uid="PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> of ConfigurationSettings that matches the <code>selector</code>. If no options were
       provided, the List contains all of the current settings in the service.
    type: <xref href="com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting" data-throw-if-not-resolved="False" />&gt;
- uid: com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings(com.azure.data.appconfiguration.models.SettingSelector,com.azure.core.util.Context)
  fullName: com.azure.data.appconfiguration.ConfigurationClient.listConfigurationSettings(SettingSelector selector, Context context)
  name: listConfigurationSettings(SettingSelector selector, Context context)
  nameWithType: ConfigurationClient.listConfigurationSettings(SettingSelector selector, Context context)
  summary: |-
    Fetches the configuration settings that match the <code>selector</code>. If <code>selector</code> is <code>null</code>, then all
     the <xref uid="ConfigurationSetting" data-throw-if-not-resolved="false">configuration settings</xref> are fetched with their current values.

     <p><strong>Code Samples</strong></p>

     <p>Retrieve all settings that use the key "prodDBConnection".</p>

     <pre>
     SettingSelector settingSelector = new SettingSelector&#40;&#41;.setKeyFilter&#40;&quot;prodDBConnection&quot;&#41;;
     Context ctx = new Context&#40;key2, value2&#41;;
     configurationClient.listConfigurationSettings&#40;settingSelector, ctx&#41;.forEach&#40;setting -&gt; &#123;
         System.out.printf&#40;&quot;Key: %s, Value: %s&quot;, setting.getKey&#40;&#41;, setting.getValue&#40;&#41;&#41;;
     &#125;&#41;;
     </pre>
  parameters:
  - description: Optional. Selector to filter configuration setting results from the service.
    name: selector
    type: <xref href="com.azure.data.appconfiguration.models.SettingSelector?alt=com.azure.data.appconfiguration.models.SettingSelector&text=SettingSelector" data-throw-if-not-resolved="False" />
  - description: Additional context that is passed through the Http pipeline during the service call.
    name: context
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
  syntax: public PagedIterable<ConfigurationSetting> listConfigurationSettings(SettingSelector selector, Context context)
  returns:
    description: |-
      A <xref uid="PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> of ConfigurationSettings that matches the <code>selector</code>. If no options were
       provided, the <xref uid="PagedIterable" data-throw-if-not-resolved="false">PagedIterable</xref> contains all of the current settings in the service.
    type: <xref href="com.azure.core.http.rest.PagedIterable?alt=com.azure.core.http.rest.PagedIterable&text=PagedIterable" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.data.appconfiguration.models.ConfigurationSetting?alt=com.azure.data.appconfiguration.models.ConfigurationSetting&text=ConfigurationSetting" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.data.appconfiguration
artifact: com.azure:azure-data-appconfiguration:1.1.4
