### YamlMime:JavaType
uid: com.azure.storage.queue.QueueServiceClientBuilder
fullName: com.azure.storage.queue.QueueServiceClientBuilder
name: QueueServiceClientBuilder
nameWithType: QueueServiceClientBuilder
summary: |-
  This class provides a fluent builder API to help aid the configuration and instantiation of the <xref uid="com.azure.storage.queue.QueueServiceClient" data-throw-if-not-resolved="false">queueServiceClients</xref> and <xref uid="com.azure.storage.queue.QueueServiceAsyncClient" data-throw-if-not-resolved="false">queueServiceAsyncClients</xref>, calling <xref uid="com.azure.storage.queue.QueueServiceClientBuilder.buildClient*" data-throw-if-not-resolved="false">buildClient</xref> constructs an instance of QueueServiceClient and calling <xref uid="com.azure.storage.queue.QueueServiceClientBuilder.buildAsyncClient*" data-throw-if-not-resolved="false">buildAsyncClient</xref> constructs an instance of QueueServiceAsyncClient.

  The client needs the endpoint of the Azure Storage Queue service, name of the share, and authorization credential. <xref uid="com.azure.storage.queue.QueueServiceClientBuilder.endpoint*" data-throw-if-not-resolved="false">endpoint</xref> gives the builder the endpoint and may give the builder the a SAS token that authorizes the client.

  **Instantiating a synchronous Queue Service Client with SAS token**

  ```java
  QueueServiceClient client = new QueueServiceClientBuilder()
       .endpoint("https://${accountName}.queue.core.windows.net?${SASToken}")
       .buildClient();
  ```

  **Instantiating an Asynchronous Queue Service Client with SAS token**

  ```java
  QueueServiceAsyncClient client = new QueueServiceClientBuilder()
       .endpoint("https://{accountName}.queue.core.windows.net?{SASToken}")
       .buildAsyncClient();
  ```

  If the `endpoint` doesn't contain the query parameters to construct a SAS token they may be set using <xref uid="com.azure.storage.queue.QueueServiceClientBuilder.sasToken*" data-throw-if-not-resolved="false">sasToken</xref> together with endpoint.

  **Instantiating a synchronous Queue Service Client with SAS token**

  ```java
  QueueServiceAsyncClient client = new QueueServiceClientBuilder()
       .endpoint("https://{accountName}.queue.core.windows.net")
       .sasToken("{SASTokenQueryParams}")
       .buildAsyncClient();
  ```

  **Instantiating an Asynchronous Queue Service Client with SAS token**

  ```java
  QueueServiceAsyncClient client = new QueueServiceClientBuilder()
       .endpoint("https://{accountName}.queue.core.windows.net")
       .sasToken("{SASTokenQueryParams}")
       .buildAsyncClient();
  ```

  Another way to authenticate the client is using a <xref uid="com.azure.storage.common.StorageSharedKeyCredential" data-throw-if-not-resolved="false">StorageSharedKeyCredential</xref>. To create a StorageSharedKeyCredential a connection string from the Storage Queue service must be used. Set the StorageSharedKeyCredential with <xref uid="com.azure.storage.queue.QueueServiceClientBuilder.connectionString*" data-throw-if-not-resolved="false">connectionString</xref>. If the builder has both a SAS token and StorageSharedKeyCredential the StorageSharedKeyCredential will be preferred when authorizing requests sent to the service.

  **Instantiating a synchronous Queue Service Client with connection string.**

  ```java
  String connectionString = "DefaultEndpointsProtocol=https;AccountName={name};"
       + "AccountKey={key};EndpointSuffix={core.windows.net}";
   QueueServiceClient client = new QueueServiceClientBuilder()
       .connectionString(connectionString)
       .buildClient();
  ```

  **Instantiating an Asynchronous Queue Service Client with connection string.**

  ```java
  String connectionString = "DefaultEndpointsProtocol=https;AccountName={name};"
       + "AccountKey={key};EndpointSuffix={core.windows.net}";
   QueueServiceAsyncClient client = new QueueServiceClientBuilder()
       .connectionString(connectionString)
       .buildAsyncClient();
  ```
inheritances:
- <xref href="java.lang.Object" data-throw-if-not-resolved="False" />
inheritedMembers:
- java.lang.Object.clone()
- java.lang.Object.equals(java.lang.Object)
- java.lang.Object.finalize()
- java.lang.Object.getClass()
- java.lang.Object.hashCode()
- java.lang.Object.notify()
- java.lang.Object.notifyAll()
- java.lang.Object.toString()
- java.lang.Object.wait()
- java.lang.Object.wait(long)
- java.lang.Object.wait(long,int)
syntax: public final class QueueServiceClientBuilder
constructors:
- com.azure.storage.queue.QueueServiceClientBuilder.QueueServiceClientBuilder()
methods:
- com.azure.storage.queue.QueueServiceClientBuilder.addPolicy(com.azure.core.http.policy.HttpPipelinePolicy)
- com.azure.storage.queue.QueueServiceClientBuilder.buildAsyncClient()
- com.azure.storage.queue.QueueServiceClientBuilder.buildClient()
- com.azure.storage.queue.QueueServiceClientBuilder.configuration(com.azure.core.util.Configuration)
- com.azure.storage.queue.QueueServiceClientBuilder.connectionString(java.lang.String)
- com.azure.storage.queue.QueueServiceClientBuilder.credential(com.azure.core.credential.TokenCredential)
- com.azure.storage.queue.QueueServiceClientBuilder.credential(com.azure.storage.common.StorageSharedKeyCredential)
- com.azure.storage.queue.QueueServiceClientBuilder.endpoint(java.lang.String)
- com.azure.storage.queue.QueueServiceClientBuilder.getDefaultHttpLogOptions()
- com.azure.storage.queue.QueueServiceClientBuilder.httpClient(com.azure.core.http.HttpClient)
- com.azure.storage.queue.QueueServiceClientBuilder.httpLogOptions(com.azure.core.http.policy.HttpLogOptions)
- com.azure.storage.queue.QueueServiceClientBuilder.pipeline(com.azure.core.http.HttpPipeline)
- com.azure.storage.queue.QueueServiceClientBuilder.retryOptions(com.azure.storage.common.policy.RequestRetryOptions)
- com.azure.storage.queue.QueueServiceClientBuilder.sasToken(java.lang.String)
- com.azure.storage.queue.QueueServiceClientBuilder.serviceVersion(com.azure.storage.queue.QueueServiceVersion)
type: class
metadata: {}
package: com.azure.storage.queue
artifact: com.azure:azure-storage-queue:12.6.0
