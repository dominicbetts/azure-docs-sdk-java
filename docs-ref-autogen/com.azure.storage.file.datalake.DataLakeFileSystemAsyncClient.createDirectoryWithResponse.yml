### YamlMime:JavaMember
uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectoryWithResponse*
fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectoryWithResponse
name: createDirectoryWithResponse
nameWithType: DataLakeFileSystemAsyncClient.createDirectoryWithResponse
members:
- uid: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectoryWithResponse(java.lang.String,java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.PathHttpHeaders,java.util.Map<java.lang.String,java.lang.String>,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  fullName: com.azure.storage.file.datalake.DataLakeFileSystemAsyncClient.createDirectoryWithResponse(String directoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  name: createDirectoryWithResponse(String directoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  nameWithType: DataLakeFileSystemAsyncClient.createDirectoryWithResponse(String directoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  summary: |-
    Creates a new directory within a file system. If a directory with the same name already exists, the directory
     will be overwritten. For more information, see the
     <a href="https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create">Azure Docs</a>.

     <p><strong>Code Samples</strong></p>

     <pre>
     PathHttpHeaders httpHeaders = new PathHttpHeaders&#40;&#41;
         .setContentLanguage&#40;&quot;en-US&quot;&#41;
         .setContentType&#40;&quot;binary&quot;&#41;;
     DataLakeRequestConditions requestConditions = new DataLakeRequestConditions&#40;&#41;
         .setLeaseId&#40;leaseId&#41;;
     String permissions = &quot;permissions&quot;;
     String umask = &quot;umask&quot;;
     Mono&lt;Response&lt;DataLakeDirectoryAsyncClient&gt;&gt; newDirectoryClient = client.createDirectoryWithResponse&#40;
         directoryName, permissions, umask, httpHeaders, Collections.singletonMap&#40;&quot;metadata&quot;, &quot;value&quot;&#41;,
         requestConditions&#41;;
     </pre>
  parameters:
  - description: Name of the directory to create.
    name: directoryName
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: POSIX access permissions for the directory owner, the directory owning group, and others.
    name: permissions
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: Restricts permissions of the directory to be created.
    name: umask
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: <xref uid="PathHttpHeaders" data-throw-if-not-resolved="false">PathHttpHeaders</xref>
    name: headers
    type: <xref href="com.azure.storage.file.datalake.models.PathHttpHeaders?alt=com.azure.storage.file.datalake.models.PathHttpHeaders&text=PathHttpHeaders" data-throw-if-not-resolved="False" />
  - description: Metadata to associate with the directory.
    name: metadata
    type: <xref href="java.util.Map?alt=java.util.Map&text=Map" data-throw-if-not-resolved="False" />&lt;<xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />,<xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />&gt;
  - description: <xref uid="DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref>
    name: requestConditions
    type: <xref href="com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions" data-throw-if-not-resolved="False" />
  syntax: public Mono<Response<DataLakeDirectoryAsyncClient>> createDirectoryWithResponse(String directoryName, String permissions, String umask, PathHttpHeaders headers, Map<String,String> metadata, DataLakeRequestConditions requestConditions)
  returns:
    description: A <xref uid="Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="Response#getValue()" data-throw-if-not-resolved="false">value</xref> contains a <xref uid="DataLakeDirectoryAsyncClient" data-throw-if-not-resolved="false">DataLakeDirectoryAsyncClient</xref> used to interact with the directory created.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient?alt=com.azure.storage.file.datalake.DataLakeDirectoryAsyncClient&text=DataLakeDirectoryAsyncClient" data-throw-if-not-resolved="False" />&gt;&gt;
type: method
metadata: {}
package: com.azure.storage.file.datalake
artifact: com.azure:azure-storage-file-datalake:12.2.0
