### YamlMime:JavaMember
uid: com.azure.storage.blob.specialized.PageBlobClient.uploadPagesWithResponse*
fullName: com.azure.storage.blob.specialized.PageBlobClient.uploadPagesWithResponse
name: uploadPagesWithResponse
nameWithType: PageBlobClient.uploadPagesWithResponse
members:
- uid: com.azure.storage.blob.specialized.PageBlobClient.uploadPagesWithResponse(com.azure.storage.blob.models.PageRange,java.io.InputStream,byte[],com.azure.storage.blob.models.PageBlobRequestConditions,java.time.Duration,com.azure.core.util.Context)
  fullName: com.azure.storage.blob.specialized.PageBlobClient.uploadPagesWithResponse(PageRange pageRange, InputStream body, byte[] contentMd5, PageBlobRequestConditions pageBlobRequestConditions, Duration timeout, Context context)
  name: uploadPagesWithResponse(PageRange pageRange, InputStream body, byte[] contentMd5, PageBlobRequestConditions pageBlobRequestConditions, Duration timeout, Context context)
  nameWithType: PageBlobClient.uploadPagesWithResponse(PageRange pageRange, InputStream body, byte[] contentMd5, PageBlobRequestConditions pageBlobRequestConditions, Duration timeout, Context context)
  summary: "Writes one or more pages to the page blob. The write size must be a multiple of 512. For more information, see\n the <a href=\"https://docs.microsoft.com/rest/api/storageservices/put-page\">Azure Docs</a>.\n <p>\n Note that the data passed must be replayable if retries are enabled (the default). In other words, the\n <code>Flux</code> must produce the same data each time it is subscribed to.\n\n <p><strong>Code Samples</strong></p>\n\n <pre>\n byte[] md5 = MessageDigest.getInstance&#40;&quot;MD5&quot;&#41;.digest&#40;&quot;data&quot;.getBytes&#40;StandardCharsets.UTF_8&#41;&#41;;\n PageRange pageRange = new PageRange&#40;&#41;\n     .setStart&#40;0&#41;\n     .setEnd&#40;511&#41;;\n InputStream dataStream = new ByteArrayInputStream&#40;data.getBytes&#40;StandardCharsets.UTF_8&#41;&#41;;\n PageBlobRequestConditions pageBlobRequestConditions = new PageBlobRequestConditions&#40;&#41;.setLeaseId&#40;leaseId&#41;;\n Context context = new Context&#40;key, value&#41;;\n \n PageBlobItem pageBlob = client\n     .uploadPagesWithResponse&#40;pageRange, dataStream, md5, pageBlobRequestConditions, timeout, context&#41;.getValue&#40;&#41;;\n \n System.out.printf&#40;&quot;Uploaded page blob with sequence number %s%n&quot;, pageBlob.getBlobSequenceNumber&#40;&#41;&#41;;\n </pre>"
  parameters:
  - description: |-
      A <xref uid="PageRange" data-throw-if-not-resolved="false">PageRange</xref> object. Given that pages must be aligned with 512-byte boundaries, the start
       offset must be a modulus of 512 and the end offset must be a modulus of 512 - 1. Examples of valid byte ranges
       are 0-511, 512-1023, etc.
    name: pageRange
    type: <xref href="com.azure.storage.blob.models.PageRange?alt=com.azure.storage.blob.models.PageRange&text=PageRange" data-throw-if-not-resolved="False" />
  - description: |-
      The data to upload. The data must be markable. This is in order to support retries. If
       the data is not markable, consider using <xref uid="#getBlobOutputStream(PageRange)" data-throw-if-not-resolved="false">#getBlobOutputStream(PageRange)</xref> and writing to the returned
       OutputStream. Alternatively, consider wrapping your data source in a <xref uid="java.io.BufferedInputStream" data-throw-if-not-resolved="false">java.io.BufferedInputStream</xref> to add
       mark support.
    name: body
    type: <xref href="java.io.InputStream?alt=java.io.InputStream&text=InputStream" data-throw-if-not-resolved="False" />
  - description: |-
      An MD5 hash of the page content. This hash is used to verify the integrity of the page during
       transport. When this header is specified, the storage service compares the hash of the content that has arrived
       with this header value. Note that this MD5 hash is not stored with the blob. If the two hashes do not match, the
       operation will fail.
    name: contentMd5
    type: <xref href="byte?alt=byte&text=byte" data-throw-if-not-resolved="False" />[]
  - description: <xref uid="PageBlobRequestConditions" data-throw-if-not-resolved="false">PageBlobRequestConditions</xref>
    name: pageBlobRequestConditions
    type: <xref href="com.azure.storage.blob.models.PageBlobRequestConditions?alt=com.azure.storage.blob.models.PageBlobRequestConditions&text=PageBlobRequestConditions" data-throw-if-not-resolved="False" />
  - description: An optional timeout value beyond which a <xref uid="RuntimeException" data-throw-if-not-resolved="false">RuntimeException</xref> will be raised.
    name: timeout
    type: <xref href="java.time.Duration?alt=java.time.Duration&text=Duration" data-throw-if-not-resolved="False" />
  - description: Additional context that is passed through the Http pipeline during the service call.
    name: context
    type: <xref href="com.azure.core.util.Context?alt=com.azure.core.util.Context&text=Context" data-throw-if-not-resolved="False" />
  syntax: public Response<PageBlobItem> uploadPagesWithResponse(PageRange pageRange, InputStream body, byte[] contentMd5, PageBlobRequestConditions pageBlobRequestConditions, Duration timeout, Context context)
  returns:
    description: The information of the uploaded pages.
    type: <xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.blob.models.PageBlobItem?alt=com.azure.storage.blob.models.PageBlobItem&text=PageBlobItem" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.storage.blob.specialized
artifact: com.azure:azure-storage-blob:12.8.0
