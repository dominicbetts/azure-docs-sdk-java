### YamlMime:JavaMember
uid: com.azure.search.documents.SearchAsyncClient.mergeOrUploadDocuments*
fullName: com.azure.search.documents.SearchAsyncClient.mergeOrUploadDocuments
name: mergeOrUploadDocuments
nameWithType: SearchAsyncClient.mergeOrUploadDocuments
members:
- uid: com.azure.search.documents.SearchAsyncClient.mergeOrUploadDocuments(java.lang.Iterable<?>)
  fullName: com.azure.search.documents.SearchAsyncClient.mergeOrUploadDocuments(Iterable<?> documents)
  name: mergeOrUploadDocuments(Iterable<?> documents)
  nameWithType: SearchAsyncClient.mergeOrUploadDocuments(Iterable<?> documents)
  summary: |-
    This action behaves like merge if a document with the given key already exists in the index. If the document does
     not exist, it behaves like upload with a new document.
     <p>
     If the type of the document contains non-nullable primitive-typed properties, these properties may not merge
     correctly. If you do not set such a property, it will automatically take its default value (for example, <code>
     0</code> for <code>int</code> or <code>false</code> for <code>boolean</code>), which will override the value of the property currently
     stored in the index, even if this was not your intent. For this reason, it is strongly recommended that you
     always declare primitive-typed properties with their class equivalents (for example, an integer property should
     be of type <code>Integer</code> instead of <code>int</code>).

     <p><strong>Code Sample</strong></p>

     <p> Merge or upload dynamic SearchDocument. </p>

     <pre>
     SearchDocument searchDocument = new SearchDocument&#40;&#41;;
     searchDocument.put&#40;&quot;hotelId&quot;, &quot;1&quot;&#41;;
     searchDocument.put&#40;&quot;hotelName&quot;, &quot;test&quot;&#41;;
     searchAsyncClient.mergeOrUploadDocuments&#40;Collections.singletonList&#40;searchDocument&#41;&#41;
         .subscribe&#40;result -&gt; &#123;
             for &#40;IndexingResult indexingResult : result.getResults&#40;&#41;&#41; &#123;
                 System.out.printf&#40;&quot;Does document with key %s mergeOrUpload successfully? %b%n&quot;,
                     indexingResult.getKey&#40;&#41;, indexingResult.isSucceeded&#40;&#41;&#41;;
             &#125;
         &#125;&#41;;
     </pre>
  parameters:
  - description: collection of documents to be merged, if exists, otherwise uploaded
    name: documents
    type: <xref href="java.lang.Iterable?alt=java.lang.Iterable&text=Iterable" data-throw-if-not-resolved="False" />&lt;?&gt;
  syntax: public Mono<IndexDocumentsResult> mergeOrUploadDocuments(Iterable<?> documents)
  returns:
    description: document index result
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.search.documents.models.IndexDocumentsResult?alt=com.azure.search.documents.models.IndexDocumentsResult&text=IndexDocumentsResult" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.search.documents
artifact: com.azure:azure-search-documents:11.0.0
