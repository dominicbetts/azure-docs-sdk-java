### YamlMime:JavaMember
uid: com.azure.storage.file.datalake.DataLakeFileAsyncClient.renameWithResponse*
fullName: com.azure.storage.file.datalake.DataLakeFileAsyncClient.renameWithResponse
name: renameWithResponse
nameWithType: DataLakeFileAsyncClient.renameWithResponse
members:
- uid: com.azure.storage.file.datalake.DataLakeFileAsyncClient.renameWithResponse(java.lang.String,java.lang.String,com.azure.storage.file.datalake.models.DataLakeRequestConditions,com.azure.storage.file.datalake.models.DataLakeRequestConditions)
  fullName: com.azure.storage.file.datalake.DataLakeFileAsyncClient.renameWithResponse(String destinationFileSystem, String destinationPath, DataLakeRequestConditions sourceRequestConditions, DataLakeRequestConditions destinationRequestConditions)
  name: renameWithResponse(String destinationFileSystem, String destinationPath, DataLakeRequestConditions sourceRequestConditions, DataLakeRequestConditions destinationRequestConditions)
  nameWithType: DataLakeFileAsyncClient.renameWithResponse(String destinationFileSystem, String destinationPath, DataLakeRequestConditions sourceRequestConditions, DataLakeRequestConditions destinationRequestConditions)
  summary: "Moves the file to another location within the file system. For more information, see the\n <a href=\"https://docs.microsoft.com/en-us/rest/api/storageservices/datalakestoragegen2/path/create\">Azure Docs</a>.\n\n <p><strong>Code Samples</strong></p>\n\n <pre>\n DataLakeRequestConditions sourceRequestConditions = new DataLakeRequestConditions&#40;&#41;\n     .setLeaseId&#40;leaseId&#41;;\n DataLakeRequestConditions destinationRequestConditions = new DataLakeRequestConditions&#40;&#41;;\n \n DataLakeFileAsyncClient newRenamedClient = client.renameWithResponse&#40;fileSystemName, destinationPath,\n     sourceRequestConditions, destinationRequestConditions&#41;.block&#40;&#41;.getValue&#40;&#41;;\n System.out.println&#40;&quot;Directory Client has been renamed&quot;&#41;;\n </pre>"
  parameters:
  - description: |-
      The file system of the destination within the account.
       <code>null</code> for the current file system.
    name: destinationFileSystem
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: |-
      Relative path from the file system to rename the file to, excludes the file system name.
       For example if you want to move a file with fileSystem = "myfilesystem", path = "mydir/hello.txt" to another path
       in myfilesystem (ex: newdir/hi.txt) then set the destinationPath = "newdir/hi.txt"
    name: destinationPath
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  - description: <xref uid="DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref> against the source.
    name: sourceRequestConditions
    type: <xref href="com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions" data-throw-if-not-resolved="False" />
  - description: <xref uid="DataLakeRequestConditions" data-throw-if-not-resolved="false">DataLakeRequestConditions</xref> against the destination.
    name: destinationRequestConditions
    type: <xref href="com.azure.storage.file.datalake.models.DataLakeRequestConditions?alt=com.azure.storage.file.datalake.models.DataLakeRequestConditions&text=DataLakeRequestConditions" data-throw-if-not-resolved="False" />
  syntax: public Mono<Response<DataLakeFileAsyncClient>> renameWithResponse(String destinationFileSystem, String destinationPath, DataLakeRequestConditions sourceRequestConditions, DataLakeRequestConditions destinationRequestConditions)
  returns:
    description: A <xref uid="Mono" data-throw-if-not-resolved="false">Mono</xref> containing a <xref uid="Response" data-throw-if-not-resolved="false">Response</xref> whose <xref uid="Response#getValue()" data-throw-if-not-resolved="false">value</xref> contains a <xref uid="DataLakeFileAsyncClient" data-throw-if-not-resolved="false">DataLakeFileAsyncClient</xref> used to interact with the file created.
    type: <xref href="reactor.core.publisher.Mono?alt=reactor.core.publisher.Mono&text=Mono" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.core.http.rest.Response?alt=com.azure.core.http.rest.Response&text=Response" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.storage.file.datalake.DataLakeFileAsyncClient?alt=com.azure.storage.file.datalake.DataLakeFileAsyncClient&text=DataLakeFileAsyncClient" data-throw-if-not-resolved="False" />&gt;&gt;
type: method
metadata: {}
package: com.azure.storage.file.datalake
artifact: com.azure:azure-storage-file-datalake:12.2.0
