### YamlMime:JavaMember
uid: com.azure.security.keyvault.secrets.SecretAsyncClient.listPropertiesOfSecretVersions*
fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.listPropertiesOfSecretVersions
name: listPropertiesOfSecretVersions
nameWithType: SecretAsyncClient.listPropertiesOfSecretVersions
members:
- uid: com.azure.security.keyvault.secrets.SecretAsyncClient.listPropertiesOfSecretVersions(java.lang.String)
  fullName: com.azure.security.keyvault.secrets.SecretAsyncClient.listPropertiesOfSecretVersions(String name)
  name: listPropertiesOfSecretVersions(String name)
  nameWithType: SecretAsyncClient.listPropertiesOfSecretVersions(String name)
  summary: |-
    Lists all versions of the specified secret. Each <xref uid="SecretProperties" data-throw-if-not-resolved="false">secret</xref> returned only has its identifier
     and attributes populated. The secret values and secret versions are not listed in the response.
     This operation requires the <code>secrets/list</code> permission.

     <p><strong>Code sample</strong></p>
     <p>The sample below fetches the all the versions of the given secret. For each version retrieved, makes a call
     to <xref uid="#getSecret(String, String)" data-throw-if-not-resolved="false">getSecret(String, String)</xref> to get the version's value, and then prints it out.</p>

     <pre>
     secretAsyncClient.listPropertiesOfSecretVersions&#40;&quot;secretName&quot;&#41;
         .flatMap&#40;secretProperties -&gt; &#123;
             System.out.println&#40;&quot;Get secret value for version: &quot; + secretProperties.getVersion&#40;&#41;&#41;;
             return secretAsyncClient.getSecret&#40;secretProperties.getName&#40;&#41;, secretProperties.getVersion&#40;&#41;&#41;;
         &#125;&#41;
         .subscribe&#40;secret -&gt; System.out.printf&#40;&quot;Received secret with name %s and type %s%n&quot;,
             secret.getName&#40;&#41;, secret.getValue&#40;&#41;&#41;&#41;;
     </pre>
  parameters:
  - description: The name of the secret.
    name: name
    type: <xref href="java.lang.String?alt=java.lang.String&text=String" data-throw-if-not-resolved="False" />
  syntax: public PagedFlux<SecretProperties> listPropertiesOfSecretVersions(String name)
  returns:
    description: |-
      A <xref uid="PagedFlux" data-throw-if-not-resolved="false">PagedFlux</xref> containing <xref uid="SecretProperties" data-throw-if-not-resolved="false">properties</xref> of all the versions of the specified
           secret in the vault. Flux is empty if secret with <code>name</code> does not exist in key vault
    type: <xref href="com.azure.core.http.rest.PagedFlux?alt=com.azure.core.http.rest.PagedFlux&text=PagedFlux" data-throw-if-not-resolved="False" />&lt;<xref href="com.azure.security.keyvault.secrets.models.SecretProperties?alt=com.azure.security.keyvault.secrets.models.SecretProperties&text=SecretProperties" data-throw-if-not-resolved="False" />&gt;
type: method
metadata: {}
package: com.azure.security.keyvault.secrets
artifact: com.azure:azure-security-keyvault-secrets:4.2.0
